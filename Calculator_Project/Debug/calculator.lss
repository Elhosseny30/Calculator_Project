
calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003ef2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000152  00800060  00003ef2  00003f86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000007e  008001b2  008001b2  000040d8  2**0
                  ALLOC
  3 .stab         00003600  00000000  00000000  000040d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001746  00000000  00000000  000076d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00008e1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000020e  00000000  00000000  00008fde  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000268b  00000000  00000000  000091ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014d1  00000000  00000000  0000b877  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012ab  00000000  00000000  0000cd48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000dff4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fb  00000000  00000000  0000e1d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a0a  00000000  00000000  0000e4cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000eed9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ef       	ldi	r30, 0xF2	; 242
      68:	fe e3       	ldi	r31, 0x3E	; 62
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3b       	cpi	r26, 0xB2	; 178
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a2 eb       	ldi	r26, 0xB2	; 178
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 33       	cpi	r26, 0x30	; 48
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 75 10 	call	0x20ea	; 0x20ea <main>
      8a:	0c 94 77 1f 	jmp	0x3eee	; 0x3eee <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9d 1b 	jmp	0x373a	; 0x373a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e8       	ldi	r26, 0x84	; 132
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b9 1b 	jmp	0x3772	; 0x3772 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a9 1b 	jmp	0x3752	; 0x3752 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c5 1b 	jmp	0x378a	; 0x378a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a9 1b 	jmp	0x3752	; 0x3752 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c5 1b 	jmp	0x378a	; 0x378a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9d 1b 	jmp	0x373a	; 0x373a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 e8       	ldi	r24, 0x84	; 132
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b9 1b 	jmp	0x3772	; 0x3772 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a5 1b 	jmp	0x374a	; 0x374a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	64 e8       	ldi	r22, 0x84	; 132
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 c1 1b 	jmp	0x3782	; 0x3782 <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 a9 1b 	jmp	0x3752	; 0x3752 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 c5 1b 	jmp	0x378a	; 0x378a <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 a9 1b 	jmp	0x3752	; 0x3752 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 c5 1b 	jmp	0x378a	; 0x378a <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 a9 1b 	jmp	0x3752	; 0x3752 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 c5 1b 	jmp	0x378a	; 0x378a <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 a9 1b 	jmp	0x3752	; 0x3752 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 c5 1b 	jmp	0x378a	; 0x378a <__epilogue_restores__+0x18>

0000090a <__floatsisf>:
     90a:	a8 e0       	ldi	r26, 0x08	; 8
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 a6 1b 	jmp	0x374c	; 0x374c <__prologue_saves__+0x12>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	88 27       	eor	r24, r24
     924:	b7 fd       	sbrc	r27, 7
     926:	83 95       	inc	r24
     928:	99 27       	eor	r25, r25
     92a:	aa 27       	eor	r26, r26
     92c:	bb 27       	eor	r27, r27
     92e:	b8 2e       	mov	r11, r24
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	41 05       	cpc	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	19 f4       	brne	.+6      	; 0x940 <__floatsisf+0x36>
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__floatsisf+0xaa>
     940:	88 23       	and	r24, r24
     942:	a9 f0       	breq	.+42     	; 0x96e <__floatsisf+0x64>
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	38 07       	cpc	r19, r24
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	48 07       	cpc	r20, r24
     94e:	80 e8       	ldi	r24, 0x80	; 128
     950:	58 07       	cpc	r21, r24
     952:	29 f4       	brne	.+10     	; 0x95e <__floatsisf+0x54>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	9f ec       	ldi	r25, 0xCF	; 207
     95c:	30 c0       	rjmp	.+96     	; 0x9be <__floatsisf+0xb4>
     95e:	ee 24       	eor	r14, r14
     960:	ff 24       	eor	r15, r15
     962:	87 01       	movw	r16, r14
     964:	e2 1a       	sub	r14, r18
     966:	f3 0a       	sbc	r15, r19
     968:	04 0b       	sbc	r16, r20
     96a:	15 0b       	sbc	r17, r21
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__floatsisf+0x68>
     96e:	79 01       	movw	r14, r18
     970:	8a 01       	movw	r16, r20
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 37 05 	call	0xa6e	; 0xa6e <__clzsi2>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	18 16       	cp	r1, r24
     990:	19 06       	cpc	r1, r25
     992:	84 f4       	brge	.+32     	; 0x9b4 <__floatsisf+0xaa>
     994:	08 2e       	mov	r0, r24
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatsisf+0x96>
     998:	ee 0c       	add	r14, r14
     99a:	ff 1c       	adc	r15, r15
     99c:	00 1f       	adc	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatsisf+0x8e>
     9a4:	ed 82       	std	Y+5, r14	; 0x05
     9a6:	fe 82       	std	Y+6, r15	; 0x06
     9a8:	0f 83       	std	Y+7, r16	; 0x07
     9aa:	18 87       	std	Y+8, r17	; 0x08
     9ac:	c8 1a       	sub	r12, r24
     9ae:	d9 0a       	sbc	r13, r25
     9b0:	dc 82       	std	Y+4, r13	; 0x04
     9b2:	cb 82       	std	Y+3, r12	; 0x03
     9b4:	ba 82       	std	Y+2, r11	; 0x02
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     9be:	28 96       	adiw	r28, 0x08	; 8
     9c0:	e9 e0       	ldi	r30, 0x09	; 9
     9c2:	0c 94 c2 1b 	jmp	0x3784	; 0x3784 <__epilogue_restores__+0x12>

000009c6 <__fixsfsi>:
     9c6:	ac e0       	ldi	r26, 0x0C	; 12
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e9 ee       	ldi	r30, 0xE9	; 233
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	0c 94 ad 1b 	jmp	0x375a	; 0x375a <__prologue_saves__+0x20>
     9d2:	69 83       	std	Y+1, r22	; 0x01
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	be 01       	movw	r22, r28
     9e0:	6b 5f       	subi	r22, 0xFB	; 251
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	61 f1       	breq	.+88     	; 0xa46 <__fixsfsi+0x80>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	50 f1       	brcs	.+84     	; 0xa46 <__fixsfsi+0x80>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__fixsfsi+0x38>
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	88 23       	and	r24, r24
     9fa:	51 f1       	breq	.+84     	; 0xa50 <__fixsfsi+0x8a>
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <__fixsfsi+0x94>
     9fe:	2f 81       	ldd	r18, Y+7	; 0x07
     a00:	38 85       	ldd	r19, Y+8	; 0x08
     a02:	37 fd       	sbrc	r19, 7
     a04:	20 c0       	rjmp	.+64     	; 0xa46 <__fixsfsi+0x80>
     a06:	6e 81       	ldd	r22, Y+6	; 0x06
     a08:	2f 31       	cpi	r18, 0x1F	; 31
     a0a:	31 05       	cpc	r19, r1
     a0c:	1c f0       	brlt	.+6      	; 0xa14 <__fixsfsi+0x4e>
     a0e:	66 23       	and	r22, r22
     a10:	f9 f0       	breq	.+62     	; 0xa50 <__fixsfsi+0x8a>
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <__fixsfsi+0x94>
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	29 85       	ldd	r18, Y+9	; 0x09
     a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a20:	4b 85       	ldd	r20, Y+11	; 0x0b
     a22:	5c 85       	ldd	r21, Y+12	; 0x0c
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__fixsfsi+0x68>
     a26:	56 95       	lsr	r21
     a28:	47 95       	ror	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8a 95       	dec	r24
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__fixsfsi+0x60>
     a32:	66 23       	and	r22, r22
     a34:	b1 f0       	breq	.+44     	; 0xa62 <__fixsfsi+0x9c>
     a36:	50 95       	com	r21
     a38:	40 95       	com	r20
     a3a:	30 95       	com	r19
     a3c:	21 95       	neg	r18
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	4f 4f       	sbci	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <__fixsfsi+0x9c>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__fixsfsi+0x9c>
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f ef       	ldi	r20, 0xFF	; 255
     a56:	5f e7       	ldi	r21, 0x7F	; 127
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fixsfsi+0x9c>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e8       	ldi	r21, 0x80	; 128
     a62:	b9 01       	movw	r22, r18
     a64:	ca 01       	movw	r24, r20
     a66:	2c 96       	adiw	r28, 0x0c	; 12
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	0c 94 c9 1b 	jmp	0x3792	; 0x3792 <__epilogue_restores__+0x20>

00000a6e <__clzsi2>:
     a6e:	ef 92       	push	r14
     a70:	ff 92       	push	r15
     a72:	0f 93       	push	r16
     a74:	1f 93       	push	r17
     a76:	7b 01       	movw	r14, r22
     a78:	8c 01       	movw	r16, r24
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	e8 16       	cp	r14, r24
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	f8 06       	cpc	r15, r24
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	08 07       	cpc	r16, r24
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	18 07       	cpc	r17, r24
     a8a:	88 f4       	brcc	.+34     	; 0xaae <__clzsi2+0x40>
     a8c:	8f ef       	ldi	r24, 0xFF	; 255
     a8e:	e8 16       	cp	r14, r24
     a90:	f1 04       	cpc	r15, r1
     a92:	01 05       	cpc	r16, r1
     a94:	11 05       	cpc	r17, r1
     a96:	31 f0       	breq	.+12     	; 0xaa4 <__clzsi2+0x36>
     a98:	28 f0       	brcs	.+10     	; 0xaa4 <__clzsi2+0x36>
     a9a:	88 e0       	ldi	r24, 0x08	; 8
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	a0 e0       	ldi	r26, 0x00	; 0
     aa0:	b0 e0       	ldi	r27, 0x00	; 0
     aa2:	17 c0       	rjmp	.+46     	; 0xad2 <__clzsi2+0x64>
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	a0 e0       	ldi	r26, 0x00	; 0
     aaa:	b0 e0       	ldi	r27, 0x00	; 0
     aac:	12 c0       	rjmp	.+36     	; 0xad2 <__clzsi2+0x64>
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	e8 16       	cp	r14, r24
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	f8 06       	cpc	r15, r24
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	08 07       	cpc	r16, r24
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	18 07       	cpc	r17, r24
     abe:	28 f0       	brcs	.+10     	; 0xaca <__clzsi2+0x5c>
     ac0:	88 e1       	ldi	r24, 0x18	; 24
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	a0 e0       	ldi	r26, 0x00	; 0
     ac6:	b0 e0       	ldi	r27, 0x00	; 0
     ac8:	04 c0       	rjmp	.+8      	; 0xad2 <__clzsi2+0x64>
     aca:	80 e1       	ldi	r24, 0x10	; 16
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	a0 e0       	ldi	r26, 0x00	; 0
     ad0:	b0 e0       	ldi	r27, 0x00	; 0
     ad2:	20 e2       	ldi	r18, 0x20	; 32
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	40 e0       	ldi	r20, 0x00	; 0
     ad8:	50 e0       	ldi	r21, 0x00	; 0
     ada:	28 1b       	sub	r18, r24
     adc:	39 0b       	sbc	r19, r25
     ade:	4a 0b       	sbc	r20, r26
     ae0:	5b 0b       	sbc	r21, r27
     ae2:	04 c0       	rjmp	.+8      	; 0xaec <__clzsi2+0x7e>
     ae4:	16 95       	lsr	r17
     ae6:	07 95       	ror	r16
     ae8:	f7 94       	ror	r15
     aea:	e7 94       	ror	r14
     aec:	8a 95       	dec	r24
     aee:	d2 f7       	brpl	.-12     	; 0xae4 <__clzsi2+0x76>
     af0:	f7 01       	movw	r30, r14
     af2:	e4 57       	subi	r30, 0x74	; 116
     af4:	ff 4f       	sbci	r31, 0xFF	; 255
     af6:	80 81       	ld	r24, Z
     af8:	28 1b       	sub	r18, r24
     afa:	31 09       	sbc	r19, r1
     afc:	41 09       	sbc	r20, r1
     afe:	51 09       	sbc	r21, r1
     b00:	c9 01       	movw	r24, r18
     b02:	1f 91       	pop	r17
     b04:	0f 91       	pop	r16
     b06:	ff 90       	pop	r15
     b08:	ef 90       	pop	r14
     b0a:	08 95       	ret

00000b0c <__pack_f>:
     b0c:	df 92       	push	r13
     b0e:	ef 92       	push	r14
     b10:	ff 92       	push	r15
     b12:	0f 93       	push	r16
     b14:	1f 93       	push	r17
     b16:	fc 01       	movw	r30, r24
     b18:	e4 80       	ldd	r14, Z+4	; 0x04
     b1a:	f5 80       	ldd	r15, Z+5	; 0x05
     b1c:	06 81       	ldd	r16, Z+6	; 0x06
     b1e:	17 81       	ldd	r17, Z+7	; 0x07
     b20:	d1 80       	ldd	r13, Z+1	; 0x01
     b22:	80 81       	ld	r24, Z
     b24:	82 30       	cpi	r24, 0x02	; 2
     b26:	48 f4       	brcc	.+18     	; 0xb3a <__pack_f+0x2e>
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	a0 e1       	ldi	r26, 0x10	; 16
     b2e:	b0 e0       	ldi	r27, 0x00	; 0
     b30:	e8 2a       	or	r14, r24
     b32:	f9 2a       	or	r15, r25
     b34:	0a 2b       	or	r16, r26
     b36:	1b 2b       	or	r17, r27
     b38:	a5 c0       	rjmp	.+330    	; 0xc84 <__pack_f+0x178>
     b3a:	84 30       	cpi	r24, 0x04	; 4
     b3c:	09 f4       	brne	.+2      	; 0xb40 <__pack_f+0x34>
     b3e:	9f c0       	rjmp	.+318    	; 0xc7e <__pack_f+0x172>
     b40:	82 30       	cpi	r24, 0x02	; 2
     b42:	21 f4       	brne	.+8      	; 0xb4c <__pack_f+0x40>
     b44:	ee 24       	eor	r14, r14
     b46:	ff 24       	eor	r15, r15
     b48:	87 01       	movw	r16, r14
     b4a:	05 c0       	rjmp	.+10     	; 0xb56 <__pack_f+0x4a>
     b4c:	e1 14       	cp	r14, r1
     b4e:	f1 04       	cpc	r15, r1
     b50:	01 05       	cpc	r16, r1
     b52:	11 05       	cpc	r17, r1
     b54:	19 f4       	brne	.+6      	; 0xb5c <__pack_f+0x50>
     b56:	e0 e0       	ldi	r30, 0x00	; 0
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	96 c0       	rjmp	.+300    	; 0xc88 <__pack_f+0x17c>
     b5c:	62 81       	ldd	r22, Z+2	; 0x02
     b5e:	73 81       	ldd	r23, Z+3	; 0x03
     b60:	9f ef       	ldi	r25, 0xFF	; 255
     b62:	62 38       	cpi	r22, 0x82	; 130
     b64:	79 07       	cpc	r23, r25
     b66:	0c f0       	brlt	.+2      	; 0xb6a <__pack_f+0x5e>
     b68:	5b c0       	rjmp	.+182    	; 0xc20 <__pack_f+0x114>
     b6a:	22 e8       	ldi	r18, 0x82	; 130
     b6c:	3f ef       	ldi	r19, 0xFF	; 255
     b6e:	26 1b       	sub	r18, r22
     b70:	37 0b       	sbc	r19, r23
     b72:	2a 31       	cpi	r18, 0x1A	; 26
     b74:	31 05       	cpc	r19, r1
     b76:	2c f0       	brlt	.+10     	; 0xb82 <__pack_f+0x76>
     b78:	20 e0       	ldi	r18, 0x00	; 0
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	40 e0       	ldi	r20, 0x00	; 0
     b7e:	50 e0       	ldi	r21, 0x00	; 0
     b80:	2a c0       	rjmp	.+84     	; 0xbd6 <__pack_f+0xca>
     b82:	b8 01       	movw	r22, r16
     b84:	a7 01       	movw	r20, r14
     b86:	02 2e       	mov	r0, r18
     b88:	04 c0       	rjmp	.+8      	; 0xb92 <__pack_f+0x86>
     b8a:	76 95       	lsr	r23
     b8c:	67 95       	ror	r22
     b8e:	57 95       	ror	r21
     b90:	47 95       	ror	r20
     b92:	0a 94       	dec	r0
     b94:	d2 f7       	brpl	.-12     	; 0xb8a <__pack_f+0x7e>
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	04 c0       	rjmp	.+8      	; 0xba8 <__pack_f+0x9c>
     ba0:	88 0f       	add	r24, r24
     ba2:	99 1f       	adc	r25, r25
     ba4:	aa 1f       	adc	r26, r26
     ba6:	bb 1f       	adc	r27, r27
     ba8:	2a 95       	dec	r18
     baa:	d2 f7       	brpl	.-12     	; 0xba0 <__pack_f+0x94>
     bac:	01 97       	sbiw	r24, 0x01	; 1
     bae:	a1 09       	sbc	r26, r1
     bb0:	b1 09       	sbc	r27, r1
     bb2:	8e 21       	and	r24, r14
     bb4:	9f 21       	and	r25, r15
     bb6:	a0 23       	and	r26, r16
     bb8:	b1 23       	and	r27, r17
     bba:	00 97       	sbiw	r24, 0x00	; 0
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	21 f0       	breq	.+8      	; 0xbca <__pack_f+0xbe>
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	a0 e0       	ldi	r26, 0x00	; 0
     bc8:	b0 e0       	ldi	r27, 0x00	; 0
     bca:	9a 01       	movw	r18, r20
     bcc:	ab 01       	movw	r20, r22
     bce:	28 2b       	or	r18, r24
     bd0:	39 2b       	or	r19, r25
     bd2:	4a 2b       	or	r20, r26
     bd4:	5b 2b       	or	r21, r27
     bd6:	da 01       	movw	r26, r20
     bd8:	c9 01       	movw	r24, r18
     bda:	8f 77       	andi	r24, 0x7F	; 127
     bdc:	90 70       	andi	r25, 0x00	; 0
     bde:	a0 70       	andi	r26, 0x00	; 0
     be0:	b0 70       	andi	r27, 0x00	; 0
     be2:	80 34       	cpi	r24, 0x40	; 64
     be4:	91 05       	cpc	r25, r1
     be6:	a1 05       	cpc	r26, r1
     be8:	b1 05       	cpc	r27, r1
     bea:	39 f4       	brne	.+14     	; 0xbfa <__pack_f+0xee>
     bec:	27 ff       	sbrs	r18, 7
     bee:	09 c0       	rjmp	.+18     	; 0xc02 <__pack_f+0xf6>
     bf0:	20 5c       	subi	r18, 0xC0	; 192
     bf2:	3f 4f       	sbci	r19, 0xFF	; 255
     bf4:	4f 4f       	sbci	r20, 0xFF	; 255
     bf6:	5f 4f       	sbci	r21, 0xFF	; 255
     bf8:	04 c0       	rjmp	.+8      	; 0xc02 <__pack_f+0xf6>
     bfa:	21 5c       	subi	r18, 0xC1	; 193
     bfc:	3f 4f       	sbci	r19, 0xFF	; 255
     bfe:	4f 4f       	sbci	r20, 0xFF	; 255
     c00:	5f 4f       	sbci	r21, 0xFF	; 255
     c02:	e0 e0       	ldi	r30, 0x00	; 0
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	20 30       	cpi	r18, 0x00	; 0
     c08:	a0 e0       	ldi	r26, 0x00	; 0
     c0a:	3a 07       	cpc	r19, r26
     c0c:	a0 e0       	ldi	r26, 0x00	; 0
     c0e:	4a 07       	cpc	r20, r26
     c10:	a0 e4       	ldi	r26, 0x40	; 64
     c12:	5a 07       	cpc	r21, r26
     c14:	10 f0       	brcs	.+4      	; 0xc1a <__pack_f+0x10e>
     c16:	e1 e0       	ldi	r30, 0x01	; 1
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	79 01       	movw	r14, r18
     c1c:	8a 01       	movw	r16, r20
     c1e:	27 c0       	rjmp	.+78     	; 0xc6e <__pack_f+0x162>
     c20:	60 38       	cpi	r22, 0x80	; 128
     c22:	71 05       	cpc	r23, r1
     c24:	64 f5       	brge	.+88     	; 0xc7e <__pack_f+0x172>
     c26:	fb 01       	movw	r30, r22
     c28:	e1 58       	subi	r30, 0x81	; 129
     c2a:	ff 4f       	sbci	r31, 0xFF	; 255
     c2c:	d8 01       	movw	r26, r16
     c2e:	c7 01       	movw	r24, r14
     c30:	8f 77       	andi	r24, 0x7F	; 127
     c32:	90 70       	andi	r25, 0x00	; 0
     c34:	a0 70       	andi	r26, 0x00	; 0
     c36:	b0 70       	andi	r27, 0x00	; 0
     c38:	80 34       	cpi	r24, 0x40	; 64
     c3a:	91 05       	cpc	r25, r1
     c3c:	a1 05       	cpc	r26, r1
     c3e:	b1 05       	cpc	r27, r1
     c40:	39 f4       	brne	.+14     	; 0xc50 <__pack_f+0x144>
     c42:	e7 fe       	sbrs	r14, 7
     c44:	0d c0       	rjmp	.+26     	; 0xc60 <__pack_f+0x154>
     c46:	80 e4       	ldi	r24, 0x40	; 64
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	a0 e0       	ldi	r26, 0x00	; 0
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	04 c0       	rjmp	.+8      	; 0xc58 <__pack_f+0x14c>
     c50:	8f e3       	ldi	r24, 0x3F	; 63
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	a0 e0       	ldi	r26, 0x00	; 0
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	e8 0e       	add	r14, r24
     c5a:	f9 1e       	adc	r15, r25
     c5c:	0a 1f       	adc	r16, r26
     c5e:	1b 1f       	adc	r17, r27
     c60:	17 ff       	sbrs	r17, 7
     c62:	05 c0       	rjmp	.+10     	; 0xc6e <__pack_f+0x162>
     c64:	16 95       	lsr	r17
     c66:	07 95       	ror	r16
     c68:	f7 94       	ror	r15
     c6a:	e7 94       	ror	r14
     c6c:	31 96       	adiw	r30, 0x01	; 1
     c6e:	87 e0       	ldi	r24, 0x07	; 7
     c70:	16 95       	lsr	r17
     c72:	07 95       	ror	r16
     c74:	f7 94       	ror	r15
     c76:	e7 94       	ror	r14
     c78:	8a 95       	dec	r24
     c7a:	d1 f7       	brne	.-12     	; 0xc70 <__pack_f+0x164>
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__pack_f+0x17c>
     c7e:	ee 24       	eor	r14, r14
     c80:	ff 24       	eor	r15, r15
     c82:	87 01       	movw	r16, r14
     c84:	ef ef       	ldi	r30, 0xFF	; 255
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	6e 2f       	mov	r22, r30
     c8a:	67 95       	ror	r22
     c8c:	66 27       	eor	r22, r22
     c8e:	67 95       	ror	r22
     c90:	90 2f       	mov	r25, r16
     c92:	9f 77       	andi	r25, 0x7F	; 127
     c94:	d7 94       	ror	r13
     c96:	dd 24       	eor	r13, r13
     c98:	d7 94       	ror	r13
     c9a:	8e 2f       	mov	r24, r30
     c9c:	86 95       	lsr	r24
     c9e:	49 2f       	mov	r20, r25
     ca0:	46 2b       	or	r20, r22
     ca2:	58 2f       	mov	r21, r24
     ca4:	5d 29       	or	r21, r13
     ca6:	b7 01       	movw	r22, r14
     ca8:	ca 01       	movw	r24, r20
     caa:	1f 91       	pop	r17
     cac:	0f 91       	pop	r16
     cae:	ff 90       	pop	r15
     cb0:	ef 90       	pop	r14
     cb2:	df 90       	pop	r13
     cb4:	08 95       	ret

00000cb6 <__unpack_f>:
     cb6:	fc 01       	movw	r30, r24
     cb8:	db 01       	movw	r26, r22
     cba:	40 81       	ld	r20, Z
     cbc:	51 81       	ldd	r21, Z+1	; 0x01
     cbe:	22 81       	ldd	r18, Z+2	; 0x02
     cc0:	62 2f       	mov	r22, r18
     cc2:	6f 77       	andi	r22, 0x7F	; 127
     cc4:	70 e0       	ldi	r23, 0x00	; 0
     cc6:	22 1f       	adc	r18, r18
     cc8:	22 27       	eor	r18, r18
     cca:	22 1f       	adc	r18, r18
     ccc:	93 81       	ldd	r25, Z+3	; 0x03
     cce:	89 2f       	mov	r24, r25
     cd0:	88 0f       	add	r24, r24
     cd2:	82 2b       	or	r24, r18
     cd4:	28 2f       	mov	r18, r24
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	99 1f       	adc	r25, r25
     cda:	99 27       	eor	r25, r25
     cdc:	99 1f       	adc	r25, r25
     cde:	11 96       	adiw	r26, 0x01	; 1
     ce0:	9c 93       	st	X, r25
     ce2:	11 97       	sbiw	r26, 0x01	; 1
     ce4:	21 15       	cp	r18, r1
     ce6:	31 05       	cpc	r19, r1
     ce8:	a9 f5       	brne	.+106    	; 0xd54 <__unpack_f+0x9e>
     cea:	41 15       	cp	r20, r1
     cec:	51 05       	cpc	r21, r1
     cee:	61 05       	cpc	r22, r1
     cf0:	71 05       	cpc	r23, r1
     cf2:	11 f4       	brne	.+4      	; 0xcf8 <__unpack_f+0x42>
     cf4:	82 e0       	ldi	r24, 0x02	; 2
     cf6:	37 c0       	rjmp	.+110    	; 0xd66 <__unpack_f+0xb0>
     cf8:	82 e8       	ldi	r24, 0x82	; 130
     cfa:	9f ef       	ldi	r25, 0xFF	; 255
     cfc:	13 96       	adiw	r26, 0x03	; 3
     cfe:	9c 93       	st	X, r25
     d00:	8e 93       	st	-X, r24
     d02:	12 97       	sbiw	r26, 0x02	; 2
     d04:	9a 01       	movw	r18, r20
     d06:	ab 01       	movw	r20, r22
     d08:	67 e0       	ldi	r22, 0x07	; 7
     d0a:	22 0f       	add	r18, r18
     d0c:	33 1f       	adc	r19, r19
     d0e:	44 1f       	adc	r20, r20
     d10:	55 1f       	adc	r21, r21
     d12:	6a 95       	dec	r22
     d14:	d1 f7       	brne	.-12     	; 0xd0a <__unpack_f+0x54>
     d16:	83 e0       	ldi	r24, 0x03	; 3
     d18:	8c 93       	st	X, r24
     d1a:	0d c0       	rjmp	.+26     	; 0xd36 <__unpack_f+0x80>
     d1c:	22 0f       	add	r18, r18
     d1e:	33 1f       	adc	r19, r19
     d20:	44 1f       	adc	r20, r20
     d22:	55 1f       	adc	r21, r21
     d24:	12 96       	adiw	r26, 0x02	; 2
     d26:	8d 91       	ld	r24, X+
     d28:	9c 91       	ld	r25, X
     d2a:	13 97       	sbiw	r26, 0x03	; 3
     d2c:	01 97       	sbiw	r24, 0x01	; 1
     d2e:	13 96       	adiw	r26, 0x03	; 3
     d30:	9c 93       	st	X, r25
     d32:	8e 93       	st	-X, r24
     d34:	12 97       	sbiw	r26, 0x02	; 2
     d36:	20 30       	cpi	r18, 0x00	; 0
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	38 07       	cpc	r19, r24
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	48 07       	cpc	r20, r24
     d40:	80 e4       	ldi	r24, 0x40	; 64
     d42:	58 07       	cpc	r21, r24
     d44:	58 f3       	brcs	.-42     	; 0xd1c <__unpack_f+0x66>
     d46:	14 96       	adiw	r26, 0x04	; 4
     d48:	2d 93       	st	X+, r18
     d4a:	3d 93       	st	X+, r19
     d4c:	4d 93       	st	X+, r20
     d4e:	5c 93       	st	X, r21
     d50:	17 97       	sbiw	r26, 0x07	; 7
     d52:	08 95       	ret
     d54:	2f 3f       	cpi	r18, 0xFF	; 255
     d56:	31 05       	cpc	r19, r1
     d58:	79 f4       	brne	.+30     	; 0xd78 <__unpack_f+0xc2>
     d5a:	41 15       	cp	r20, r1
     d5c:	51 05       	cpc	r21, r1
     d5e:	61 05       	cpc	r22, r1
     d60:	71 05       	cpc	r23, r1
     d62:	19 f4       	brne	.+6      	; 0xd6a <__unpack_f+0xb4>
     d64:	84 e0       	ldi	r24, 0x04	; 4
     d66:	8c 93       	st	X, r24
     d68:	08 95       	ret
     d6a:	64 ff       	sbrs	r22, 4
     d6c:	03 c0       	rjmp	.+6      	; 0xd74 <__unpack_f+0xbe>
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	8c 93       	st	X, r24
     d72:	12 c0       	rjmp	.+36     	; 0xd98 <__unpack_f+0xe2>
     d74:	1c 92       	st	X, r1
     d76:	10 c0       	rjmp	.+32     	; 0xd98 <__unpack_f+0xe2>
     d78:	2f 57       	subi	r18, 0x7F	; 127
     d7a:	30 40       	sbci	r19, 0x00	; 0
     d7c:	13 96       	adiw	r26, 0x03	; 3
     d7e:	3c 93       	st	X, r19
     d80:	2e 93       	st	-X, r18
     d82:	12 97       	sbiw	r26, 0x02	; 2
     d84:	83 e0       	ldi	r24, 0x03	; 3
     d86:	8c 93       	st	X, r24
     d88:	87 e0       	ldi	r24, 0x07	; 7
     d8a:	44 0f       	add	r20, r20
     d8c:	55 1f       	adc	r21, r21
     d8e:	66 1f       	adc	r22, r22
     d90:	77 1f       	adc	r23, r23
     d92:	8a 95       	dec	r24
     d94:	d1 f7       	brne	.-12     	; 0xd8a <__unpack_f+0xd4>
     d96:	70 64       	ori	r23, 0x40	; 64
     d98:	14 96       	adiw	r26, 0x04	; 4
     d9a:	4d 93       	st	X+, r20
     d9c:	5d 93       	st	X+, r21
     d9e:	6d 93       	st	X+, r22
     da0:	7c 93       	st	X, r23
     da2:	17 97       	sbiw	r26, 0x07	; 7
     da4:	08 95       	ret

00000da6 <__fpcmp_parts_f>:
     da6:	1f 93       	push	r17
     da8:	dc 01       	movw	r26, r24
     daa:	fb 01       	movw	r30, r22
     dac:	9c 91       	ld	r25, X
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	08 f4       	brcc	.+2      	; 0xdb4 <__fpcmp_parts_f+0xe>
     db2:	47 c0       	rjmp	.+142    	; 0xe42 <__fpcmp_parts_f+0x9c>
     db4:	80 81       	ld	r24, Z
     db6:	82 30       	cpi	r24, 0x02	; 2
     db8:	08 f4       	brcc	.+2      	; 0xdbc <__fpcmp_parts_f+0x16>
     dba:	43 c0       	rjmp	.+134    	; 0xe42 <__fpcmp_parts_f+0x9c>
     dbc:	94 30       	cpi	r25, 0x04	; 4
     dbe:	51 f4       	brne	.+20     	; 0xdd4 <__fpcmp_parts_f+0x2e>
     dc0:	11 96       	adiw	r26, 0x01	; 1
     dc2:	1c 91       	ld	r17, X
     dc4:	84 30       	cpi	r24, 0x04	; 4
     dc6:	99 f5       	brne	.+102    	; 0xe2e <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	68 2f       	mov	r22, r24
     dcc:	70 e0       	ldi	r23, 0x00	; 0
     dce:	61 1b       	sub	r22, r17
     dd0:	71 09       	sbc	r23, r1
     dd2:	3f c0       	rjmp	.+126    	; 0xe52 <__fpcmp_parts_f+0xac>
     dd4:	84 30       	cpi	r24, 0x04	; 4
     dd6:	21 f0       	breq	.+8      	; 0xde0 <__fpcmp_parts_f+0x3a>
     dd8:	92 30       	cpi	r25, 0x02	; 2
     dda:	31 f4       	brne	.+12     	; 0xde8 <__fpcmp_parts_f+0x42>
     ddc:	82 30       	cpi	r24, 0x02	; 2
     dde:	b9 f1       	breq	.+110    	; 0xe4e <__fpcmp_parts_f+0xa8>
     de0:	81 81       	ldd	r24, Z+1	; 0x01
     de2:	88 23       	and	r24, r24
     de4:	89 f1       	breq	.+98     	; 0xe48 <__fpcmp_parts_f+0xa2>
     de6:	2d c0       	rjmp	.+90     	; 0xe42 <__fpcmp_parts_f+0x9c>
     de8:	11 96       	adiw	r26, 0x01	; 1
     dea:	1c 91       	ld	r17, X
     dec:	11 97       	sbiw	r26, 0x01	; 1
     dee:	82 30       	cpi	r24, 0x02	; 2
     df0:	f1 f0       	breq	.+60     	; 0xe2e <__fpcmp_parts_f+0x88>
     df2:	81 81       	ldd	r24, Z+1	; 0x01
     df4:	18 17       	cp	r17, r24
     df6:	d9 f4       	brne	.+54     	; 0xe2e <__fpcmp_parts_f+0x88>
     df8:	12 96       	adiw	r26, 0x02	; 2
     dfa:	2d 91       	ld	r18, X+
     dfc:	3c 91       	ld	r19, X
     dfe:	13 97       	sbiw	r26, 0x03	; 3
     e00:	82 81       	ldd	r24, Z+2	; 0x02
     e02:	93 81       	ldd	r25, Z+3	; 0x03
     e04:	82 17       	cp	r24, r18
     e06:	93 07       	cpc	r25, r19
     e08:	94 f0       	brlt	.+36     	; 0xe2e <__fpcmp_parts_f+0x88>
     e0a:	28 17       	cp	r18, r24
     e0c:	39 07       	cpc	r19, r25
     e0e:	bc f0       	brlt	.+46     	; 0xe3e <__fpcmp_parts_f+0x98>
     e10:	14 96       	adiw	r26, 0x04	; 4
     e12:	8d 91       	ld	r24, X+
     e14:	9d 91       	ld	r25, X+
     e16:	0d 90       	ld	r0, X+
     e18:	bc 91       	ld	r27, X
     e1a:	a0 2d       	mov	r26, r0
     e1c:	24 81       	ldd	r18, Z+4	; 0x04
     e1e:	35 81       	ldd	r19, Z+5	; 0x05
     e20:	46 81       	ldd	r20, Z+6	; 0x06
     e22:	57 81       	ldd	r21, Z+7	; 0x07
     e24:	28 17       	cp	r18, r24
     e26:	39 07       	cpc	r19, r25
     e28:	4a 07       	cpc	r20, r26
     e2a:	5b 07       	cpc	r21, r27
     e2c:	18 f4       	brcc	.+6      	; 0xe34 <__fpcmp_parts_f+0x8e>
     e2e:	11 23       	and	r17, r17
     e30:	41 f0       	breq	.+16     	; 0xe42 <__fpcmp_parts_f+0x9c>
     e32:	0a c0       	rjmp	.+20     	; 0xe48 <__fpcmp_parts_f+0xa2>
     e34:	82 17       	cp	r24, r18
     e36:	93 07       	cpc	r25, r19
     e38:	a4 07       	cpc	r26, r20
     e3a:	b5 07       	cpc	r27, r21
     e3c:	40 f4       	brcc	.+16     	; 0xe4e <__fpcmp_parts_f+0xa8>
     e3e:	11 23       	and	r17, r17
     e40:	19 f0       	breq	.+6      	; 0xe48 <__fpcmp_parts_f+0xa2>
     e42:	61 e0       	ldi	r22, 0x01	; 1
     e44:	70 e0       	ldi	r23, 0x00	; 0
     e46:	05 c0       	rjmp	.+10     	; 0xe52 <__fpcmp_parts_f+0xac>
     e48:	6f ef       	ldi	r22, 0xFF	; 255
     e4a:	7f ef       	ldi	r23, 0xFF	; 255
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <__fpcmp_parts_f+0xac>
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	70 e0       	ldi	r23, 0x00	; 0
     e52:	cb 01       	movw	r24, r22
     e54:	1f 91       	pop	r17
     e56:	08 95       	ret

00000e58 <DIO_enu_Intiat>:
#include "DIO_Private.h"
#include "DIO_Config.h"


ES_t DIO_enu_Intiat(void)
{
     e58:	df 93       	push	r29
     e5a:	cf 93       	push	r28
     e5c:	0f 92       	push	r0
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62
	ES_t local_error_state = ES_NOK;
     e62:	19 82       	std	Y+1, r1	; 0x01
	DDRA = CONC(PA_PIN7_DIR,PA_PIN6_DIR,PA_PIN5_DIR,PA_PIN4_DIR,PA_PIN3_DIR,PA_PIN2_DIR,PA_PIN1_DIR,PA_PIN0_DIR);
     e64:	ea e3       	ldi	r30, 0x3A	; 58
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	10 82       	st	Z, r1
	DDRB = CONC(PB_PIN7_DIR,PB_PIN6_DIR,PB_PIN5_DIR,PB_PIN4_DIR,PB_PIN3_DIR,PB_PIN2_DIR,PB_PIN1_DIR,PB_PIN0_DIR);
     e6a:	e7 e3       	ldi	r30, 0x37	; 55
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	8f ef       	ldi	r24, 0xFF	; 255
     e70:	80 83       	st	Z, r24
	DDRC = CONC(PC_PIN7_DIR,PC_PIN6_DIR,PC_PIN5_DIR,PC_PIN4_DIR,PC_PIN3_DIR,PC_PIN2_DIR,PC_PIN1_DIR,PC_PIN0_DIR);
     e72:	e4 e3       	ldi	r30, 0x34	; 52
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	8f ef       	ldi	r24, 0xFF	; 255
     e78:	80 83       	st	Z, r24
	DDRD = CONC(PD_PIN7_DIR,PD_PIN6_DIR,PD_PIN5_DIR,PD_PIN4_DIR,PD_PIN3_DIR,PD_PIN2_DIR,PD_PIN1_DIR,PD_PIN0_DIR);
     e7a:	e1 e3       	ldi	r30, 0x31	; 49
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	8f ef       	ldi	r24, 0xFF	; 255
     e80:	80 83       	st	Z, r24

	PORTA = CONC(PA_PIN7_VALUE,PA_PIN6_VALUE,PA_PIN5_VALUE,PA_PIN4_VALUE,PA_PIN3_VALUE,PA_PIN2_VALUE,PA_PIN1_VALUE,PA_PIN0_VALUE);
     e82:	eb e3       	ldi	r30, 0x3B	; 59
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	8f ef       	ldi	r24, 0xFF	; 255
     e88:	80 83       	st	Z, r24
	PORTB = CONC(PB_PIN7_VALUE,PB_PIN6_VALUE,PB_PIN5_VALUE,PB_PIN4_VALUE,PB_PIN3_VALUE,PB_PIN2_VALUE,PB_PIN1_VALUE,PB_PIN0_VALUE);
     e8a:	e8 e3       	ldi	r30, 0x38	; 56
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	8f ef       	ldi	r24, 0xFF	; 255
     e90:	80 83       	st	Z, r24
	PORTC = CONC(PC_PIN7_VALUE,PC_PIN6_VALUE,PC_PIN5_VALUE,PC_PIN4_VALUE,PC_PIN3_VALUE,PC_PIN2_VALUE,PC_PIN1_VALUE,PC_PIN0_VALUE);
     e92:	e5 e3       	ldi	r30, 0x35	; 53
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	89 e3       	ldi	r24, 0x39	; 57
     e98:	80 83       	st	Z, r24
	PORTA = CONC(PD_PIN7_VALUE,PD_PIN6_VALUE,PD_PIN5_VALUE,PD_PIN4_VALUE,PD_PIN3_VALUE,PD_PIN2_VALUE,PD_PIN1_VALUE,PD_PIN0_VALUE);
     e9a:	eb e3       	ldi	r30, 0x3B	; 59
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	8d e1       	ldi	r24, 0x1D	; 29
     ea0:	80 83       	st	Z, r24

	local_error_state = ES_OK;
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	89 83       	std	Y+1, r24	; 0x01
	return local_error_state;
     ea6:	89 81       	ldd	r24, Y+1	; 0x01

}
     ea8:	0f 90       	pop	r0
     eaa:	cf 91       	pop	r28
     eac:	df 91       	pop	r29
     eae:	08 95       	ret

00000eb0 <DIO_enu_Set_Port_Dir>:




ES_t DIO_enu_Set_Port_Dir(u8 Copy_Port_id, u8 Copy_value)
{
     eb0:	df 93       	push	r29
     eb2:	cf 93       	push	r28
     eb4:	00 d0       	rcall	.+0      	; 0xeb6 <DIO_enu_Set_Port_Dir+0x6>
     eb6:	00 d0       	rcall	.+0      	; 0xeb8 <DIO_enu_Set_Port_Dir+0x8>
     eb8:	0f 92       	push	r0
     eba:	cd b7       	in	r28, 0x3d	; 61
     ebc:	de b7       	in	r29, 0x3e	; 62
     ebe:	8a 83       	std	Y+2, r24	; 0x02
     ec0:	6b 83       	std	Y+3, r22	; 0x03
	ES_t local_error_state = ES_NOK;
     ec2:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_Port_id <= DIO_PORTD)
     ec4:	8a 81       	ldd	r24, Y+2	; 0x02
     ec6:	84 30       	cpi	r24, 0x04	; 4
     ec8:	a8 f5       	brcc	.+106    	; 0xf34 <DIO_enu_Set_Port_Dir+0x84>
	{
		switch(Copy_Port_id)
     eca:	8a 81       	ldd	r24, Y+2	; 0x02
     ecc:	28 2f       	mov	r18, r24
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	3d 83       	std	Y+5, r19	; 0x05
     ed2:	2c 83       	std	Y+4, r18	; 0x04
     ed4:	8c 81       	ldd	r24, Y+4	; 0x04
     ed6:	9d 81       	ldd	r25, Y+5	; 0x05
     ed8:	81 30       	cpi	r24, 0x01	; 1
     eda:	91 05       	cpc	r25, r1
     edc:	d1 f0       	breq	.+52     	; 0xf12 <DIO_enu_Set_Port_Dir+0x62>
     ede:	2c 81       	ldd	r18, Y+4	; 0x04
     ee0:	3d 81       	ldd	r19, Y+5	; 0x05
     ee2:	22 30       	cpi	r18, 0x02	; 2
     ee4:	31 05       	cpc	r19, r1
     ee6:	2c f4       	brge	.+10     	; 0xef2 <DIO_enu_Set_Port_Dir+0x42>
     ee8:	8c 81       	ldd	r24, Y+4	; 0x04
     eea:	9d 81       	ldd	r25, Y+5	; 0x05
     eec:	00 97       	sbiw	r24, 0x00	; 0
     eee:	61 f0       	breq	.+24     	; 0xf08 <DIO_enu_Set_Port_Dir+0x58>
     ef0:	1e c0       	rjmp	.+60     	; 0xf2e <DIO_enu_Set_Port_Dir+0x7e>
     ef2:	2c 81       	ldd	r18, Y+4	; 0x04
     ef4:	3d 81       	ldd	r19, Y+5	; 0x05
     ef6:	22 30       	cpi	r18, 0x02	; 2
     ef8:	31 05       	cpc	r19, r1
     efa:	81 f0       	breq	.+32     	; 0xf1c <DIO_enu_Set_Port_Dir+0x6c>
     efc:	8c 81       	ldd	r24, Y+4	; 0x04
     efe:	9d 81       	ldd	r25, Y+5	; 0x05
     f00:	83 30       	cpi	r24, 0x03	; 3
     f02:	91 05       	cpc	r25, r1
     f04:	81 f0       	breq	.+32     	; 0xf26 <DIO_enu_Set_Port_Dir+0x76>
     f06:	13 c0       	rjmp	.+38     	; 0xf2e <DIO_enu_Set_Port_Dir+0x7e>
		{
		case DIO_PORTA:
			DDRA = Copy_value;
     f08:	ea e3       	ldi	r30, 0x3A	; 58
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	8b 81       	ldd	r24, Y+3	; 0x03
     f0e:	80 83       	st	Z, r24
     f10:	0e c0       	rjmp	.+28     	; 0xf2e <DIO_enu_Set_Port_Dir+0x7e>
			break;
		case DIO_PORTB:
			DDRB = Copy_value;
     f12:	e7 e3       	ldi	r30, 0x37	; 55
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	8b 81       	ldd	r24, Y+3	; 0x03
     f18:	80 83       	st	Z, r24
     f1a:	09 c0       	rjmp	.+18     	; 0xf2e <DIO_enu_Set_Port_Dir+0x7e>
			break;
		case DIO_PORTC:
			DDRC = Copy_value;
     f1c:	e4 e3       	ldi	r30, 0x34	; 52
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	8b 81       	ldd	r24, Y+3	; 0x03
     f22:	80 83       	st	Z, r24
     f24:	04 c0       	rjmp	.+8      	; 0xf2e <DIO_enu_Set_Port_Dir+0x7e>
			break;
		case DIO_PORTD:
			DDRD = Copy_value;
     f26:	e1 e3       	ldi	r30, 0x31	; 49
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	8b 81       	ldd	r24, Y+3	; 0x03
     f2c:	80 83       	st	Z, r24
			break;
		}
		local_error_state = ES_OK;
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	89 83       	std	Y+1, r24	; 0x01
     f32:	02 c0       	rjmp	.+4      	; 0xf38 <DIO_enu_Set_Port_Dir+0x88>
	}
	else
	{
		local_error_state = OUT_OF_RANGE;
     f34:	83 e0       	ldi	r24, 0x03	; 3
     f36:	89 83       	std	Y+1, r24	; 0x01
	}

	return local_error_state;
     f38:	89 81       	ldd	r24, Y+1	; 0x01
}
     f3a:	0f 90       	pop	r0
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
     f40:	0f 90       	pop	r0
     f42:	0f 90       	pop	r0
     f44:	cf 91       	pop	r28
     f46:	df 91       	pop	r29
     f48:	08 95       	ret

00000f4a <DIO_enu_Set_Port_Value>:



ES_t DIO_enu_Set_Port_Value(u8 Copy_Port_id, u8 Copy_value)
{
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	00 d0       	rcall	.+0      	; 0xf50 <DIO_enu_Set_Port_Value+0x6>
     f50:	00 d0       	rcall	.+0      	; 0xf52 <DIO_enu_Set_Port_Value+0x8>
     f52:	0f 92       	push	r0
     f54:	cd b7       	in	r28, 0x3d	; 61
     f56:	de b7       	in	r29, 0x3e	; 62
     f58:	8a 83       	std	Y+2, r24	; 0x02
     f5a:	6b 83       	std	Y+3, r22	; 0x03
	ES_t local_error_state = ES_NOK;
     f5c:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_Port_id <= DIO_PORTD)
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	84 30       	cpi	r24, 0x04	; 4
     f62:	a8 f5       	brcc	.+106    	; 0xfce <DIO_enu_Set_Port_Value+0x84>
	{
		switch (Copy_Port_id)
     f64:	8a 81       	ldd	r24, Y+2	; 0x02
     f66:	28 2f       	mov	r18, r24
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	3d 83       	std	Y+5, r19	; 0x05
     f6c:	2c 83       	std	Y+4, r18	; 0x04
     f6e:	8c 81       	ldd	r24, Y+4	; 0x04
     f70:	9d 81       	ldd	r25, Y+5	; 0x05
     f72:	81 30       	cpi	r24, 0x01	; 1
     f74:	91 05       	cpc	r25, r1
     f76:	d1 f0       	breq	.+52     	; 0xfac <DIO_enu_Set_Port_Value+0x62>
     f78:	2c 81       	ldd	r18, Y+4	; 0x04
     f7a:	3d 81       	ldd	r19, Y+5	; 0x05
     f7c:	22 30       	cpi	r18, 0x02	; 2
     f7e:	31 05       	cpc	r19, r1
     f80:	2c f4       	brge	.+10     	; 0xf8c <DIO_enu_Set_Port_Value+0x42>
     f82:	8c 81       	ldd	r24, Y+4	; 0x04
     f84:	9d 81       	ldd	r25, Y+5	; 0x05
     f86:	00 97       	sbiw	r24, 0x00	; 0
     f88:	61 f0       	breq	.+24     	; 0xfa2 <DIO_enu_Set_Port_Value+0x58>
     f8a:	1e c0       	rjmp	.+60     	; 0xfc8 <DIO_enu_Set_Port_Value+0x7e>
     f8c:	2c 81       	ldd	r18, Y+4	; 0x04
     f8e:	3d 81       	ldd	r19, Y+5	; 0x05
     f90:	22 30       	cpi	r18, 0x02	; 2
     f92:	31 05       	cpc	r19, r1
     f94:	81 f0       	breq	.+32     	; 0xfb6 <DIO_enu_Set_Port_Value+0x6c>
     f96:	8c 81       	ldd	r24, Y+4	; 0x04
     f98:	9d 81       	ldd	r25, Y+5	; 0x05
     f9a:	83 30       	cpi	r24, 0x03	; 3
     f9c:	91 05       	cpc	r25, r1
     f9e:	81 f0       	breq	.+32     	; 0xfc0 <DIO_enu_Set_Port_Value+0x76>
     fa0:	13 c0       	rjmp	.+38     	; 0xfc8 <DIO_enu_Set_Port_Value+0x7e>
		{
		case DIO_PORTA:
			PORTA = Copy_value;
     fa2:	eb e3       	ldi	r30, 0x3B	; 59
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	8b 81       	ldd	r24, Y+3	; 0x03
     fa8:	80 83       	st	Z, r24
     faa:	0e c0       	rjmp	.+28     	; 0xfc8 <DIO_enu_Set_Port_Value+0x7e>
			break;
		case DIO_PORTB:
			PORTB = Copy_value;
     fac:	e8 e3       	ldi	r30, 0x38	; 56
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	8b 81       	ldd	r24, Y+3	; 0x03
     fb2:	80 83       	st	Z, r24
     fb4:	09 c0       	rjmp	.+18     	; 0xfc8 <DIO_enu_Set_Port_Value+0x7e>
			break;
		case DIO_PORTC:
			PORTC = Copy_value;
     fb6:	e5 e3       	ldi	r30, 0x35	; 53
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	8b 81       	ldd	r24, Y+3	; 0x03
     fbc:	80 83       	st	Z, r24
     fbe:	04 c0       	rjmp	.+8      	; 0xfc8 <DIO_enu_Set_Port_Value+0x7e>
			break;
		case DIO_PORTD:
			PORTD = Copy_value;
     fc0:	e2 e3       	ldi	r30, 0x32	; 50
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	8b 81       	ldd	r24, Y+3	; 0x03
     fc6:	80 83       	st	Z, r24
			break;
		}
		local_error_state = ES_OK;
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	89 83       	std	Y+1, r24	; 0x01
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <DIO_enu_Set_Port_Value+0x88>
	}
	else
	{
		local_error_state = OUT_OF_RANGE;
     fce:	83 e0       	ldi	r24, 0x03	; 3
     fd0:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_error_state;
     fd2:	89 81       	ldd	r24, Y+1	; 0x01
}
     fd4:	0f 90       	pop	r0
     fd6:	0f 90       	pop	r0
     fd8:	0f 90       	pop	r0
     fda:	0f 90       	pop	r0
     fdc:	0f 90       	pop	r0
     fde:	cf 91       	pop	r28
     fe0:	df 91       	pop	r29
     fe2:	08 95       	ret

00000fe4 <DIO_enu_Tog_Port_Value>:




ES_t DIO_enu_Tog_Port_Value(u8 Copy_Port_id)
{
     fe4:	df 93       	push	r29
     fe6:	cf 93       	push	r28
     fe8:	00 d0       	rcall	.+0      	; 0xfea <DIO_enu_Tog_Port_Value+0x6>
     fea:	00 d0       	rcall	.+0      	; 0xfec <DIO_enu_Tog_Port_Value+0x8>
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
     ff0:	8a 83       	std	Y+2, r24	; 0x02
	ES_t local_error_state = ES_NOK;
     ff2:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_Port_id <= DIO_PORTD)
     ff4:	8a 81       	ldd	r24, Y+2	; 0x02
     ff6:	84 30       	cpi	r24, 0x04	; 4
     ff8:	08 f0       	brcs	.+2      	; 0xffc <DIO_enu_Tog_Port_Value+0x18>
     ffa:	41 c0       	rjmp	.+130    	; 0x107e <DIO_enu_Tog_Port_Value+0x9a>
	{
		switch (Copy_Port_id)
     ffc:	8a 81       	ldd	r24, Y+2	; 0x02
     ffe:	28 2f       	mov	r18, r24
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	3c 83       	std	Y+4, r19	; 0x04
    1004:	2b 83       	std	Y+3, r18	; 0x03
    1006:	8b 81       	ldd	r24, Y+3	; 0x03
    1008:	9c 81       	ldd	r25, Y+4	; 0x04
    100a:	81 30       	cpi	r24, 0x01	; 1
    100c:	91 05       	cpc	r25, r1
    100e:	e9 f0       	breq	.+58     	; 0x104a <DIO_enu_Tog_Port_Value+0x66>
    1010:	2b 81       	ldd	r18, Y+3	; 0x03
    1012:	3c 81       	ldd	r19, Y+4	; 0x04
    1014:	22 30       	cpi	r18, 0x02	; 2
    1016:	31 05       	cpc	r19, r1
    1018:	2c f4       	brge	.+10     	; 0x1024 <DIO_enu_Tog_Port_Value+0x40>
    101a:	8b 81       	ldd	r24, Y+3	; 0x03
    101c:	9c 81       	ldd	r25, Y+4	; 0x04
    101e:	00 97       	sbiw	r24, 0x00	; 0
    1020:	61 f0       	breq	.+24     	; 0x103a <DIO_enu_Tog_Port_Value+0x56>
    1022:	2a c0       	rjmp	.+84     	; 0x1078 <DIO_enu_Tog_Port_Value+0x94>
    1024:	2b 81       	ldd	r18, Y+3	; 0x03
    1026:	3c 81       	ldd	r19, Y+4	; 0x04
    1028:	22 30       	cpi	r18, 0x02	; 2
    102a:	31 05       	cpc	r19, r1
    102c:	b1 f0       	breq	.+44     	; 0x105a <DIO_enu_Tog_Port_Value+0x76>
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
    1030:	9c 81       	ldd	r25, Y+4	; 0x04
    1032:	83 30       	cpi	r24, 0x03	; 3
    1034:	91 05       	cpc	r25, r1
    1036:	c9 f0       	breq	.+50     	; 0x106a <DIO_enu_Tog_Port_Value+0x86>
    1038:	1f c0       	rjmp	.+62     	; 0x1078 <DIO_enu_Tog_Port_Value+0x94>
		{
		case DIO_PORTA:
			PORTA = ~PORTA;
    103a:	ab e3       	ldi	r26, 0x3B	; 59
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	eb e3       	ldi	r30, 0x3B	; 59
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	80 95       	com	r24
    1046:	8c 93       	st	X, r24
    1048:	17 c0       	rjmp	.+46     	; 0x1078 <DIO_enu_Tog_Port_Value+0x94>
			break;
		case DIO_PORTB:
			PORTB = ~PORTB;
    104a:	a8 e3       	ldi	r26, 0x38	; 56
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	e8 e3       	ldi	r30, 0x38	; 56
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	80 95       	com	r24
    1056:	8c 93       	st	X, r24
    1058:	0f c0       	rjmp	.+30     	; 0x1078 <DIO_enu_Tog_Port_Value+0x94>
			break;
		case DIO_PORTC:
			PORTC = ~PORTC;
    105a:	a5 e3       	ldi	r26, 0x35	; 53
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	e5 e3       	ldi	r30, 0x35	; 53
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	80 95       	com	r24
    1066:	8c 93       	st	X, r24
    1068:	07 c0       	rjmp	.+14     	; 0x1078 <DIO_enu_Tog_Port_Value+0x94>
			break;
		case DIO_PORTD:
			PORTD = ~PORTD;
    106a:	a2 e3       	ldi	r26, 0x32	; 50
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	e2 e3       	ldi	r30, 0x32	; 50
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	80 95       	com	r24
    1076:	8c 93       	st	X, r24
			break;
		}
		local_error_state = ES_OK;
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	89 83       	std	Y+1, r24	; 0x01
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <DIO_enu_Tog_Port_Value+0x9e>
	}
	else
	{
		local_error_state = OUT_OF_RANGE;
    107e:	83 e0       	ldi	r24, 0x03	; 3
    1080:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_error_state;
    1082:	89 81       	ldd	r24, Y+1	; 0x01
}
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	cf 91       	pop	r28
    108e:	df 91       	pop	r29
    1090:	08 95       	ret

00001092 <DIO_enu_Get_Port_Value>:



ES_t DIO_enu_Get_Port_Value(u8 Copy_Port_id, u8 * Copy_value)
 {
    1092:	df 93       	push	r29
    1094:	cf 93       	push	r28
    1096:	00 d0       	rcall	.+0      	; 0x1098 <DIO_enu_Get_Port_Value+0x6>
    1098:	00 d0       	rcall	.+0      	; 0x109a <DIO_enu_Get_Port_Value+0x8>
    109a:	00 d0       	rcall	.+0      	; 0x109c <DIO_enu_Get_Port_Value+0xa>
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62
    10a0:	8a 83       	std	Y+2, r24	; 0x02
    10a2:	7c 83       	std	Y+4, r23	; 0x04
    10a4:	6b 83       	std	Y+3, r22	; 0x03
	ES_t local_error_state = ES_NOK;
    10a6:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_value != NULL)
    10a8:	8b 81       	ldd	r24, Y+3	; 0x03
    10aa:	9c 81       	ldd	r25, Y+4	; 0x04
    10ac:	00 97       	sbiw	r24, 0x00	; 0
    10ae:	09 f4       	brne	.+2      	; 0x10b2 <DIO_enu_Get_Port_Value+0x20>
    10b0:	43 c0       	rjmp	.+134    	; 0x1138 <DIO_enu_Get_Port_Value+0xa6>
	{
		if (Copy_Port_id <= DIO_PORTD)
    10b2:	8a 81       	ldd	r24, Y+2	; 0x02
    10b4:	84 30       	cpi	r24, 0x04	; 4
    10b6:	e8 f5       	brcc	.+122    	; 0x1132 <DIO_enu_Get_Port_Value+0xa0>
		{
			switch (Copy_Port_id)
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	28 2f       	mov	r18, r24
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	3e 83       	std	Y+6, r19	; 0x06
    10c0:	2d 83       	std	Y+5, r18	; 0x05
    10c2:	8d 81       	ldd	r24, Y+5	; 0x05
    10c4:	9e 81       	ldd	r25, Y+6	; 0x06
    10c6:	81 30       	cpi	r24, 0x01	; 1
    10c8:	91 05       	cpc	r25, r1
    10ca:	e1 f0       	breq	.+56     	; 0x1104 <DIO_enu_Get_Port_Value+0x72>
    10cc:	2d 81       	ldd	r18, Y+5	; 0x05
    10ce:	3e 81       	ldd	r19, Y+6	; 0x06
    10d0:	22 30       	cpi	r18, 0x02	; 2
    10d2:	31 05       	cpc	r19, r1
    10d4:	2c f4       	brge	.+10     	; 0x10e0 <DIO_enu_Get_Port_Value+0x4e>
    10d6:	8d 81       	ldd	r24, Y+5	; 0x05
    10d8:	9e 81       	ldd	r25, Y+6	; 0x06
    10da:	00 97       	sbiw	r24, 0x00	; 0
    10dc:	61 f0       	breq	.+24     	; 0x10f6 <DIO_enu_Get_Port_Value+0x64>
    10de:	26 c0       	rjmp	.+76     	; 0x112c <DIO_enu_Get_Port_Value+0x9a>
    10e0:	2d 81       	ldd	r18, Y+5	; 0x05
    10e2:	3e 81       	ldd	r19, Y+6	; 0x06
    10e4:	22 30       	cpi	r18, 0x02	; 2
    10e6:	31 05       	cpc	r19, r1
    10e8:	a1 f0       	breq	.+40     	; 0x1112 <DIO_enu_Get_Port_Value+0x80>
    10ea:	8d 81       	ldd	r24, Y+5	; 0x05
    10ec:	9e 81       	ldd	r25, Y+6	; 0x06
    10ee:	83 30       	cpi	r24, 0x03	; 3
    10f0:	91 05       	cpc	r25, r1
    10f2:	b1 f0       	breq	.+44     	; 0x1120 <DIO_enu_Get_Port_Value+0x8e>
    10f4:	1b c0       	rjmp	.+54     	; 0x112c <DIO_enu_Get_Port_Value+0x9a>
			{
			case DIO_PORTA:
				*Copy_value = PINA;
    10f6:	e9 e3       	ldi	r30, 0x39	; 57
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	eb 81       	ldd	r30, Y+3	; 0x03
    10fe:	fc 81       	ldd	r31, Y+4	; 0x04
    1100:	80 83       	st	Z, r24
    1102:	14 c0       	rjmp	.+40     	; 0x112c <DIO_enu_Get_Port_Value+0x9a>
				break;
			case DIO_PORTB:
				*Copy_value = PINB;
    1104:	e6 e3       	ldi	r30, 0x36	; 54
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	eb 81       	ldd	r30, Y+3	; 0x03
    110c:	fc 81       	ldd	r31, Y+4	; 0x04
    110e:	80 83       	st	Z, r24
    1110:	0d c0       	rjmp	.+26     	; 0x112c <DIO_enu_Get_Port_Value+0x9a>
				break;
			case DIO_PORTC:
				*Copy_value = PINC;
    1112:	e3 e3       	ldi	r30, 0x33	; 51
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	eb 81       	ldd	r30, Y+3	; 0x03
    111a:	fc 81       	ldd	r31, Y+4	; 0x04
    111c:	80 83       	st	Z, r24
    111e:	06 c0       	rjmp	.+12     	; 0x112c <DIO_enu_Get_Port_Value+0x9a>
				break;
			case DIO_PORTD:
				*Copy_value = PIND;
    1120:	e0 e3       	ldi	r30, 0x30	; 48
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	eb 81       	ldd	r30, Y+3	; 0x03
    1128:	fc 81       	ldd	r31, Y+4	; 0x04
    112a:	80 83       	st	Z, r24
				break;
			}
			local_error_state = ES_OK;
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	89 83       	std	Y+1, r24	; 0x01
    1130:	05 c0       	rjmp	.+10     	; 0x113c <DIO_enu_Get_Port_Value+0xaa>
		}
		else
		{
			local_error_state = OUT_OF_RANGE;
    1132:	83 e0       	ldi	r24, 0x03	; 3
    1134:	89 83       	std	Y+1, r24	; 0x01
    1136:	02 c0       	rjmp	.+4      	; 0x113c <DIO_enu_Get_Port_Value+0xaa>
		}
	}
	else
	{
		local_error_state = ES_NULL_POINTER;
    1138:	82 e0       	ldi	r24, 0x02	; 2
    113a:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_error_state;
    113c:	89 81       	ldd	r24, Y+1	; 0x01
}
    113e:	26 96       	adiw	r28, 0x06	; 6
    1140:	0f b6       	in	r0, 0x3f	; 63
    1142:	f8 94       	cli
    1144:	de bf       	out	0x3e, r29	; 62
    1146:	0f be       	out	0x3f, r0	; 63
    1148:	cd bf       	out	0x3d, r28	; 61
    114a:	cf 91       	pop	r28
    114c:	df 91       	pop	r29
    114e:	08 95       	ret

00001150 <DIO_enu_Set_Pin_Dir>:




ES_t DIO_enu_Set_Pin_Dir(u8 Copy_Port_id, u8 Copy_Pin_id, u8 Copy_value)
{
    1150:	df 93       	push	r29
    1152:	cf 93       	push	r28
    1154:	00 d0       	rcall	.+0      	; 0x1156 <DIO_enu_Set_Pin_Dir+0x6>
    1156:	00 d0       	rcall	.+0      	; 0x1158 <DIO_enu_Set_Pin_Dir+0x8>
    1158:	00 d0       	rcall	.+0      	; 0x115a <DIO_enu_Set_Pin_Dir+0xa>
    115a:	cd b7       	in	r28, 0x3d	; 61
    115c:	de b7       	in	r29, 0x3e	; 62
    115e:	8a 83       	std	Y+2, r24	; 0x02
    1160:	6b 83       	std	Y+3, r22	; 0x03
    1162:	4c 83       	std	Y+4, r20	; 0x04
	ES_t local_error_state = ES_NOK;
    1164:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_Port_id <= DIO_PORTD) && (Copy_Pin_id <= DIO_PIN7) && (Copy_value <= OUTPUT))
    1166:	8a 81       	ldd	r24, Y+2	; 0x02
    1168:	84 30       	cpi	r24, 0x04	; 4
    116a:	08 f0       	brcs	.+2      	; 0x116e <DIO_enu_Set_Pin_Dir+0x1e>
    116c:	d1 c0       	rjmp	.+418    	; 0x1310 <DIO_enu_Set_Pin_Dir+0x1c0>
    116e:	8b 81       	ldd	r24, Y+3	; 0x03
    1170:	88 30       	cpi	r24, 0x08	; 8
    1172:	08 f0       	brcs	.+2      	; 0x1176 <DIO_enu_Set_Pin_Dir+0x26>
    1174:	cd c0       	rjmp	.+410    	; 0x1310 <DIO_enu_Set_Pin_Dir+0x1c0>
    1176:	8c 81       	ldd	r24, Y+4	; 0x04
    1178:	82 30       	cpi	r24, 0x02	; 2
    117a:	08 f0       	brcs	.+2      	; 0x117e <DIO_enu_Set_Pin_Dir+0x2e>
    117c:	c9 c0       	rjmp	.+402    	; 0x1310 <DIO_enu_Set_Pin_Dir+0x1c0>
	{
		switch(Copy_Port_id)
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	3e 83       	std	Y+6, r19	; 0x06
    1186:	2d 83       	std	Y+5, r18	; 0x05
    1188:	6d 81       	ldd	r22, Y+5	; 0x05
    118a:	7e 81       	ldd	r23, Y+6	; 0x06
    118c:	61 30       	cpi	r22, 0x01	; 1
    118e:	71 05       	cpc	r23, r1
    1190:	09 f4       	brne	.+2      	; 0x1194 <DIO_enu_Set_Pin_Dir+0x44>
    1192:	41 c0       	rjmp	.+130    	; 0x1216 <DIO_enu_Set_Pin_Dir+0xc6>
    1194:	8d 81       	ldd	r24, Y+5	; 0x05
    1196:	9e 81       	ldd	r25, Y+6	; 0x06
    1198:	82 30       	cpi	r24, 0x02	; 2
    119a:	91 05       	cpc	r25, r1
    119c:	34 f4       	brge	.+12     	; 0x11aa <DIO_enu_Set_Pin_Dir+0x5a>
    119e:	2d 81       	ldd	r18, Y+5	; 0x05
    11a0:	3e 81       	ldd	r19, Y+6	; 0x06
    11a2:	21 15       	cp	r18, r1
    11a4:	31 05       	cpc	r19, r1
    11a6:	71 f0       	breq	.+28     	; 0x11c4 <DIO_enu_Set_Pin_Dir+0x74>
    11a8:	b0 c0       	rjmp	.+352    	; 0x130a <DIO_enu_Set_Pin_Dir+0x1ba>
    11aa:	6d 81       	ldd	r22, Y+5	; 0x05
    11ac:	7e 81       	ldd	r23, Y+6	; 0x06
    11ae:	62 30       	cpi	r22, 0x02	; 2
    11b0:	71 05       	cpc	r23, r1
    11b2:	09 f4       	brne	.+2      	; 0x11b6 <DIO_enu_Set_Pin_Dir+0x66>
    11b4:	59 c0       	rjmp	.+178    	; 0x1268 <DIO_enu_Set_Pin_Dir+0x118>
    11b6:	8d 81       	ldd	r24, Y+5	; 0x05
    11b8:	9e 81       	ldd	r25, Y+6	; 0x06
    11ba:	83 30       	cpi	r24, 0x03	; 3
    11bc:	91 05       	cpc	r25, r1
    11be:	09 f4       	brne	.+2      	; 0x11c2 <DIO_enu_Set_Pin_Dir+0x72>
    11c0:	7c c0       	rjmp	.+248    	; 0x12ba <DIO_enu_Set_Pin_Dir+0x16a>
    11c2:	a3 c0       	rjmp	.+326    	; 0x130a <DIO_enu_Set_Pin_Dir+0x1ba>
		{
		case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT << Copy_Pin_id);
    11c4:	aa e3       	ldi	r26, 0x3A	; 58
    11c6:	b0 e0       	ldi	r27, 0x00	; 0
    11c8:	ea e3       	ldi	r30, 0x3A	; 58
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	48 2f       	mov	r20, r24
    11d0:	8b 81       	ldd	r24, Y+3	; 0x03
    11d2:	28 2f       	mov	r18, r24
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <DIO_enu_Set_Pin_Dir+0x90>
    11dc:	88 0f       	add	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	2a 95       	dec	r18
    11e2:	e2 f7       	brpl	.-8      	; 0x11dc <DIO_enu_Set_Pin_Dir+0x8c>
    11e4:	80 95       	com	r24
    11e6:	84 23       	and	r24, r20
    11e8:	8c 93       	st	X, r24
			DDRA |= (Copy_value << Copy_Pin_id);
    11ea:	aa e3       	ldi	r26, 0x3A	; 58
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	ea e3       	ldi	r30, 0x3A	; 58
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	48 2f       	mov	r20, r24
    11f6:	8c 81       	ldd	r24, Y+4	; 0x04
    11f8:	28 2f       	mov	r18, r24
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	8b 81       	ldd	r24, Y+3	; 0x03
    11fe:	88 2f       	mov	r24, r24
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	b9 01       	movw	r22, r18
    1204:	02 c0       	rjmp	.+4      	; 0x120a <DIO_enu_Set_Pin_Dir+0xba>
    1206:	66 0f       	add	r22, r22
    1208:	77 1f       	adc	r23, r23
    120a:	8a 95       	dec	r24
    120c:	e2 f7       	brpl	.-8      	; 0x1206 <DIO_enu_Set_Pin_Dir+0xb6>
    120e:	cb 01       	movw	r24, r22
    1210:	84 2b       	or	r24, r20
    1212:	8c 93       	st	X, r24
    1214:	7a c0       	rjmp	.+244    	; 0x130a <DIO_enu_Set_Pin_Dir+0x1ba>
			break;
		case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT << Copy_Pin_id);
    1216:	a7 e3       	ldi	r26, 0x37	; 55
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	e7 e3       	ldi	r30, 0x37	; 55
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	48 2f       	mov	r20, r24
    1222:	8b 81       	ldd	r24, Y+3	; 0x03
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	02 c0       	rjmp	.+4      	; 0x1232 <DIO_enu_Set_Pin_Dir+0xe2>
    122e:	88 0f       	add	r24, r24
    1230:	99 1f       	adc	r25, r25
    1232:	2a 95       	dec	r18
    1234:	e2 f7       	brpl	.-8      	; 0x122e <DIO_enu_Set_Pin_Dir+0xde>
    1236:	80 95       	com	r24
    1238:	84 23       	and	r24, r20
    123a:	8c 93       	st	X, r24
			DDRB |= (Copy_value << Copy_Pin_id);
    123c:	a7 e3       	ldi	r26, 0x37	; 55
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	e7 e3       	ldi	r30, 0x37	; 55
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	48 2f       	mov	r20, r24
    1248:	8c 81       	ldd	r24, Y+4	; 0x04
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	88 2f       	mov	r24, r24
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	b9 01       	movw	r22, r18
    1256:	02 c0       	rjmp	.+4      	; 0x125c <DIO_enu_Set_Pin_Dir+0x10c>
    1258:	66 0f       	add	r22, r22
    125a:	77 1f       	adc	r23, r23
    125c:	8a 95       	dec	r24
    125e:	e2 f7       	brpl	.-8      	; 0x1258 <DIO_enu_Set_Pin_Dir+0x108>
    1260:	cb 01       	movw	r24, r22
    1262:	84 2b       	or	r24, r20
    1264:	8c 93       	st	X, r24
    1266:	51 c0       	rjmp	.+162    	; 0x130a <DIO_enu_Set_Pin_Dir+0x1ba>
			break;
		case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT << Copy_Pin_id);
    1268:	a4 e3       	ldi	r26, 0x34	; 52
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	e4 e3       	ldi	r30, 0x34	; 52
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	48 2f       	mov	r20, r24
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <DIO_enu_Set_Pin_Dir+0x134>
    1280:	88 0f       	add	r24, r24
    1282:	99 1f       	adc	r25, r25
    1284:	2a 95       	dec	r18
    1286:	e2 f7       	brpl	.-8      	; 0x1280 <DIO_enu_Set_Pin_Dir+0x130>
    1288:	80 95       	com	r24
    128a:	84 23       	and	r24, r20
    128c:	8c 93       	st	X, r24
			DDRC |= (Copy_value << Copy_Pin_id);
    128e:	a4 e3       	ldi	r26, 0x34	; 52
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	e4 e3       	ldi	r30, 0x34	; 52
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	48 2f       	mov	r20, r24
    129a:	8c 81       	ldd	r24, Y+4	; 0x04
    129c:	28 2f       	mov	r18, r24
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	8b 81       	ldd	r24, Y+3	; 0x03
    12a2:	88 2f       	mov	r24, r24
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	b9 01       	movw	r22, r18
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <DIO_enu_Set_Pin_Dir+0x15e>
    12aa:	66 0f       	add	r22, r22
    12ac:	77 1f       	adc	r23, r23
    12ae:	8a 95       	dec	r24
    12b0:	e2 f7       	brpl	.-8      	; 0x12aa <DIO_enu_Set_Pin_Dir+0x15a>
    12b2:	cb 01       	movw	r24, r22
    12b4:	84 2b       	or	r24, r20
    12b6:	8c 93       	st	X, r24
    12b8:	28 c0       	rjmp	.+80     	; 0x130a <DIO_enu_Set_Pin_Dir+0x1ba>
			break;
		case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_Pin_id);
    12ba:	a1 e3       	ldi	r26, 0x31	; 49
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	e1 e3       	ldi	r30, 0x31	; 49
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	48 2f       	mov	r20, r24
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	28 2f       	mov	r18, r24
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <DIO_enu_Set_Pin_Dir+0x186>
    12d2:	88 0f       	add	r24, r24
    12d4:	99 1f       	adc	r25, r25
    12d6:	2a 95       	dec	r18
    12d8:	e2 f7       	brpl	.-8      	; 0x12d2 <DIO_enu_Set_Pin_Dir+0x182>
    12da:	80 95       	com	r24
    12dc:	84 23       	and	r24, r20
    12de:	8c 93       	st	X, r24
			DDRD |= (Copy_value << Copy_Pin_id);
    12e0:	a1 e3       	ldi	r26, 0x31	; 49
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    12e4:	e1 e3       	ldi	r30, 0x31	; 49
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	48 2f       	mov	r20, r24
    12ec:	8c 81       	ldd	r24, Y+4	; 0x04
    12ee:	28 2f       	mov	r18, r24
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	8b 81       	ldd	r24, Y+3	; 0x03
    12f4:	88 2f       	mov	r24, r24
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	b9 01       	movw	r22, r18
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <DIO_enu_Set_Pin_Dir+0x1b0>
    12fc:	66 0f       	add	r22, r22
    12fe:	77 1f       	adc	r23, r23
    1300:	8a 95       	dec	r24
    1302:	e2 f7       	brpl	.-8      	; 0x12fc <DIO_enu_Set_Pin_Dir+0x1ac>
    1304:	cb 01       	movw	r24, r22
    1306:	84 2b       	or	r24, r20
    1308:	8c 93       	st	X, r24
			break;
		}
		local_error_state = ES_OK;
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	89 83       	std	Y+1, r24	; 0x01
    130e:	02 c0       	rjmp	.+4      	; 0x1314 <DIO_enu_Set_Pin_Dir+0x1c4>
	}
	else
	{
		local_error_state = OUT_OF_RANGE;
    1310:	83 e0       	ldi	r24, 0x03	; 3
    1312:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_error_state;
    1314:	89 81       	ldd	r24, Y+1	; 0x01
}
    1316:	26 96       	adiw	r28, 0x06	; 6
    1318:	0f b6       	in	r0, 0x3f	; 63
    131a:	f8 94       	cli
    131c:	de bf       	out	0x3e, r29	; 62
    131e:	0f be       	out	0x3f, r0	; 63
    1320:	cd bf       	out	0x3d, r28	; 61
    1322:	cf 91       	pop	r28
    1324:	df 91       	pop	r29
    1326:	08 95       	ret

00001328 <DIO_enu_Set_Pin_Value>:


ES_t DIO_enu_Set_Pin_Value(u8 Copy_Port_id, u8 Copy_Pin_id, u8 Copy_value)
{
    1328:	df 93       	push	r29
    132a:	cf 93       	push	r28
    132c:	00 d0       	rcall	.+0      	; 0x132e <DIO_enu_Set_Pin_Value+0x6>
    132e:	00 d0       	rcall	.+0      	; 0x1330 <DIO_enu_Set_Pin_Value+0x8>
    1330:	00 d0       	rcall	.+0      	; 0x1332 <DIO_enu_Set_Pin_Value+0xa>
    1332:	cd b7       	in	r28, 0x3d	; 61
    1334:	de b7       	in	r29, 0x3e	; 62
    1336:	8a 83       	std	Y+2, r24	; 0x02
    1338:	6b 83       	std	Y+3, r22	; 0x03
    133a:	4c 83       	std	Y+4, r20	; 0x04
	ES_t local_error_state = ES_NOK;
    133c:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_Port_id <= DIO_PORTD) && (Copy_Pin_id <= DIO_PIN7) && (Copy_value <= OUTPUT))
    133e:	8a 81       	ldd	r24, Y+2	; 0x02
    1340:	84 30       	cpi	r24, 0x04	; 4
    1342:	08 f0       	brcs	.+2      	; 0x1346 <DIO_enu_Set_Pin_Value+0x1e>
    1344:	d1 c0       	rjmp	.+418    	; 0x14e8 <DIO_enu_Set_Pin_Value+0x1c0>
    1346:	8b 81       	ldd	r24, Y+3	; 0x03
    1348:	88 30       	cpi	r24, 0x08	; 8
    134a:	08 f0       	brcs	.+2      	; 0x134e <DIO_enu_Set_Pin_Value+0x26>
    134c:	cd c0       	rjmp	.+410    	; 0x14e8 <DIO_enu_Set_Pin_Value+0x1c0>
    134e:	8c 81       	ldd	r24, Y+4	; 0x04
    1350:	82 30       	cpi	r24, 0x02	; 2
    1352:	08 f0       	brcs	.+2      	; 0x1356 <DIO_enu_Set_Pin_Value+0x2e>
    1354:	c9 c0       	rjmp	.+402    	; 0x14e8 <DIO_enu_Set_Pin_Value+0x1c0>
	{
		switch(Copy_Port_id)
    1356:	8a 81       	ldd	r24, Y+2	; 0x02
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	3e 83       	std	Y+6, r19	; 0x06
    135e:	2d 83       	std	Y+5, r18	; 0x05
    1360:	6d 81       	ldd	r22, Y+5	; 0x05
    1362:	7e 81       	ldd	r23, Y+6	; 0x06
    1364:	61 30       	cpi	r22, 0x01	; 1
    1366:	71 05       	cpc	r23, r1
    1368:	09 f4       	brne	.+2      	; 0x136c <DIO_enu_Set_Pin_Value+0x44>
    136a:	41 c0       	rjmp	.+130    	; 0x13ee <DIO_enu_Set_Pin_Value+0xc6>
    136c:	8d 81       	ldd	r24, Y+5	; 0x05
    136e:	9e 81       	ldd	r25, Y+6	; 0x06
    1370:	82 30       	cpi	r24, 0x02	; 2
    1372:	91 05       	cpc	r25, r1
    1374:	34 f4       	brge	.+12     	; 0x1382 <DIO_enu_Set_Pin_Value+0x5a>
    1376:	2d 81       	ldd	r18, Y+5	; 0x05
    1378:	3e 81       	ldd	r19, Y+6	; 0x06
    137a:	21 15       	cp	r18, r1
    137c:	31 05       	cpc	r19, r1
    137e:	71 f0       	breq	.+28     	; 0x139c <DIO_enu_Set_Pin_Value+0x74>
    1380:	b0 c0       	rjmp	.+352    	; 0x14e2 <DIO_enu_Set_Pin_Value+0x1ba>
    1382:	6d 81       	ldd	r22, Y+5	; 0x05
    1384:	7e 81       	ldd	r23, Y+6	; 0x06
    1386:	62 30       	cpi	r22, 0x02	; 2
    1388:	71 05       	cpc	r23, r1
    138a:	09 f4       	brne	.+2      	; 0x138e <DIO_enu_Set_Pin_Value+0x66>
    138c:	59 c0       	rjmp	.+178    	; 0x1440 <DIO_enu_Set_Pin_Value+0x118>
    138e:	8d 81       	ldd	r24, Y+5	; 0x05
    1390:	9e 81       	ldd	r25, Y+6	; 0x06
    1392:	83 30       	cpi	r24, 0x03	; 3
    1394:	91 05       	cpc	r25, r1
    1396:	09 f4       	brne	.+2      	; 0x139a <DIO_enu_Set_Pin_Value+0x72>
    1398:	7c c0       	rjmp	.+248    	; 0x1492 <DIO_enu_Set_Pin_Value+0x16a>
    139a:	a3 c0       	rjmp	.+326    	; 0x14e2 <DIO_enu_Set_Pin_Value+0x1ba>
		{
		case DIO_PORTA:
			PORTA &= ~(DIO_MASK_BIT << Copy_Pin_id);
    139c:	ab e3       	ldi	r26, 0x3B	; 59
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	eb e3       	ldi	r30, 0x3B	; 59
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	48 2f       	mov	r20, r24
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	28 2f       	mov	r18, r24
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <DIO_enu_Set_Pin_Value+0x90>
    13b4:	88 0f       	add	r24, r24
    13b6:	99 1f       	adc	r25, r25
    13b8:	2a 95       	dec	r18
    13ba:	e2 f7       	brpl	.-8      	; 0x13b4 <DIO_enu_Set_Pin_Value+0x8c>
    13bc:	80 95       	com	r24
    13be:	84 23       	and	r24, r20
    13c0:	8c 93       	st	X, r24
			PORTA |= (Copy_value << Copy_Pin_id);
    13c2:	ab e3       	ldi	r26, 0x3B	; 59
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	eb e3       	ldi	r30, 0x3B	; 59
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	48 2f       	mov	r20, r24
    13ce:	8c 81       	ldd	r24, Y+4	; 0x04
    13d0:	28 2f       	mov	r18, r24
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	8b 81       	ldd	r24, Y+3	; 0x03
    13d6:	88 2f       	mov	r24, r24
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	b9 01       	movw	r22, r18
    13dc:	02 c0       	rjmp	.+4      	; 0x13e2 <DIO_enu_Set_Pin_Value+0xba>
    13de:	66 0f       	add	r22, r22
    13e0:	77 1f       	adc	r23, r23
    13e2:	8a 95       	dec	r24
    13e4:	e2 f7       	brpl	.-8      	; 0x13de <DIO_enu_Set_Pin_Value+0xb6>
    13e6:	cb 01       	movw	r24, r22
    13e8:	84 2b       	or	r24, r20
    13ea:	8c 93       	st	X, r24
    13ec:	7a c0       	rjmp	.+244    	; 0x14e2 <DIO_enu_Set_Pin_Value+0x1ba>
			break;
		case DIO_PORTB:
			PORTB &= ~(DIO_MASK_BIT << Copy_Pin_id);
    13ee:	a8 e3       	ldi	r26, 0x38	; 56
    13f0:	b0 e0       	ldi	r27, 0x00	; 0
    13f2:	e8 e3       	ldi	r30, 0x38	; 56
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	48 2f       	mov	r20, r24
    13fa:	8b 81       	ldd	r24, Y+3	; 0x03
    13fc:	28 2f       	mov	r18, r24
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	02 c0       	rjmp	.+4      	; 0x140a <DIO_enu_Set_Pin_Value+0xe2>
    1406:	88 0f       	add	r24, r24
    1408:	99 1f       	adc	r25, r25
    140a:	2a 95       	dec	r18
    140c:	e2 f7       	brpl	.-8      	; 0x1406 <DIO_enu_Set_Pin_Value+0xde>
    140e:	80 95       	com	r24
    1410:	84 23       	and	r24, r20
    1412:	8c 93       	st	X, r24
			PORTB |= (Copy_value << Copy_Pin_id);
    1414:	a8 e3       	ldi	r26, 0x38	; 56
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	e8 e3       	ldi	r30, 0x38	; 56
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	48 2f       	mov	r20, r24
    1420:	8c 81       	ldd	r24, Y+4	; 0x04
    1422:	28 2f       	mov	r18, r24
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
    1428:	88 2f       	mov	r24, r24
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	b9 01       	movw	r22, r18
    142e:	02 c0       	rjmp	.+4      	; 0x1434 <DIO_enu_Set_Pin_Value+0x10c>
    1430:	66 0f       	add	r22, r22
    1432:	77 1f       	adc	r23, r23
    1434:	8a 95       	dec	r24
    1436:	e2 f7       	brpl	.-8      	; 0x1430 <DIO_enu_Set_Pin_Value+0x108>
    1438:	cb 01       	movw	r24, r22
    143a:	84 2b       	or	r24, r20
    143c:	8c 93       	st	X, r24
    143e:	51 c0       	rjmp	.+162    	; 0x14e2 <DIO_enu_Set_Pin_Value+0x1ba>
			break;
		case DIO_PORTC:
			PORTC &= ~(DIO_MASK_BIT << Copy_Pin_id);
    1440:	a5 e3       	ldi	r26, 0x35	; 53
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	e5 e3       	ldi	r30, 0x35	; 53
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	48 2f       	mov	r20, r24
    144c:	8b 81       	ldd	r24, Y+3	; 0x03
    144e:	28 2f       	mov	r18, r24
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	02 c0       	rjmp	.+4      	; 0x145c <DIO_enu_Set_Pin_Value+0x134>
    1458:	88 0f       	add	r24, r24
    145a:	99 1f       	adc	r25, r25
    145c:	2a 95       	dec	r18
    145e:	e2 f7       	brpl	.-8      	; 0x1458 <DIO_enu_Set_Pin_Value+0x130>
    1460:	80 95       	com	r24
    1462:	84 23       	and	r24, r20
    1464:	8c 93       	st	X, r24
			PORTC |= (Copy_value << Copy_Pin_id);
    1466:	a5 e3       	ldi	r26, 0x35	; 53
    1468:	b0 e0       	ldi	r27, 0x00	; 0
    146a:	e5 e3       	ldi	r30, 0x35	; 53
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	48 2f       	mov	r20, r24
    1472:	8c 81       	ldd	r24, Y+4	; 0x04
    1474:	28 2f       	mov	r18, r24
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	8b 81       	ldd	r24, Y+3	; 0x03
    147a:	88 2f       	mov	r24, r24
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	b9 01       	movw	r22, r18
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <DIO_enu_Set_Pin_Value+0x15e>
    1482:	66 0f       	add	r22, r22
    1484:	77 1f       	adc	r23, r23
    1486:	8a 95       	dec	r24
    1488:	e2 f7       	brpl	.-8      	; 0x1482 <DIO_enu_Set_Pin_Value+0x15a>
    148a:	cb 01       	movw	r24, r22
    148c:	84 2b       	or	r24, r20
    148e:	8c 93       	st	X, r24
    1490:	28 c0       	rjmp	.+80     	; 0x14e2 <DIO_enu_Set_Pin_Value+0x1ba>
			break;
		case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_Pin_id);
    1492:	a2 e3       	ldi	r26, 0x32	; 50
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	e2 e3       	ldi	r30, 0x32	; 50
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	48 2f       	mov	r20, r24
    149e:	8b 81       	ldd	r24, Y+3	; 0x03
    14a0:	28 2f       	mov	r18, r24
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <DIO_enu_Set_Pin_Value+0x186>
    14aa:	88 0f       	add	r24, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	2a 95       	dec	r18
    14b0:	e2 f7       	brpl	.-8      	; 0x14aa <DIO_enu_Set_Pin_Value+0x182>
    14b2:	80 95       	com	r24
    14b4:	84 23       	and	r24, r20
    14b6:	8c 93       	st	X, r24
			PORTD |= (Copy_value << Copy_Pin_id);
    14b8:	a2 e3       	ldi	r26, 0x32	; 50
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	e2 e3       	ldi	r30, 0x32	; 50
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	48 2f       	mov	r20, r24
    14c4:	8c 81       	ldd	r24, Y+4	; 0x04
    14c6:	28 2f       	mov	r18, r24
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	8b 81       	ldd	r24, Y+3	; 0x03
    14cc:	88 2f       	mov	r24, r24
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	b9 01       	movw	r22, r18
    14d2:	02 c0       	rjmp	.+4      	; 0x14d8 <DIO_enu_Set_Pin_Value+0x1b0>
    14d4:	66 0f       	add	r22, r22
    14d6:	77 1f       	adc	r23, r23
    14d8:	8a 95       	dec	r24
    14da:	e2 f7       	brpl	.-8      	; 0x14d4 <DIO_enu_Set_Pin_Value+0x1ac>
    14dc:	cb 01       	movw	r24, r22
    14de:	84 2b       	or	r24, r20
    14e0:	8c 93       	st	X, r24
			break;
		}
		local_error_state = ES_OK;
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	89 83       	std	Y+1, r24	; 0x01
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <DIO_enu_Set_Pin_Value+0x1c4>
	}
	else
	{
		local_error_state = OUT_OF_RANGE;
    14e8:	83 e0       	ldi	r24, 0x03	; 3
    14ea:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_error_state;
    14ec:	89 81       	ldd	r24, Y+1	; 0x01

}
    14ee:	26 96       	adiw	r28, 0x06	; 6
    14f0:	0f b6       	in	r0, 0x3f	; 63
    14f2:	f8 94       	cli
    14f4:	de bf       	out	0x3e, r29	; 62
    14f6:	0f be       	out	0x3f, r0	; 63
    14f8:	cd bf       	out	0x3d, r28	; 61
    14fa:	cf 91       	pop	r28
    14fc:	df 91       	pop	r29
    14fe:	08 95       	ret

00001500 <DIO_enu_Tog_Pin_Value>:
ES_t DIO_enu_Tog_Pin_Value(u8 Copy_Port_id, u8 Copy_Pin_id)
{
    1500:	df 93       	push	r29
    1502:	cf 93       	push	r28
    1504:	00 d0       	rcall	.+0      	; 0x1506 <DIO_enu_Tog_Pin_Value+0x6>
    1506:	00 d0       	rcall	.+0      	; 0x1508 <DIO_enu_Tog_Pin_Value+0x8>
    1508:	0f 92       	push	r0
    150a:	cd b7       	in	r28, 0x3d	; 61
    150c:	de b7       	in	r29, 0x3e	; 62
    150e:	8a 83       	std	Y+2, r24	; 0x02
    1510:	6b 83       	std	Y+3, r22	; 0x03

	ES_t local_error_state = ES_NOK;
    1512:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_Port_id <= DIO_PORTD) && (Copy_Pin_id <= DIO_PIN7))
    1514:	8a 81       	ldd	r24, Y+2	; 0x02
    1516:	84 30       	cpi	r24, 0x04	; 4
    1518:	08 f0       	brcs	.+2      	; 0x151c <DIO_enu_Tog_Pin_Value+0x1c>
    151a:	75 c0       	rjmp	.+234    	; 0x1606 <DIO_enu_Tog_Pin_Value+0x106>
    151c:	8b 81       	ldd	r24, Y+3	; 0x03
    151e:	88 30       	cpi	r24, 0x08	; 8
    1520:	08 f0       	brcs	.+2      	; 0x1524 <DIO_enu_Tog_Pin_Value+0x24>
    1522:	71 c0       	rjmp	.+226    	; 0x1606 <DIO_enu_Tog_Pin_Value+0x106>
	{
		switch(Copy_Port_id)
    1524:	8a 81       	ldd	r24, Y+2	; 0x02
    1526:	28 2f       	mov	r18, r24
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	3d 83       	std	Y+5, r19	; 0x05
    152c:	2c 83       	std	Y+4, r18	; 0x04
    152e:	8c 81       	ldd	r24, Y+4	; 0x04
    1530:	9d 81       	ldd	r25, Y+5	; 0x05
    1532:	81 30       	cpi	r24, 0x01	; 1
    1534:	91 05       	cpc	r25, r1
    1536:	49 f1       	breq	.+82     	; 0x158a <DIO_enu_Tog_Pin_Value+0x8a>
    1538:	2c 81       	ldd	r18, Y+4	; 0x04
    153a:	3d 81       	ldd	r19, Y+5	; 0x05
    153c:	22 30       	cpi	r18, 0x02	; 2
    153e:	31 05       	cpc	r19, r1
    1540:	2c f4       	brge	.+10     	; 0x154c <DIO_enu_Tog_Pin_Value+0x4c>
    1542:	8c 81       	ldd	r24, Y+4	; 0x04
    1544:	9d 81       	ldd	r25, Y+5	; 0x05
    1546:	00 97       	sbiw	r24, 0x00	; 0
    1548:	61 f0       	breq	.+24     	; 0x1562 <DIO_enu_Tog_Pin_Value+0x62>
    154a:	5a c0       	rjmp	.+180    	; 0x1600 <DIO_enu_Tog_Pin_Value+0x100>
    154c:	2c 81       	ldd	r18, Y+4	; 0x04
    154e:	3d 81       	ldd	r19, Y+5	; 0x05
    1550:	22 30       	cpi	r18, 0x02	; 2
    1552:	31 05       	cpc	r19, r1
    1554:	71 f1       	breq	.+92     	; 0x15b2 <DIO_enu_Tog_Pin_Value+0xb2>
    1556:	8c 81       	ldd	r24, Y+4	; 0x04
    1558:	9d 81       	ldd	r25, Y+5	; 0x05
    155a:	83 30       	cpi	r24, 0x03	; 3
    155c:	91 05       	cpc	r25, r1
    155e:	e9 f1       	breq	.+122    	; 0x15da <DIO_enu_Tog_Pin_Value+0xda>
    1560:	4f c0       	rjmp	.+158    	; 0x1600 <DIO_enu_Tog_Pin_Value+0x100>
		{
		case DIO_PORTA:
			PORTA ^= (DIO_MASK_BIT << Copy_Pin_id);
    1562:	ab e3       	ldi	r26, 0x3B	; 59
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	eb e3       	ldi	r30, 0x3B	; 59
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	48 2f       	mov	r20, r24
    156e:	8b 81       	ldd	r24, Y+3	; 0x03
    1570:	28 2f       	mov	r18, r24
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	02 2e       	mov	r0, r18
    157a:	02 c0       	rjmp	.+4      	; 0x1580 <DIO_enu_Tog_Pin_Value+0x80>
    157c:	88 0f       	add	r24, r24
    157e:	99 1f       	adc	r25, r25
    1580:	0a 94       	dec	r0
    1582:	e2 f7       	brpl	.-8      	; 0x157c <DIO_enu_Tog_Pin_Value+0x7c>
    1584:	84 27       	eor	r24, r20
    1586:	8c 93       	st	X, r24
    1588:	3b c0       	rjmp	.+118    	; 0x1600 <DIO_enu_Tog_Pin_Value+0x100>
			break;
		case DIO_PORTB:
			PORTB ^= (DIO_MASK_BIT << Copy_Pin_id);
    158a:	a8 e3       	ldi	r26, 0x38	; 56
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	e8 e3       	ldi	r30, 0x38	; 56
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	48 2f       	mov	r20, r24
    1596:	8b 81       	ldd	r24, Y+3	; 0x03
    1598:	28 2f       	mov	r18, r24
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	02 2e       	mov	r0, r18
    15a2:	02 c0       	rjmp	.+4      	; 0x15a8 <DIO_enu_Tog_Pin_Value+0xa8>
    15a4:	88 0f       	add	r24, r24
    15a6:	99 1f       	adc	r25, r25
    15a8:	0a 94       	dec	r0
    15aa:	e2 f7       	brpl	.-8      	; 0x15a4 <DIO_enu_Tog_Pin_Value+0xa4>
    15ac:	84 27       	eor	r24, r20
    15ae:	8c 93       	st	X, r24
    15b0:	27 c0       	rjmp	.+78     	; 0x1600 <DIO_enu_Tog_Pin_Value+0x100>
			break;
		case DIO_PORTC:
			PORTC ^= (DIO_MASK_BIT << Copy_Pin_id);
    15b2:	a5 e3       	ldi	r26, 0x35	; 53
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	e5 e3       	ldi	r30, 0x35	; 53
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	48 2f       	mov	r20, r24
    15be:	8b 81       	ldd	r24, Y+3	; 0x03
    15c0:	28 2f       	mov	r18, r24
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	02 2e       	mov	r0, r18
    15ca:	02 c0       	rjmp	.+4      	; 0x15d0 <DIO_enu_Tog_Pin_Value+0xd0>
    15cc:	88 0f       	add	r24, r24
    15ce:	99 1f       	adc	r25, r25
    15d0:	0a 94       	dec	r0
    15d2:	e2 f7       	brpl	.-8      	; 0x15cc <DIO_enu_Tog_Pin_Value+0xcc>
    15d4:	84 27       	eor	r24, r20
    15d6:	8c 93       	st	X, r24
    15d8:	13 c0       	rjmp	.+38     	; 0x1600 <DIO_enu_Tog_Pin_Value+0x100>
			break;
		case DIO_PORTD:
			PORTD ^= (DIO_MASK_BIT << Copy_Pin_id);
    15da:	a2 e3       	ldi	r26, 0x32	; 50
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	e2 e3       	ldi	r30, 0x32	; 50
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	48 2f       	mov	r20, r24
    15e6:	8b 81       	ldd	r24, Y+3	; 0x03
    15e8:	28 2f       	mov	r18, r24
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	02 2e       	mov	r0, r18
    15f2:	02 c0       	rjmp	.+4      	; 0x15f8 <DIO_enu_Tog_Pin_Value+0xf8>
    15f4:	88 0f       	add	r24, r24
    15f6:	99 1f       	adc	r25, r25
    15f8:	0a 94       	dec	r0
    15fa:	e2 f7       	brpl	.-8      	; 0x15f4 <DIO_enu_Tog_Pin_Value+0xf4>
    15fc:	84 27       	eor	r24, r20
    15fe:	8c 93       	st	X, r24
			break;
		}
		local_error_state = ES_OK;
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	89 83       	std	Y+1, r24	; 0x01
    1604:	02 c0       	rjmp	.+4      	; 0x160a <DIO_enu_Tog_Pin_Value+0x10a>
	}
	else
	{
		local_error_state = OUT_OF_RANGE;
    1606:	83 e0       	ldi	r24, 0x03	; 3
    1608:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_error_state;
    160a:	89 81       	ldd	r24, Y+1	; 0x01

}
    160c:	0f 90       	pop	r0
    160e:	0f 90       	pop	r0
    1610:	0f 90       	pop	r0
    1612:	0f 90       	pop	r0
    1614:	0f 90       	pop	r0
    1616:	cf 91       	pop	r28
    1618:	df 91       	pop	r29
    161a:	08 95       	ret

0000161c <DIO_enu_Get_Pin_Value>:




ES_t DIO_enu_Get_Pin_Value(u8 Copy_Port_id, u8 Copy_Pin_id, u8 * Copy_value)
{
    161c:	df 93       	push	r29
    161e:	cf 93       	push	r28
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
    1624:	27 97       	sbiw	r28, 0x07	; 7
    1626:	0f b6       	in	r0, 0x3f	; 63
    1628:	f8 94       	cli
    162a:	de bf       	out	0x3e, r29	; 62
    162c:	0f be       	out	0x3f, r0	; 63
    162e:	cd bf       	out	0x3d, r28	; 61
    1630:	8a 83       	std	Y+2, r24	; 0x02
    1632:	6b 83       	std	Y+3, r22	; 0x03
    1634:	5d 83       	std	Y+5, r21	; 0x05
    1636:	4c 83       	std	Y+4, r20	; 0x04
	ES_t local_error_state = ES_NOK;
    1638:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_value != NULL)
    163a:	8c 81       	ldd	r24, Y+4	; 0x04
    163c:	9d 81       	ldd	r25, Y+5	; 0x05
    163e:	00 97       	sbiw	r24, 0x00	; 0
    1640:	09 f4       	brne	.+2      	; 0x1644 <DIO_enu_Get_Pin_Value+0x28>
    1642:	7e c0       	rjmp	.+252    	; 0x1740 <DIO_enu_Get_Pin_Value+0x124>
	{
		if((Copy_Port_id <= DIO_PORTD) && (Copy_Pin_id <= DIO_PIN7))
    1644:	8a 81       	ldd	r24, Y+2	; 0x02
    1646:	84 30       	cpi	r24, 0x04	; 4
    1648:	08 f0       	brcs	.+2      	; 0x164c <DIO_enu_Get_Pin_Value+0x30>
    164a:	77 c0       	rjmp	.+238    	; 0x173a <DIO_enu_Get_Pin_Value+0x11e>
    164c:	8b 81       	ldd	r24, Y+3	; 0x03
    164e:	88 30       	cpi	r24, 0x08	; 8
    1650:	08 f0       	brcs	.+2      	; 0x1654 <DIO_enu_Get_Pin_Value+0x38>
    1652:	73 c0       	rjmp	.+230    	; 0x173a <DIO_enu_Get_Pin_Value+0x11e>
		{
			switch (Copy_Port_id)
    1654:	8a 81       	ldd	r24, Y+2	; 0x02
    1656:	28 2f       	mov	r18, r24
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	3f 83       	std	Y+7, r19	; 0x07
    165c:	2e 83       	std	Y+6, r18	; 0x06
    165e:	4e 81       	ldd	r20, Y+6	; 0x06
    1660:	5f 81       	ldd	r21, Y+7	; 0x07
    1662:	41 30       	cpi	r20, 0x01	; 1
    1664:	51 05       	cpc	r21, r1
    1666:	59 f1       	breq	.+86     	; 0x16be <DIO_enu_Get_Pin_Value+0xa2>
    1668:	8e 81       	ldd	r24, Y+6	; 0x06
    166a:	9f 81       	ldd	r25, Y+7	; 0x07
    166c:	82 30       	cpi	r24, 0x02	; 2
    166e:	91 05       	cpc	r25, r1
    1670:	34 f4       	brge	.+12     	; 0x167e <DIO_enu_Get_Pin_Value+0x62>
    1672:	2e 81       	ldd	r18, Y+6	; 0x06
    1674:	3f 81       	ldd	r19, Y+7	; 0x07
    1676:	21 15       	cp	r18, r1
    1678:	31 05       	cpc	r19, r1
    167a:	69 f0       	breq	.+26     	; 0x1696 <DIO_enu_Get_Pin_Value+0x7a>
    167c:	5b c0       	rjmp	.+182    	; 0x1734 <DIO_enu_Get_Pin_Value+0x118>
    167e:	4e 81       	ldd	r20, Y+6	; 0x06
    1680:	5f 81       	ldd	r21, Y+7	; 0x07
    1682:	42 30       	cpi	r20, 0x02	; 2
    1684:	51 05       	cpc	r21, r1
    1686:	79 f1       	breq	.+94     	; 0x16e6 <DIO_enu_Get_Pin_Value+0xca>
    1688:	8e 81       	ldd	r24, Y+6	; 0x06
    168a:	9f 81       	ldd	r25, Y+7	; 0x07
    168c:	83 30       	cpi	r24, 0x03	; 3
    168e:	91 05       	cpc	r25, r1
    1690:	09 f4       	brne	.+2      	; 0x1694 <DIO_enu_Get_Pin_Value+0x78>
    1692:	3d c0       	rjmp	.+122    	; 0x170e <DIO_enu_Get_Pin_Value+0xf2>
    1694:	4f c0       	rjmp	.+158    	; 0x1734 <DIO_enu_Get_Pin_Value+0x118>
			{
			case DIO_PORTA:
				*Copy_value = ((PINA >> Copy_Pin_id) & DIO_MASK_BIT);
    1696:	e9 e3       	ldi	r30, 0x39	; 57
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	28 2f       	mov	r18, r24
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	8b 81       	ldd	r24, Y+3	; 0x03
    16a2:	88 2f       	mov	r24, r24
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	a9 01       	movw	r20, r18
    16a8:	02 c0       	rjmp	.+4      	; 0x16ae <DIO_enu_Get_Pin_Value+0x92>
    16aa:	55 95       	asr	r21
    16ac:	47 95       	ror	r20
    16ae:	8a 95       	dec	r24
    16b0:	e2 f7       	brpl	.-8      	; 0x16aa <DIO_enu_Get_Pin_Value+0x8e>
    16b2:	ca 01       	movw	r24, r20
    16b4:	81 70       	andi	r24, 0x01	; 1
    16b6:	ec 81       	ldd	r30, Y+4	; 0x04
    16b8:	fd 81       	ldd	r31, Y+5	; 0x05
    16ba:	80 83       	st	Z, r24
    16bc:	3b c0       	rjmp	.+118    	; 0x1734 <DIO_enu_Get_Pin_Value+0x118>
				break;
			case DIO_PORTB:
				*Copy_value = ((PINB >> Copy_Pin_id) & DIO_MASK_BIT);
    16be:	e6 e3       	ldi	r30, 0x36	; 54
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	28 2f       	mov	r18, r24
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ca:	88 2f       	mov	r24, r24
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	a9 01       	movw	r20, r18
    16d0:	02 c0       	rjmp	.+4      	; 0x16d6 <DIO_enu_Get_Pin_Value+0xba>
    16d2:	55 95       	asr	r21
    16d4:	47 95       	ror	r20
    16d6:	8a 95       	dec	r24
    16d8:	e2 f7       	brpl	.-8      	; 0x16d2 <DIO_enu_Get_Pin_Value+0xb6>
    16da:	ca 01       	movw	r24, r20
    16dc:	81 70       	andi	r24, 0x01	; 1
    16de:	ec 81       	ldd	r30, Y+4	; 0x04
    16e0:	fd 81       	ldd	r31, Y+5	; 0x05
    16e2:	80 83       	st	Z, r24
    16e4:	27 c0       	rjmp	.+78     	; 0x1734 <DIO_enu_Get_Pin_Value+0x118>
				break;
			case DIO_PORTC:
				*Copy_value = ((PINC >> Copy_Pin_id) & DIO_MASK_BIT);
    16e6:	e3 e3       	ldi	r30, 0x33	; 51
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	28 2f       	mov	r18, r24
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	8b 81       	ldd	r24, Y+3	; 0x03
    16f2:	88 2f       	mov	r24, r24
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	a9 01       	movw	r20, r18
    16f8:	02 c0       	rjmp	.+4      	; 0x16fe <DIO_enu_Get_Pin_Value+0xe2>
    16fa:	55 95       	asr	r21
    16fc:	47 95       	ror	r20
    16fe:	8a 95       	dec	r24
    1700:	e2 f7       	brpl	.-8      	; 0x16fa <DIO_enu_Get_Pin_Value+0xde>
    1702:	ca 01       	movw	r24, r20
    1704:	81 70       	andi	r24, 0x01	; 1
    1706:	ec 81       	ldd	r30, Y+4	; 0x04
    1708:	fd 81       	ldd	r31, Y+5	; 0x05
    170a:	80 83       	st	Z, r24
    170c:	13 c0       	rjmp	.+38     	; 0x1734 <DIO_enu_Get_Pin_Value+0x118>
				break;
			case DIO_PORTD:
				*Copy_value = ((PIND >> Copy_Pin_id) & DIO_MASK_BIT);
    170e:	e0 e3       	ldi	r30, 0x30	; 48
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	28 2f       	mov	r18, r24
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	8b 81       	ldd	r24, Y+3	; 0x03
    171a:	88 2f       	mov	r24, r24
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	a9 01       	movw	r20, r18
    1720:	02 c0       	rjmp	.+4      	; 0x1726 <DIO_enu_Get_Pin_Value+0x10a>
    1722:	55 95       	asr	r21
    1724:	47 95       	ror	r20
    1726:	8a 95       	dec	r24
    1728:	e2 f7       	brpl	.-8      	; 0x1722 <DIO_enu_Get_Pin_Value+0x106>
    172a:	ca 01       	movw	r24, r20
    172c:	81 70       	andi	r24, 0x01	; 1
    172e:	ec 81       	ldd	r30, Y+4	; 0x04
    1730:	fd 81       	ldd	r31, Y+5	; 0x05
    1732:	80 83       	st	Z, r24
				break;
			}
			local_error_state = ES_OK;
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	89 83       	std	Y+1, r24	; 0x01
    1738:	05 c0       	rjmp	.+10     	; 0x1744 <DIO_enu_Get_Pin_Value+0x128>
		}
		else
		{
			local_error_state = OUT_OF_RANGE;
    173a:	83 e0       	ldi	r24, 0x03	; 3
    173c:	89 83       	std	Y+1, r24	; 0x01
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <DIO_enu_Get_Pin_Value+0x128>
		}
	}
	else
	{
		local_error_state = ES_NULL_POINTER;
    1740:	82 e0       	ldi	r24, 0x02	; 2
    1742:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_error_state;
    1744:	89 81       	ldd	r24, Y+1	; 0x01
}
    1746:	27 96       	adiw	r28, 0x07	; 7
    1748:	0f b6       	in	r0, 0x3f	; 63
    174a:	f8 94       	cli
    174c:	de bf       	out	0x3e, r29	; 62
    174e:	0f be       	out	0x3f, r0	; 63
    1750:	cd bf       	out	0x3d, r28	; 61
    1752:	cf 91       	pop	r28
    1754:	df 91       	pop	r29
    1756:	08 95       	ret

00001758 <KPD_GET_PRESSED>:
#include "KPD_Config.h"
#include "KPD_Private.h"


u8 KPD_GET_PRESSED(void)
{
    1758:	df 93       	push	r29
    175a:	cf 93       	push	r28
    175c:	00 d0       	rcall	.+0      	; 0x175e <KPD_GET_PRESSED+0x6>
    175e:	00 d0       	rcall	.+0      	; 0x1760 <KPD_GET_PRESSED+0x8>
    1760:	0f 92       	push	r0
    1762:	cd b7       	in	r28, 0x3d	; 61
    1764:	de b7       	in	r29, 0x3e	; 62

	u8 local_Pressedkey = KPD_NO_PRESSED_KEY;
    1766:	8f ef       	ldi	r24, 0xFF	; 255
    1768:	8b 83       	std	Y+3, r24	; 0x03
											   {KPD_ROW2_PORT, KPD_ROW2_PIN},
											   {KPD_ROW3_PORT, KPD_ROW3_PIN}};



	for(local_colom_Idx = 0; local_colom_Idx < COLOM_NUM; local_colom_Idx++)
    176a:	1a 82       	std	Y+2, r1	; 0x02
    176c:	8a c0       	rjmp	.+276    	; 0x1882 <KPD_GET_PRESSED+0x12a>
	{

		DIO_enu_Set_Pin_Value(local_ARR_Coloms_Config[local_colom_Idx][SET_PORT_NUM], local_ARR_Coloms_Config[local_colom_Idx][SET_PIN_NUM], LOW);
    176e:	8a 81       	ldd	r24, Y+2	; 0x02
    1770:	88 2f       	mov	r24, r24
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	88 0f       	add	r24, r24
    1776:	99 1f       	adc	r25, r25
    1778:	fc 01       	movw	r30, r24
    177a:	e6 56       	subi	r30, 0x66	; 102
    177c:	fe 4f       	sbci	r31, 0xFE	; 254
    177e:	20 81       	ld	r18, Z
    1780:	8a 81       	ldd	r24, Y+2	; 0x02
    1782:	88 2f       	mov	r24, r24
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	88 0f       	add	r24, r24
    1788:	99 1f       	adc	r25, r25
    178a:	fc 01       	movw	r30, r24
    178c:	e5 56       	subi	r30, 0x65	; 101
    178e:	fe 4f       	sbci	r31, 0xFE	; 254
    1790:	90 81       	ld	r25, Z
    1792:	82 2f       	mov	r24, r18
    1794:	69 2f       	mov	r22, r25
    1796:	40 e0       	ldi	r20, 0x00	; 0
    1798:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_enu_Set_Pin_Value>

		for(local_row_Idx = 0; local_row_Idx < ROW_NUM; local_row_Idx++)
    179c:	19 82       	std	Y+1, r1	; 0x01
    179e:	53 c0       	rjmp	.+166    	; 0x1846 <KPD_GET_PRESSED+0xee>
		{
			DIO_enu_Get_Pin_Value(local_Rows_Config[local_row_Idx][SET_PORT_NUM], local_Rows_Config[local_row_Idx][SET_PIN_NUM], &local_Pin_State);
    17a0:	89 81       	ldd	r24, Y+1	; 0x01
    17a2:	88 2f       	mov	r24, r24
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	88 0f       	add	r24, r24
    17a8:	99 1f       	adc	r25, r25
    17aa:	fc 01       	movw	r30, r24
    17ac:	ee 56       	subi	r30, 0x6E	; 110
    17ae:	fe 4f       	sbci	r31, 0xFE	; 254
    17b0:	40 81       	ld	r20, Z
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
    17b4:	88 2f       	mov	r24, r24
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	88 0f       	add	r24, r24
    17ba:	99 1f       	adc	r25, r25
    17bc:	fc 01       	movw	r30, r24
    17be:	ed 56       	subi	r30, 0x6D	; 109
    17c0:	fe 4f       	sbci	r31, 0xFE	; 254
    17c2:	90 81       	ld	r25, Z
    17c4:	9e 01       	movw	r18, r28
    17c6:	2c 5f       	subi	r18, 0xFC	; 252
    17c8:	3f 4f       	sbci	r19, 0xFF	; 255
    17ca:	84 2f       	mov	r24, r20
    17cc:	69 2f       	mov	r22, r25
    17ce:	a9 01       	movw	r20, r18
    17d0:	0e 94 0e 0b 	call	0x161c	; 0x161c <DIO_enu_Get_Pin_Value>

			if(local_Pin_State == LOW)
    17d4:	8c 81       	ldd	r24, Y+4	; 0x04
    17d6:	88 23       	and	r24, r24
    17d8:	99 f5       	brne	.+102    	; 0x1840 <KPD_GET_PRESSED+0xe8>
			{

				local_Pressedkey = local_KPD_Arr[local_row_Idx][local_colom_Idx];
    17da:	89 81       	ldd	r24, Y+1	; 0x01
    17dc:	48 2f       	mov	r20, r24
    17de:	50 e0       	ldi	r21, 0x00	; 0
    17e0:	8a 81       	ldd	r24, Y+2	; 0x02
    17e2:	28 2f       	mov	r18, r24
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	ca 01       	movw	r24, r20
    17e8:	88 0f       	add	r24, r24
    17ea:	99 1f       	adc	r25, r25
    17ec:	88 0f       	add	r24, r24
    17ee:	99 1f       	adc	r25, r25
    17f0:	82 0f       	add	r24, r18
    17f2:	93 1f       	adc	r25, r19
    17f4:	fc 01       	movw	r30, r24
    17f6:	ee 55       	subi	r30, 0x5E	; 94
    17f8:	fe 4f       	sbci	r31, 0xFE	; 254
    17fa:	80 81       	ld	r24, Z
    17fc:	8b 83       	std	Y+3, r24	; 0x03
    17fe:	1a c0       	rjmp	.+52     	; 0x1834 <KPD_GET_PRESSED+0xdc>

				while(local_Pin_State == LOW)
				{
					DIO_enu_Get_Pin_Value(local_Rows_Config[local_row_Idx][SET_PORT_NUM], local_Rows_Config[local_row_Idx][SET_PIN_NUM], &local_Pin_State);
    1800:	89 81       	ldd	r24, Y+1	; 0x01
    1802:	88 2f       	mov	r24, r24
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	88 0f       	add	r24, r24
    1808:	99 1f       	adc	r25, r25
    180a:	fc 01       	movw	r30, r24
    180c:	ee 56       	subi	r30, 0x6E	; 110
    180e:	fe 4f       	sbci	r31, 0xFE	; 254
    1810:	40 81       	ld	r20, Z
    1812:	89 81       	ldd	r24, Y+1	; 0x01
    1814:	88 2f       	mov	r24, r24
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	88 0f       	add	r24, r24
    181a:	99 1f       	adc	r25, r25
    181c:	fc 01       	movw	r30, r24
    181e:	ed 56       	subi	r30, 0x6D	; 109
    1820:	fe 4f       	sbci	r31, 0xFE	; 254
    1822:	90 81       	ld	r25, Z
    1824:	9e 01       	movw	r18, r28
    1826:	2c 5f       	subi	r18, 0xFC	; 252
    1828:	3f 4f       	sbci	r19, 0xFF	; 255
    182a:	84 2f       	mov	r24, r20
    182c:	69 2f       	mov	r22, r25
    182e:	a9 01       	movw	r20, r18
    1830:	0e 94 0e 0b 	call	0x161c	; 0x161c <DIO_enu_Get_Pin_Value>
			if(local_Pin_State == LOW)
			{

				local_Pressedkey = local_KPD_Arr[local_row_Idx][local_colom_Idx];

				while(local_Pin_State == LOW)
    1834:	8c 81       	ldd	r24, Y+4	; 0x04
    1836:	88 23       	and	r24, r24
    1838:	19 f3       	breq	.-58     	; 0x1800 <KPD_GET_PRESSED+0xa8>
				{
					DIO_enu_Get_Pin_Value(local_Rows_Config[local_row_Idx][SET_PORT_NUM], local_Rows_Config[local_row_Idx][SET_PIN_NUM], &local_Pin_State);

				}
				return local_Pressedkey;
    183a:	8b 81       	ldd	r24, Y+3	; 0x03
    183c:	8d 83       	std	Y+5, r24	; 0x05
    183e:	27 c0       	rjmp	.+78     	; 0x188e <KPD_GET_PRESSED+0x136>
	for(local_colom_Idx = 0; local_colom_Idx < COLOM_NUM; local_colom_Idx++)
	{

		DIO_enu_Set_Pin_Value(local_ARR_Coloms_Config[local_colom_Idx][SET_PORT_NUM], local_ARR_Coloms_Config[local_colom_Idx][SET_PIN_NUM], LOW);

		for(local_row_Idx = 0; local_row_Idx < ROW_NUM; local_row_Idx++)
    1840:	89 81       	ldd	r24, Y+1	; 0x01
    1842:	8f 5f       	subi	r24, 0xFF	; 255
    1844:	89 83       	std	Y+1, r24	; 0x01
    1846:	89 81       	ldd	r24, Y+1	; 0x01
    1848:	84 30       	cpi	r24, 0x04	; 4
    184a:	08 f4       	brcc	.+2      	; 0x184e <KPD_GET_PRESSED+0xf6>
    184c:	a9 cf       	rjmp	.-174    	; 0x17a0 <KPD_GET_PRESSED+0x48>
				}
				return local_Pressedkey;
			}
		}

		DIO_enu_Set_Pin_Value(local_ARR_Coloms_Config[local_colom_Idx][SET_PORT_NUM], local_ARR_Coloms_Config[local_colom_Idx][SET_PIN_NUM], HIGH);
    184e:	8a 81       	ldd	r24, Y+2	; 0x02
    1850:	88 2f       	mov	r24, r24
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	88 0f       	add	r24, r24
    1856:	99 1f       	adc	r25, r25
    1858:	fc 01       	movw	r30, r24
    185a:	e6 56       	subi	r30, 0x66	; 102
    185c:	fe 4f       	sbci	r31, 0xFE	; 254
    185e:	20 81       	ld	r18, Z
    1860:	8a 81       	ldd	r24, Y+2	; 0x02
    1862:	88 2f       	mov	r24, r24
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	88 0f       	add	r24, r24
    1868:	99 1f       	adc	r25, r25
    186a:	fc 01       	movw	r30, r24
    186c:	e5 56       	subi	r30, 0x65	; 101
    186e:	fe 4f       	sbci	r31, 0xFE	; 254
    1870:	90 81       	ld	r25, Z
    1872:	82 2f       	mov	r24, r18
    1874:	69 2f       	mov	r22, r25
    1876:	41 e0       	ldi	r20, 0x01	; 1
    1878:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_enu_Set_Pin_Value>
											   {KPD_ROW2_PORT, KPD_ROW2_PIN},
											   {KPD_ROW3_PORT, KPD_ROW3_PIN}};



	for(local_colom_Idx = 0; local_colom_Idx < COLOM_NUM; local_colom_Idx++)
    187c:	8a 81       	ldd	r24, Y+2	; 0x02
    187e:	8f 5f       	subi	r24, 0xFF	; 255
    1880:	8a 83       	std	Y+2, r24	; 0x02
    1882:	8a 81       	ldd	r24, Y+2	; 0x02
    1884:	84 30       	cpi	r24, 0x04	; 4
    1886:	08 f4       	brcc	.+2      	; 0x188a <KPD_GET_PRESSED+0x132>
    1888:	72 cf       	rjmp	.-284    	; 0x176e <KPD_GET_PRESSED+0x16>
		DIO_enu_Set_Pin_Value(local_ARR_Coloms_Config[local_colom_Idx][SET_PORT_NUM], local_ARR_Coloms_Config[local_colom_Idx][SET_PIN_NUM], HIGH);

	}


	return local_Pressedkey;
    188a:	8b 81       	ldd	r24, Y+3	; 0x03
    188c:	8d 83       	std	Y+5, r24	; 0x05
    188e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1890:	0f 90       	pop	r0
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	0f 90       	pop	r0
    189a:	cf 91       	pop	r28
    189c:	df 91       	pop	r29
    189e:	08 95       	ret

000018a0 <LCD_enu_intiat>:

#include "util/delay.h"


ES_t LCD_enu_intiat(void)
{
    18a0:	df 93       	push	r29
    18a2:	cf 93       	push	r28
    18a4:	cd b7       	in	r28, 0x3d	; 61
    18a6:	de b7       	in	r29, 0x3e	; 62
    18a8:	e9 97       	sbiw	r28, 0x39	; 57
    18aa:	0f b6       	in	r0, 0x3f	; 63
    18ac:	f8 94       	cli
    18ae:	de bf       	out	0x3e, r29	; 62
    18b0:	0f be       	out	0x3f, r0	; 63
    18b2:	cd bf       	out	0x3d, r28	; 61
	ES_t local_error_state = ES_NOK;
    18b4:	19 ae       	std	Y+57, r1	; 0x39
    18b6:	80 e0       	ldi	r24, 0x00	; 0
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	ac e0       	ldi	r26, 0x0C	; 12
    18bc:	b2 e4       	ldi	r27, 0x42	; 66
    18be:	8d ab       	std	Y+53, r24	; 0x35
    18c0:	9e ab       	std	Y+54, r25	; 0x36
    18c2:	af ab       	std	Y+55, r26	; 0x37
    18c4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18c6:	6d a9       	ldd	r22, Y+53	; 0x35
    18c8:	7e a9       	ldd	r23, Y+54	; 0x36
    18ca:	8f a9       	ldd	r24, Y+55	; 0x37
    18cc:	98 ad       	ldd	r25, Y+56	; 0x38
    18ce:	20 e0       	ldi	r18, 0x00	; 0
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	4a e7       	ldi	r20, 0x7A	; 122
    18d4:	53 e4       	ldi	r21, 0x43	; 67
    18d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18da:	dc 01       	movw	r26, r24
    18dc:	cb 01       	movw	r24, r22
    18de:	89 ab       	std	Y+49, r24	; 0x31
    18e0:	9a ab       	std	Y+50, r25	; 0x32
    18e2:	ab ab       	std	Y+51, r26	; 0x33
    18e4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    18e6:	69 a9       	ldd	r22, Y+49	; 0x31
    18e8:	7a a9       	ldd	r23, Y+50	; 0x32
    18ea:	8b a9       	ldd	r24, Y+51	; 0x33
    18ec:	9c a9       	ldd	r25, Y+52	; 0x34
    18ee:	20 e0       	ldi	r18, 0x00	; 0
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	40 e8       	ldi	r20, 0x80	; 128
    18f4:	5f e3       	ldi	r21, 0x3F	; 63
    18f6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    18fa:	88 23       	and	r24, r24
    18fc:	2c f4       	brge	.+10     	; 0x1908 <LCD_enu_intiat+0x68>
		__ticks = 1;
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	98 ab       	std	Y+48, r25	; 0x30
    1904:	8f a7       	std	Y+47, r24	; 0x2f
    1906:	3f c0       	rjmp	.+126    	; 0x1986 <LCD_enu_intiat+0xe6>
	else if (__tmp > 65535)
    1908:	69 a9       	ldd	r22, Y+49	; 0x31
    190a:	7a a9       	ldd	r23, Y+50	; 0x32
    190c:	8b a9       	ldd	r24, Y+51	; 0x33
    190e:	9c a9       	ldd	r25, Y+52	; 0x34
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	3f ef       	ldi	r19, 0xFF	; 255
    1914:	4f e7       	ldi	r20, 0x7F	; 127
    1916:	57 e4       	ldi	r21, 0x47	; 71
    1918:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    191c:	18 16       	cp	r1, r24
    191e:	4c f5       	brge	.+82     	; 0x1972 <LCD_enu_intiat+0xd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1920:	6d a9       	ldd	r22, Y+53	; 0x35
    1922:	7e a9       	ldd	r23, Y+54	; 0x36
    1924:	8f a9       	ldd	r24, Y+55	; 0x37
    1926:	98 ad       	ldd	r25, Y+56	; 0x38
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	40 e2       	ldi	r20, 0x20	; 32
    192e:	51 e4       	ldi	r21, 0x41	; 65
    1930:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1934:	dc 01       	movw	r26, r24
    1936:	cb 01       	movw	r24, r22
    1938:	bc 01       	movw	r22, r24
    193a:	cd 01       	movw	r24, r26
    193c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1940:	dc 01       	movw	r26, r24
    1942:	cb 01       	movw	r24, r22
    1944:	98 ab       	std	Y+48, r25	; 0x30
    1946:	8f a7       	std	Y+47, r24	; 0x2f
    1948:	0f c0       	rjmp	.+30     	; 0x1968 <LCD_enu_intiat+0xc8>
    194a:	89 e1       	ldi	r24, 0x19	; 25
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	9e a7       	std	Y+46, r25	; 0x2e
    1950:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1952:	8d a5       	ldd	r24, Y+45	; 0x2d
    1954:	9e a5       	ldd	r25, Y+46	; 0x2e
    1956:	01 97       	sbiw	r24, 0x01	; 1
    1958:	f1 f7       	brne	.-4      	; 0x1956 <LCD_enu_intiat+0xb6>
    195a:	9e a7       	std	Y+46, r25	; 0x2e
    195c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    195e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1960:	98 a9       	ldd	r25, Y+48	; 0x30
    1962:	01 97       	sbiw	r24, 0x01	; 1
    1964:	98 ab       	std	Y+48, r25	; 0x30
    1966:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1968:	8f a5       	ldd	r24, Y+47	; 0x2f
    196a:	98 a9       	ldd	r25, Y+48	; 0x30
    196c:	00 97       	sbiw	r24, 0x00	; 0
    196e:	69 f7       	brne	.-38     	; 0x194a <LCD_enu_intiat+0xaa>
    1970:	14 c0       	rjmp	.+40     	; 0x199a <LCD_enu_intiat+0xfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1972:	69 a9       	ldd	r22, Y+49	; 0x31
    1974:	7a a9       	ldd	r23, Y+50	; 0x32
    1976:	8b a9       	ldd	r24, Y+51	; 0x33
    1978:	9c a9       	ldd	r25, Y+52	; 0x34
    197a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    197e:	dc 01       	movw	r26, r24
    1980:	cb 01       	movw	r24, r22
    1982:	98 ab       	std	Y+48, r25	; 0x30
    1984:	8f a7       	std	Y+47, r24	; 0x2f
    1986:	8f a5       	ldd	r24, Y+47	; 0x2f
    1988:	98 a9       	ldd	r25, Y+48	; 0x30
    198a:	9c a7       	std	Y+44, r25	; 0x2c
    198c:	8b a7       	std	Y+43, r24	; 0x2b
    198e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1990:	9c a5       	ldd	r25, Y+44	; 0x2c
    1992:	01 97       	sbiw	r24, 0x01	; 1
    1994:	f1 f7       	brne	.-4      	; 0x1992 <LCD_enu_intiat+0xf2>
    1996:	9c a7       	std	Y+44, r25	; 0x2c
    1998:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(35);

	DIO_enu_Set_Pin_Dir(RS_PORT, RS_PIN, OUTPUT);
    199a:	82 e0       	ldi	r24, 0x02	; 2
    199c:	60 e0       	ldi	r22, 0x00	; 0
    199e:	41 e0       	ldi	r20, 0x01	; 1
    19a0:	0e 94 a8 08 	call	0x1150	; 0x1150 <DIO_enu_Set_Pin_Dir>
	DIO_enu_Set_Pin_Dir(RW_PORT, RW_PIN, OUTPUT);
    19a4:	82 e0       	ldi	r24, 0x02	; 2
    19a6:	61 e0       	ldi	r22, 0x01	; 1
    19a8:	41 e0       	ldi	r20, 0x01	; 1
    19aa:	0e 94 a8 08 	call	0x1150	; 0x1150 <DIO_enu_Set_Pin_Dir>
	DIO_enu_Set_Pin_Dir(EN_PORT, EN_PIN, OUTPUT);
    19ae:	82 e0       	ldi	r24, 0x02	; 2
    19b0:	63 e0       	ldi	r22, 0x03	; 3
    19b2:	41 e0       	ldi	r20, 0x01	; 1
    19b4:	0e 94 a8 08 	call	0x1150	; 0x1150 <DIO_enu_Set_Pin_Dir>



	DIO_enu_Set_Pin_Dir(D7_PORT, D7_PIN, OUTPUT);
    19b8:	82 e0       	ldi	r24, 0x02	; 2
    19ba:	64 e0       	ldi	r22, 0x04	; 4
    19bc:	41 e0       	ldi	r20, 0x01	; 1
    19be:	0e 94 a8 08 	call	0x1150	; 0x1150 <DIO_enu_Set_Pin_Dir>
	DIO_enu_Set_Pin_Dir(D6_PORT, D6_PIN, OUTPUT);
    19c2:	82 e0       	ldi	r24, 0x02	; 2
    19c4:	66 e0       	ldi	r22, 0x06	; 6
    19c6:	41 e0       	ldi	r20, 0x01	; 1
    19c8:	0e 94 a8 08 	call	0x1150	; 0x1150 <DIO_enu_Set_Pin_Dir>
	DIO_enu_Set_Pin_Dir(D5_PORT, D5_PIN, OUTPUT);
    19cc:	82 e0       	ldi	r24, 0x02	; 2
    19ce:	67 e0       	ldi	r22, 0x07	; 7
    19d0:	41 e0       	ldi	r20, 0x01	; 1
    19d2:	0e 94 a8 08 	call	0x1150	; 0x1150 <DIO_enu_Set_Pin_Dir>
	DIO_enu_Set_Pin_Dir(D4_PORT, D4_PIN, OUTPUT);
    19d6:	83 e0       	ldi	r24, 0x03	; 3
    19d8:	60 e0       	ldi	r22, 0x00	; 0
    19da:	41 e0       	ldi	r20, 0x01	; 1
    19dc:	0e 94 a8 08 	call	0x1150	; 0x1150 <DIO_enu_Set_Pin_Dir>

#if LCD_MODE == EGIHT_BIT
	DIO_enu_Set_Pin_Dir(D3_PORT, D3_PIN, OUTPUT);
    19e0:	83 e0       	ldi	r24, 0x03	; 3
    19e2:	62 e0       	ldi	r22, 0x02	; 2
    19e4:	41 e0       	ldi	r20, 0x01	; 1
    19e6:	0e 94 a8 08 	call	0x1150	; 0x1150 <DIO_enu_Set_Pin_Dir>
	DIO_enu_Set_Pin_Dir(D2_PORT, D2_PIN, OUTPUT);
    19ea:	83 e0       	ldi	r24, 0x03	; 3
    19ec:	63 e0       	ldi	r22, 0x03	; 3
    19ee:	41 e0       	ldi	r20, 0x01	; 1
    19f0:	0e 94 a8 08 	call	0x1150	; 0x1150 <DIO_enu_Set_Pin_Dir>
	DIO_enu_Set_Pin_Dir(D1_PORT, D1_PIN, OUTPUT);
    19f4:	83 e0       	ldi	r24, 0x03	; 3
    19f6:	65 e0       	ldi	r22, 0x05	; 5
    19f8:	41 e0       	ldi	r20, 0x01	; 1
    19fa:	0e 94 a8 08 	call	0x1150	; 0x1150 <DIO_enu_Set_Pin_Dir>
	DIO_enu_Set_Pin_Dir(D0_PORT, D0_PIN, OUTPUT);
    19fe:	83 e0       	ldi	r24, 0x03	; 3
    1a00:	67 e0       	ldi	r22, 0x07	; 7
    1a02:	41 e0       	ldi	r20, 0x01	; 1
    1a04:	0e 94 a8 08 	call	0x1150	; 0x1150 <DIO_enu_Set_Pin_Dir>

	LCD_Send_Command(0x38);
    1a08:	88 e3       	ldi	r24, 0x38	; 56
    1a0a:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <LCD_Send_Command>
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	a0 e8       	ldi	r26, 0x80	; 128
    1a14:	bf e3       	ldi	r27, 0x3F	; 63
    1a16:	8f a3       	std	Y+39, r24	; 0x27
    1a18:	98 a7       	std	Y+40, r25	; 0x28
    1a1a:	a9 a7       	std	Y+41, r26	; 0x29
    1a1c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a1e:	6f a1       	ldd	r22, Y+39	; 0x27
    1a20:	78 a5       	ldd	r23, Y+40	; 0x28
    1a22:	89 a5       	ldd	r24, Y+41	; 0x29
    1a24:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	4a e7       	ldi	r20, 0x7A	; 122
    1a2c:	53 e4       	ldi	r21, 0x43	; 67
    1a2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a32:	dc 01       	movw	r26, r24
    1a34:	cb 01       	movw	r24, r22
    1a36:	8b a3       	std	Y+35, r24	; 0x23
    1a38:	9c a3       	std	Y+36, r25	; 0x24
    1a3a:	ad a3       	std	Y+37, r26	; 0x25
    1a3c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a3e:	6b a1       	ldd	r22, Y+35	; 0x23
    1a40:	7c a1       	ldd	r23, Y+36	; 0x24
    1a42:	8d a1       	ldd	r24, Y+37	; 0x25
    1a44:	9e a1       	ldd	r25, Y+38	; 0x26
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	40 e8       	ldi	r20, 0x80	; 128
    1a4c:	5f e3       	ldi	r21, 0x3F	; 63
    1a4e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1a52:	88 23       	and	r24, r24
    1a54:	2c f4       	brge	.+10     	; 0x1a60 <LCD_enu_intiat+0x1c0>
		__ticks = 1;
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	9a a3       	std	Y+34, r25	; 0x22
    1a5c:	89 a3       	std	Y+33, r24	; 0x21
    1a5e:	3f c0       	rjmp	.+126    	; 0x1ade <LCD_enu_intiat+0x23e>
	else if (__tmp > 65535)
    1a60:	6b a1       	ldd	r22, Y+35	; 0x23
    1a62:	7c a1       	ldd	r23, Y+36	; 0x24
    1a64:	8d a1       	ldd	r24, Y+37	; 0x25
    1a66:	9e a1       	ldd	r25, Y+38	; 0x26
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	3f ef       	ldi	r19, 0xFF	; 255
    1a6c:	4f e7       	ldi	r20, 0x7F	; 127
    1a6e:	57 e4       	ldi	r21, 0x47	; 71
    1a70:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1a74:	18 16       	cp	r1, r24
    1a76:	4c f5       	brge	.+82     	; 0x1aca <LCD_enu_intiat+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a78:	6f a1       	ldd	r22, Y+39	; 0x27
    1a7a:	78 a5       	ldd	r23, Y+40	; 0x28
    1a7c:	89 a5       	ldd	r24, Y+41	; 0x29
    1a7e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a80:	20 e0       	ldi	r18, 0x00	; 0
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	40 e2       	ldi	r20, 0x20	; 32
    1a86:	51 e4       	ldi	r21, 0x41	; 65
    1a88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	cb 01       	movw	r24, r22
    1a90:	bc 01       	movw	r22, r24
    1a92:	cd 01       	movw	r24, r26
    1a94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a98:	dc 01       	movw	r26, r24
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	9a a3       	std	Y+34, r25	; 0x22
    1a9e:	89 a3       	std	Y+33, r24	; 0x21
    1aa0:	0f c0       	rjmp	.+30     	; 0x1ac0 <LCD_enu_intiat+0x220>
    1aa2:	89 e1       	ldi	r24, 0x19	; 25
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	98 a3       	std	Y+32, r25	; 0x20
    1aa8:	8f 8f       	std	Y+31, r24	; 0x1f
    1aaa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1aac:	98 a1       	ldd	r25, Y+32	; 0x20
    1aae:	01 97       	sbiw	r24, 0x01	; 1
    1ab0:	f1 f7       	brne	.-4      	; 0x1aae <LCD_enu_intiat+0x20e>
    1ab2:	98 a3       	std	Y+32, r25	; 0x20
    1ab4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab6:	89 a1       	ldd	r24, Y+33	; 0x21
    1ab8:	9a a1       	ldd	r25, Y+34	; 0x22
    1aba:	01 97       	sbiw	r24, 0x01	; 1
    1abc:	9a a3       	std	Y+34, r25	; 0x22
    1abe:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac0:	89 a1       	ldd	r24, Y+33	; 0x21
    1ac2:	9a a1       	ldd	r25, Y+34	; 0x22
    1ac4:	00 97       	sbiw	r24, 0x00	; 0
    1ac6:	69 f7       	brne	.-38     	; 0x1aa2 <LCD_enu_intiat+0x202>
    1ac8:	14 c0       	rjmp	.+40     	; 0x1af2 <LCD_enu_intiat+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aca:	6b a1       	ldd	r22, Y+35	; 0x23
    1acc:	7c a1       	ldd	r23, Y+36	; 0x24
    1ace:	8d a1       	ldd	r24, Y+37	; 0x25
    1ad0:	9e a1       	ldd	r25, Y+38	; 0x26
    1ad2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22
    1ada:	9a a3       	std	Y+34, r25	; 0x22
    1adc:	89 a3       	std	Y+33, r24	; 0x21
    1ade:	89 a1       	ldd	r24, Y+33	; 0x21
    1ae0:	9a a1       	ldd	r25, Y+34	; 0x22
    1ae2:	9e 8f       	std	Y+30, r25	; 0x1e
    1ae4:	8d 8f       	std	Y+29, r24	; 0x1d
    1ae6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ae8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1aea:	01 97       	sbiw	r24, 0x01	; 1
    1aec:	f1 f7       	brne	.-4      	; 0x1aea <LCD_enu_intiat+0x24a>
    1aee:	9e 8f       	std	Y+30, r25	; 0x1e
    1af0:	8d 8f       	std	Y+29, r24	; 0x1d
#elif LCD_MODE == FOUR_BIT
	LCD_Send_Command(0x28);

#endif
	_delay_ms(1);
	LCD_Send_Command(0x0f);
    1af2:	8f e0       	ldi	r24, 0x0F	; 15
    1af4:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <LCD_Send_Command>
    1af8:	80 e0       	ldi	r24, 0x00	; 0
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	a0 e8       	ldi	r26, 0x80	; 128
    1afe:	bf e3       	ldi	r27, 0x3F	; 63
    1b00:	89 8f       	std	Y+25, r24	; 0x19
    1b02:	9a 8f       	std	Y+26, r25	; 0x1a
    1b04:	ab 8f       	std	Y+27, r26	; 0x1b
    1b06:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b08:	69 8d       	ldd	r22, Y+25	; 0x19
    1b0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	4a e7       	ldi	r20, 0x7A	; 122
    1b16:	53 e4       	ldi	r21, 0x43	; 67
    1b18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	cb 01       	movw	r24, r22
    1b20:	8d 8b       	std	Y+21, r24	; 0x15
    1b22:	9e 8b       	std	Y+22, r25	; 0x16
    1b24:	af 8b       	std	Y+23, r26	; 0x17
    1b26:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b28:	6d 89       	ldd	r22, Y+21	; 0x15
    1b2a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b2c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b2e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b30:	20 e0       	ldi	r18, 0x00	; 0
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	40 e8       	ldi	r20, 0x80	; 128
    1b36:	5f e3       	ldi	r21, 0x3F	; 63
    1b38:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1b3c:	88 23       	and	r24, r24
    1b3e:	2c f4       	brge	.+10     	; 0x1b4a <LCD_enu_intiat+0x2aa>
		__ticks = 1;
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	9c 8b       	std	Y+20, r25	; 0x14
    1b46:	8b 8b       	std	Y+19, r24	; 0x13
    1b48:	3f c0       	rjmp	.+126    	; 0x1bc8 <LCD_enu_intiat+0x328>
	else if (__tmp > 65535)
    1b4a:	6d 89       	ldd	r22, Y+21	; 0x15
    1b4c:	7e 89       	ldd	r23, Y+22	; 0x16
    1b4e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b50:	98 8d       	ldd	r25, Y+24	; 0x18
    1b52:	20 e0       	ldi	r18, 0x00	; 0
    1b54:	3f ef       	ldi	r19, 0xFF	; 255
    1b56:	4f e7       	ldi	r20, 0x7F	; 127
    1b58:	57 e4       	ldi	r21, 0x47	; 71
    1b5a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1b5e:	18 16       	cp	r1, r24
    1b60:	4c f5       	brge	.+82     	; 0x1bb4 <LCD_enu_intiat+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b62:	69 8d       	ldd	r22, Y+25	; 0x19
    1b64:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b66:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b68:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	40 e2       	ldi	r20, 0x20	; 32
    1b70:	51 e4       	ldi	r21, 0x41	; 65
    1b72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	bc 01       	movw	r22, r24
    1b7c:	cd 01       	movw	r24, r26
    1b7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b82:	dc 01       	movw	r26, r24
    1b84:	cb 01       	movw	r24, r22
    1b86:	9c 8b       	std	Y+20, r25	; 0x14
    1b88:	8b 8b       	std	Y+19, r24	; 0x13
    1b8a:	0f c0       	rjmp	.+30     	; 0x1baa <LCD_enu_intiat+0x30a>
    1b8c:	89 e1       	ldi	r24, 0x19	; 25
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	9a 8b       	std	Y+18, r25	; 0x12
    1b92:	89 8b       	std	Y+17, r24	; 0x11
    1b94:	89 89       	ldd	r24, Y+17	; 0x11
    1b96:	9a 89       	ldd	r25, Y+18	; 0x12
    1b98:	01 97       	sbiw	r24, 0x01	; 1
    1b9a:	f1 f7       	brne	.-4      	; 0x1b98 <LCD_enu_intiat+0x2f8>
    1b9c:	9a 8b       	std	Y+18, r25	; 0x12
    1b9e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ba0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ba2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ba4:	01 97       	sbiw	r24, 0x01	; 1
    1ba6:	9c 8b       	std	Y+20, r25	; 0x14
    1ba8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1baa:	8b 89       	ldd	r24, Y+19	; 0x13
    1bac:	9c 89       	ldd	r25, Y+20	; 0x14
    1bae:	00 97       	sbiw	r24, 0x00	; 0
    1bb0:	69 f7       	brne	.-38     	; 0x1b8c <LCD_enu_intiat+0x2ec>
    1bb2:	14 c0       	rjmp	.+40     	; 0x1bdc <LCD_enu_intiat+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bb4:	6d 89       	ldd	r22, Y+21	; 0x15
    1bb6:	7e 89       	ldd	r23, Y+22	; 0x16
    1bb8:	8f 89       	ldd	r24, Y+23	; 0x17
    1bba:	98 8d       	ldd	r25, Y+24	; 0x18
    1bbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	cb 01       	movw	r24, r22
    1bc4:	9c 8b       	std	Y+20, r25	; 0x14
    1bc6:	8b 8b       	std	Y+19, r24	; 0x13
    1bc8:	8b 89       	ldd	r24, Y+19	; 0x13
    1bca:	9c 89       	ldd	r25, Y+20	; 0x14
    1bcc:	98 8b       	std	Y+16, r25	; 0x10
    1bce:	8f 87       	std	Y+15, r24	; 0x0f
    1bd0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bd2:	98 89       	ldd	r25, Y+16	; 0x10
    1bd4:	01 97       	sbiw	r24, 0x01	; 1
    1bd6:	f1 f7       	brne	.-4      	; 0x1bd4 <LCD_enu_intiat+0x334>
    1bd8:	98 8b       	std	Y+16, r25	; 0x10
    1bda:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_Send_Command(0x01);
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <LCD_Send_Command>
    1be2:	80 e0       	ldi	r24, 0x00	; 0
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	a0 e0       	ldi	r26, 0x00	; 0
    1be8:	b0 e4       	ldi	r27, 0x40	; 64
    1bea:	8b 87       	std	Y+11, r24	; 0x0b
    1bec:	9c 87       	std	Y+12, r25	; 0x0c
    1bee:	ad 87       	std	Y+13, r26	; 0x0d
    1bf0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bf2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bf4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bf6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bf8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bfa:	20 e0       	ldi	r18, 0x00	; 0
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	4a e7       	ldi	r20, 0x7A	; 122
    1c00:	53 e4       	ldi	r21, 0x43	; 67
    1c02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c06:	dc 01       	movw	r26, r24
    1c08:	cb 01       	movw	r24, r22
    1c0a:	8f 83       	std	Y+7, r24	; 0x07
    1c0c:	98 87       	std	Y+8, r25	; 0x08
    1c0e:	a9 87       	std	Y+9, r26	; 0x09
    1c10:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c12:	6f 81       	ldd	r22, Y+7	; 0x07
    1c14:	78 85       	ldd	r23, Y+8	; 0x08
    1c16:	89 85       	ldd	r24, Y+9	; 0x09
    1c18:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c1a:	20 e0       	ldi	r18, 0x00	; 0
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	40 e8       	ldi	r20, 0x80	; 128
    1c20:	5f e3       	ldi	r21, 0x3F	; 63
    1c22:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1c26:	88 23       	and	r24, r24
    1c28:	2c f4       	brge	.+10     	; 0x1c34 <LCD_enu_intiat+0x394>
		__ticks = 1;
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	9e 83       	std	Y+6, r25	; 0x06
    1c30:	8d 83       	std	Y+5, r24	; 0x05
    1c32:	3f c0       	rjmp	.+126    	; 0x1cb2 <LCD_enu_intiat+0x412>
	else if (__tmp > 65535)
    1c34:	6f 81       	ldd	r22, Y+7	; 0x07
    1c36:	78 85       	ldd	r23, Y+8	; 0x08
    1c38:	89 85       	ldd	r24, Y+9	; 0x09
    1c3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	3f ef       	ldi	r19, 0xFF	; 255
    1c40:	4f e7       	ldi	r20, 0x7F	; 127
    1c42:	57 e4       	ldi	r21, 0x47	; 71
    1c44:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1c48:	18 16       	cp	r1, r24
    1c4a:	4c f5       	brge	.+82     	; 0x1c9e <LCD_enu_intiat+0x3fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c50:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c52:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c54:	20 e0       	ldi	r18, 0x00	; 0
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	40 e2       	ldi	r20, 0x20	; 32
    1c5a:	51 e4       	ldi	r21, 0x41	; 65
    1c5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c60:	dc 01       	movw	r26, r24
    1c62:	cb 01       	movw	r24, r22
    1c64:	bc 01       	movw	r22, r24
    1c66:	cd 01       	movw	r24, r26
    1c68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	9e 83       	std	Y+6, r25	; 0x06
    1c72:	8d 83       	std	Y+5, r24	; 0x05
    1c74:	0f c0       	rjmp	.+30     	; 0x1c94 <LCD_enu_intiat+0x3f4>
    1c76:	89 e1       	ldi	r24, 0x19	; 25
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	9c 83       	std	Y+4, r25	; 0x04
    1c7c:	8b 83       	std	Y+3, r24	; 0x03
    1c7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c80:	9c 81       	ldd	r25, Y+4	; 0x04
    1c82:	01 97       	sbiw	r24, 0x01	; 1
    1c84:	f1 f7       	brne	.-4      	; 0x1c82 <LCD_enu_intiat+0x3e2>
    1c86:	9c 83       	std	Y+4, r25	; 0x04
    1c88:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c8e:	01 97       	sbiw	r24, 0x01	; 1
    1c90:	9e 83       	std	Y+6, r25	; 0x06
    1c92:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c94:	8d 81       	ldd	r24, Y+5	; 0x05
    1c96:	9e 81       	ldd	r25, Y+6	; 0x06
    1c98:	00 97       	sbiw	r24, 0x00	; 0
    1c9a:	69 f7       	brne	.-38     	; 0x1c76 <LCD_enu_intiat+0x3d6>
    1c9c:	14 c0       	rjmp	.+40     	; 0x1cc6 <LCD_enu_intiat+0x426>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1ca0:	78 85       	ldd	r23, Y+8	; 0x08
    1ca2:	89 85       	ldd	r24, Y+9	; 0x09
    1ca4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1caa:	dc 01       	movw	r26, r24
    1cac:	cb 01       	movw	r24, r22
    1cae:	9e 83       	std	Y+6, r25	; 0x06
    1cb0:	8d 83       	std	Y+5, r24	; 0x05
    1cb2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb4:	9e 81       	ldd	r25, Y+6	; 0x06
    1cb6:	9a 83       	std	Y+2, r25	; 0x02
    1cb8:	89 83       	std	Y+1, r24	; 0x01
    1cba:	89 81       	ldd	r24, Y+1	; 0x01
    1cbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1cbe:	01 97       	sbiw	r24, 0x01	; 1
    1cc0:	f1 f7       	brne	.-4      	; 0x1cbe <LCD_enu_intiat+0x41e>
    1cc2:	9a 83       	std	Y+2, r25	; 0x02
    1cc4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_Send_Command(0x06);
    1cc6:	86 e0       	ldi	r24, 0x06	; 6
    1cc8:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <LCD_Send_Command>

	return local_error_state;
    1ccc:	89 ad       	ldd	r24, Y+57	; 0x39

}
    1cce:	e9 96       	adiw	r28, 0x39	; 57
    1cd0:	0f b6       	in	r0, 0x3f	; 63
    1cd2:	f8 94       	cli
    1cd4:	de bf       	out	0x3e, r29	; 62
    1cd6:	0f be       	out	0x3f, r0	; 63
    1cd8:	cd bf       	out	0x3d, r28	; 61
    1cda:	cf 91       	pop	r28
    1cdc:	df 91       	pop	r29
    1cde:	08 95       	ret

00001ce0 <LCD_enu_Display_char>:




ES_t LCD_enu_Display_char(u8 Copy_data)
{
    1ce0:	df 93       	push	r29
    1ce2:	cf 93       	push	r28
    1ce4:	00 d0       	rcall	.+0      	; 0x1ce6 <LCD_enu_Display_char+0x6>
    1ce6:	cd b7       	in	r28, 0x3d	; 61
    1ce8:	de b7       	in	r29, 0x3e	; 62
    1cea:	8a 83       	std	Y+2, r24	; 0x02
	ES_t local_error_state = ES_NOK;
    1cec:	19 82       	std	Y+1, r1	; 0x01


	DIO_enu_Set_Pin_Value(RS_PORT, RS_PIN, HIGH);
    1cee:	82 e0       	ldi	r24, 0x02	; 2
    1cf0:	60 e0       	ldi	r22, 0x00	; 0
    1cf2:	41 e0       	ldi	r20, 0x01	; 1
    1cf4:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_enu_Set_Pin_Value>

	lcd_latch(Copy_data);
    1cf8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfa:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <lcd_latch>


	return local_error_state;
    1cfe:	89 81       	ldd	r24, Y+1	; 0x01

}
    1d00:	0f 90       	pop	r0
    1d02:	0f 90       	pop	r0
    1d04:	cf 91       	pop	r28
    1d06:	df 91       	pop	r29
    1d08:	08 95       	ret

00001d0a <LCD_enu_Send_command>:




ES_t LCD_enu_Send_command(u8 Copy_command)
{
    1d0a:	df 93       	push	r29
    1d0c:	cf 93       	push	r28
    1d0e:	00 d0       	rcall	.+0      	; 0x1d10 <LCD_enu_Send_command+0x6>
    1d10:	cd b7       	in	r28, 0x3d	; 61
    1d12:	de b7       	in	r29, 0x3e	; 62
    1d14:	8a 83       	std	Y+2, r24	; 0x02
	ES_t local_error_state = ES_NOK;
    1d16:	19 82       	std	Y+1, r1	; 0x01

	// set rs selection	command
	DIO_enu_Set_Pin_Value(RS_PORT, RS_PIN, LOW);
    1d18:	82 e0       	ldi	r24, 0x02	; 2
    1d1a:	60 e0       	ldi	r22, 0x00	; 0
    1d1c:	40 e0       	ldi	r20, 0x00	; 0
    1d1e:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_enu_Set_Pin_Value>

	lcd_latch(Copy_command);
    1d22:	8a 81       	ldd	r24, Y+2	; 0x02
    1d24:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <lcd_latch>
	return local_error_state;
    1d28:	89 81       	ldd	r24, Y+1	; 0x01

}
    1d2a:	0f 90       	pop	r0
    1d2c:	0f 90       	pop	r0
    1d2e:	cf 91       	pop	r28
    1d30:	df 91       	pop	r29
    1d32:	08 95       	ret

00001d34 <lcd_latch>:


static void lcd_latch(u8 copy_data)
{
    1d34:	df 93       	push	r29
    1d36:	cf 93       	push	r28
    1d38:	cd b7       	in	r28, 0x3d	; 61
    1d3a:	de b7       	in	r29, 0x3e	; 62
    1d3c:	2f 97       	sbiw	r28, 0x0f	; 15
    1d3e:	0f b6       	in	r0, 0x3f	; 63
    1d40:	f8 94       	cli
    1d42:	de bf       	out	0x3e, r29	; 62
    1d44:	0f be       	out	0x3f, r0	; 63
    1d46:	cd bf       	out	0x3d, r28	; 61
    1d48:	8f 87       	std	Y+15, r24	; 0x0f
	// set rw as write operation
		DIO_enu_Set_Pin_Value(RW_PORT, RW_PIN, LOW);
    1d4a:	82 e0       	ldi	r24, 0x02	; 2
    1d4c:	61 e0       	ldi	r22, 0x01	; 1
    1d4e:	40 e0       	ldi	r20, 0x00	; 0
    1d50:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_enu_Set_Pin_Value>
		DIO_enu_Set_Pin_Value(EN_PORT, EN_PIN, LOW);
    1d54:	82 e0       	ldi	r24, 0x02	; 2
    1d56:	63 e0       	ldi	r22, 0x03	; 3
    1d58:	40 e0       	ldi	r20, 0x00	; 0
    1d5a:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_enu_Set_Pin_Value>


		DIO_enu_Set_Pin_Value(D7_PORT, D7_PIN,((copy_data >> 7) & 1));
    1d5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d60:	98 2f       	mov	r25, r24
    1d62:	99 1f       	adc	r25, r25
    1d64:	99 27       	eor	r25, r25
    1d66:	99 1f       	adc	r25, r25
    1d68:	82 e0       	ldi	r24, 0x02	; 2
    1d6a:	64 e0       	ldi	r22, 0x04	; 4
    1d6c:	49 2f       	mov	r20, r25
    1d6e:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_enu_Set_Pin_Value>
		DIO_enu_Set_Pin_Value(D6_PORT, D6_PIN,((copy_data >> 6) & 1));
    1d72:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d74:	82 95       	swap	r24
    1d76:	86 95       	lsr	r24
    1d78:	86 95       	lsr	r24
    1d7a:	83 70       	andi	r24, 0x03	; 3
    1d7c:	98 2f       	mov	r25, r24
    1d7e:	91 70       	andi	r25, 0x01	; 1
    1d80:	82 e0       	ldi	r24, 0x02	; 2
    1d82:	66 e0       	ldi	r22, 0x06	; 6
    1d84:	49 2f       	mov	r20, r25
    1d86:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_enu_Set_Pin_Value>
		DIO_enu_Set_Pin_Value(D5_PORT, D5_PIN,((copy_data >> 5) & 1));
    1d8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d8c:	82 95       	swap	r24
    1d8e:	86 95       	lsr	r24
    1d90:	87 70       	andi	r24, 0x07	; 7
    1d92:	98 2f       	mov	r25, r24
    1d94:	91 70       	andi	r25, 0x01	; 1
    1d96:	82 e0       	ldi	r24, 0x02	; 2
    1d98:	67 e0       	ldi	r22, 0x07	; 7
    1d9a:	49 2f       	mov	r20, r25
    1d9c:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_enu_Set_Pin_Value>
		DIO_enu_Set_Pin_Value(D4_PORT, D4_PIN,((copy_data >> 4) & 1));
    1da0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1da2:	82 95       	swap	r24
    1da4:	8f 70       	andi	r24, 0x0F	; 15
    1da6:	98 2f       	mov	r25, r24
    1da8:	91 70       	andi	r25, 0x01	; 1
    1daa:	83 e0       	ldi	r24, 0x03	; 3
    1dac:	60 e0       	ldi	r22, 0x00	; 0
    1dae:	49 2f       	mov	r20, r25
    1db0:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_enu_Set_Pin_Value>
		DIO_enu_Set_Pin_Value(D3_PORT, D3_PIN,((copy_data >> 3) & 1));
    1db4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1db6:	86 95       	lsr	r24
    1db8:	86 95       	lsr	r24
    1dba:	86 95       	lsr	r24
    1dbc:	98 2f       	mov	r25, r24
    1dbe:	91 70       	andi	r25, 0x01	; 1
    1dc0:	83 e0       	ldi	r24, 0x03	; 3
    1dc2:	62 e0       	ldi	r22, 0x02	; 2
    1dc4:	49 2f       	mov	r20, r25
    1dc6:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_enu_Set_Pin_Value>
		DIO_enu_Set_Pin_Value(D2_PORT, D2_PIN,((copy_data >> 2) & 1));
    1dca:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dcc:	86 95       	lsr	r24
    1dce:	86 95       	lsr	r24
    1dd0:	98 2f       	mov	r25, r24
    1dd2:	91 70       	andi	r25, 0x01	; 1
    1dd4:	83 e0       	ldi	r24, 0x03	; 3
    1dd6:	63 e0       	ldi	r22, 0x03	; 3
    1dd8:	49 2f       	mov	r20, r25
    1dda:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_enu_Set_Pin_Value>
		DIO_enu_Set_Pin_Value(D1_PORT, D1_PIN,((copy_data >> 1) & 1));
    1dde:	8f 85       	ldd	r24, Y+15	; 0x0f
    1de0:	86 95       	lsr	r24
    1de2:	98 2f       	mov	r25, r24
    1de4:	91 70       	andi	r25, 0x01	; 1
    1de6:	83 e0       	ldi	r24, 0x03	; 3
    1de8:	65 e0       	ldi	r22, 0x05	; 5
    1dea:	49 2f       	mov	r20, r25
    1dec:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_enu_Set_Pin_Value>
		DIO_enu_Set_Pin_Value(D0_PORT, D0_PIN,((copy_data >> 0) & 1));
    1df0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1df2:	98 2f       	mov	r25, r24
    1df4:	91 70       	andi	r25, 0x01	; 1
    1df6:	83 e0       	ldi	r24, 0x03	; 3
    1df8:	67 e0       	ldi	r22, 0x07	; 7
    1dfa:	49 2f       	mov	r20, r25
    1dfc:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_enu_Set_Pin_Value>


		DIO_enu_Set_Pin_Value(EN_PORT, EN_PIN, HIGH);
    1e00:	82 e0       	ldi	r24, 0x02	; 2
    1e02:	63 e0       	ldi	r22, 0x03	; 3
    1e04:	41 e0       	ldi	r20, 0x01	; 1
    1e06:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_enu_Set_Pin_Value>
    1e0a:	80 e0       	ldi	r24, 0x00	; 0
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	a0 e2       	ldi	r26, 0x20	; 32
    1e10:	b1 e4       	ldi	r27, 0x41	; 65
    1e12:	8b 87       	std	Y+11, r24	; 0x0b
    1e14:	9c 87       	std	Y+12, r25	; 0x0c
    1e16:	ad 87       	std	Y+13, r26	; 0x0d
    1e18:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e20:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e22:	20 e0       	ldi	r18, 0x00	; 0
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	4a e7       	ldi	r20, 0x7A	; 122
    1e28:	53 e4       	ldi	r21, 0x43	; 67
    1e2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e2e:	dc 01       	movw	r26, r24
    1e30:	cb 01       	movw	r24, r22
    1e32:	8f 83       	std	Y+7, r24	; 0x07
    1e34:	98 87       	std	Y+8, r25	; 0x08
    1e36:	a9 87       	std	Y+9, r26	; 0x09
    1e38:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e3c:	78 85       	ldd	r23, Y+8	; 0x08
    1e3e:	89 85       	ldd	r24, Y+9	; 0x09
    1e40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e42:	20 e0       	ldi	r18, 0x00	; 0
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	40 e8       	ldi	r20, 0x80	; 128
    1e48:	5f e3       	ldi	r21, 0x3F	; 63
    1e4a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1e4e:	88 23       	and	r24, r24
    1e50:	2c f4       	brge	.+10     	; 0x1e5c <lcd_latch+0x128>
		__ticks = 1;
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	9e 83       	std	Y+6, r25	; 0x06
    1e58:	8d 83       	std	Y+5, r24	; 0x05
    1e5a:	3f c0       	rjmp	.+126    	; 0x1eda <lcd_latch+0x1a6>
	else if (__tmp > 65535)
    1e5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e5e:	78 85       	ldd	r23, Y+8	; 0x08
    1e60:	89 85       	ldd	r24, Y+9	; 0x09
    1e62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	3f ef       	ldi	r19, 0xFF	; 255
    1e68:	4f e7       	ldi	r20, 0x7F	; 127
    1e6a:	57 e4       	ldi	r21, 0x47	; 71
    1e6c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1e70:	18 16       	cp	r1, r24
    1e72:	4c f5       	brge	.+82     	; 0x1ec6 <lcd_latch+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e74:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e76:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e78:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e7c:	20 e0       	ldi	r18, 0x00	; 0
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	40 e2       	ldi	r20, 0x20	; 32
    1e82:	51 e4       	ldi	r21, 0x41	; 65
    1e84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e88:	dc 01       	movw	r26, r24
    1e8a:	cb 01       	movw	r24, r22
    1e8c:	bc 01       	movw	r22, r24
    1e8e:	cd 01       	movw	r24, r26
    1e90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	9e 83       	std	Y+6, r25	; 0x06
    1e9a:	8d 83       	std	Y+5, r24	; 0x05
    1e9c:	0f c0       	rjmp	.+30     	; 0x1ebc <lcd_latch+0x188>
    1e9e:	89 e1       	ldi	r24, 0x19	; 25
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	9c 83       	std	Y+4, r25	; 0x04
    1ea4:	8b 83       	std	Y+3, r24	; 0x03
    1ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eaa:	01 97       	sbiw	r24, 0x01	; 1
    1eac:	f1 f7       	brne	.-4      	; 0x1eaa <lcd_latch+0x176>
    1eae:	9c 83       	std	Y+4, r25	; 0x04
    1eb0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eb2:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb4:	9e 81       	ldd	r25, Y+6	; 0x06
    1eb6:	01 97       	sbiw	r24, 0x01	; 1
    1eb8:	9e 83       	std	Y+6, r25	; 0x06
    1eba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ebc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ebe:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec0:	00 97       	sbiw	r24, 0x00	; 0
    1ec2:	69 f7       	brne	.-38     	; 0x1e9e <lcd_latch+0x16a>
    1ec4:	14 c0       	rjmp	.+40     	; 0x1eee <lcd_latch+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ec6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ec8:	78 85       	ldd	r23, Y+8	; 0x08
    1eca:	89 85       	ldd	r24, Y+9	; 0x09
    1ecc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ece:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed2:	dc 01       	movw	r26, r24
    1ed4:	cb 01       	movw	r24, r22
    1ed6:	9e 83       	std	Y+6, r25	; 0x06
    1ed8:	8d 83       	std	Y+5, r24	; 0x05
    1eda:	8d 81       	ldd	r24, Y+5	; 0x05
    1edc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ede:	9a 83       	std	Y+2, r25	; 0x02
    1ee0:	89 83       	std	Y+1, r24	; 0x01
    1ee2:	89 81       	ldd	r24, Y+1	; 0x01
    1ee4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ee6:	01 97       	sbiw	r24, 0x01	; 1
    1ee8:	f1 f7       	brne	.-4      	; 0x1ee6 <lcd_latch+0x1b2>
    1eea:	9a 83       	std	Y+2, r25	; 0x02
    1eec:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		DIO_enu_Set_Pin_Value(EN_PORT, EN_PIN, LOW);
    1eee:	82 e0       	ldi	r24, 0x02	; 2
    1ef0:	63 e0       	ldi	r22, 0x03	; 3
    1ef2:	40 e0       	ldi	r20, 0x00	; 0
    1ef4:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_enu_Set_Pin_Value>
}
    1ef8:	2f 96       	adiw	r28, 0x0f	; 15
    1efa:	0f b6       	in	r0, 0x3f	; 63
    1efc:	f8 94       	cli
    1efe:	de bf       	out	0x3e, r29	; 62
    1f00:	0f be       	out	0x3f, r0	; 63
    1f02:	cd bf       	out	0x3d, r28	; 61
    1f04:	cf 91       	pop	r28
    1f06:	df 91       	pop	r29
    1f08:	08 95       	ret

00001f0a <LCD_Send_Command>:




static inline void LCD_Send_Command(u8 Copy_command)
{
    1f0a:	df 93       	push	r29
    1f0c:	cf 93       	push	r28
    1f0e:	cd b7       	in	r28, 0x3d	; 61
    1f10:	de b7       	in	r29, 0x3e	; 62
    1f12:	2f 97       	sbiw	r28, 0x0f	; 15
    1f14:	0f b6       	in	r0, 0x3f	; 63
    1f16:	f8 94       	cli
    1f18:	de bf       	out	0x3e, r29	; 62
    1f1a:	0f be       	out	0x3f, r0	; 63
    1f1c:	cd bf       	out	0x3d, r28	; 61
    1f1e:	8f 87       	std	Y+15, r24	; 0x0f
		// set rs selection	command
		DIO_enu_Set_Pin_Value(RS_PORT, RS_PIN, LOW);
    1f20:	82 e0       	ldi	r24, 0x02	; 2
    1f22:	60 e0       	ldi	r22, 0x00	; 0
    1f24:	40 e0       	ldi	r20, 0x00	; 0
    1f26:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_enu_Set_Pin_Value>

		// set rw as write operation
		DIO_enu_Set_Pin_Value(RW_PORT, RW_PIN, LOW);
    1f2a:	82 e0       	ldi	r24, 0x02	; 2
    1f2c:	61 e0       	ldi	r22, 0x01	; 1
    1f2e:	40 e0       	ldi	r20, 0x00	; 0
    1f30:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_enu_Set_Pin_Value>
		DIO_enu_Set_Pin_Value(EN_PORT, EN_PIN, LOW);
    1f34:	82 e0       	ldi	r24, 0x02	; 2
    1f36:	63 e0       	ldi	r22, 0x03	; 3
    1f38:	40 e0       	ldi	r20, 0x00	; 0
    1f3a:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_enu_Set_Pin_Value>


		DIO_enu_Set_Pin_Value(D7_PORT, D7_PIN,((Copy_command >> 7) & 1));
    1f3e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f40:	98 2f       	mov	r25, r24
    1f42:	99 1f       	adc	r25, r25
    1f44:	99 27       	eor	r25, r25
    1f46:	99 1f       	adc	r25, r25
    1f48:	82 e0       	ldi	r24, 0x02	; 2
    1f4a:	64 e0       	ldi	r22, 0x04	; 4
    1f4c:	49 2f       	mov	r20, r25
    1f4e:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_enu_Set_Pin_Value>
		DIO_enu_Set_Pin_Value(D6_PORT, D6_PIN,((Copy_command >> 6) & 1));
    1f52:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f54:	82 95       	swap	r24
    1f56:	86 95       	lsr	r24
    1f58:	86 95       	lsr	r24
    1f5a:	83 70       	andi	r24, 0x03	; 3
    1f5c:	98 2f       	mov	r25, r24
    1f5e:	91 70       	andi	r25, 0x01	; 1
    1f60:	82 e0       	ldi	r24, 0x02	; 2
    1f62:	66 e0       	ldi	r22, 0x06	; 6
    1f64:	49 2f       	mov	r20, r25
    1f66:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_enu_Set_Pin_Value>
		DIO_enu_Set_Pin_Value(D5_PORT, D5_PIN,((Copy_command >> 5) & 1));
    1f6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f6c:	82 95       	swap	r24
    1f6e:	86 95       	lsr	r24
    1f70:	87 70       	andi	r24, 0x07	; 7
    1f72:	98 2f       	mov	r25, r24
    1f74:	91 70       	andi	r25, 0x01	; 1
    1f76:	82 e0       	ldi	r24, 0x02	; 2
    1f78:	67 e0       	ldi	r22, 0x07	; 7
    1f7a:	49 2f       	mov	r20, r25
    1f7c:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_enu_Set_Pin_Value>
		DIO_enu_Set_Pin_Value(D4_PORT, D4_PIN,((Copy_command >> 4) & 1));
    1f80:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f82:	82 95       	swap	r24
    1f84:	8f 70       	andi	r24, 0x0F	; 15
    1f86:	98 2f       	mov	r25, r24
    1f88:	91 70       	andi	r25, 0x01	; 1
    1f8a:	83 e0       	ldi	r24, 0x03	; 3
    1f8c:	60 e0       	ldi	r22, 0x00	; 0
    1f8e:	49 2f       	mov	r20, r25
    1f90:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_enu_Set_Pin_Value>
		DIO_enu_Set_Pin_Value(D3_PORT, D3_PIN,((Copy_command >> 3) & 1));
    1f94:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f96:	86 95       	lsr	r24
    1f98:	86 95       	lsr	r24
    1f9a:	86 95       	lsr	r24
    1f9c:	98 2f       	mov	r25, r24
    1f9e:	91 70       	andi	r25, 0x01	; 1
    1fa0:	83 e0       	ldi	r24, 0x03	; 3
    1fa2:	62 e0       	ldi	r22, 0x02	; 2
    1fa4:	49 2f       	mov	r20, r25
    1fa6:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_enu_Set_Pin_Value>
		DIO_enu_Set_Pin_Value(D2_PORT, D2_PIN,((Copy_command >> 2) & 1));
    1faa:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fac:	86 95       	lsr	r24
    1fae:	86 95       	lsr	r24
    1fb0:	98 2f       	mov	r25, r24
    1fb2:	91 70       	andi	r25, 0x01	; 1
    1fb4:	83 e0       	ldi	r24, 0x03	; 3
    1fb6:	63 e0       	ldi	r22, 0x03	; 3
    1fb8:	49 2f       	mov	r20, r25
    1fba:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_enu_Set_Pin_Value>
		DIO_enu_Set_Pin_Value(D1_PORT, D1_PIN,((Copy_command >> 1) & 1));
    1fbe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fc0:	86 95       	lsr	r24
    1fc2:	98 2f       	mov	r25, r24
    1fc4:	91 70       	andi	r25, 0x01	; 1
    1fc6:	83 e0       	ldi	r24, 0x03	; 3
    1fc8:	65 e0       	ldi	r22, 0x05	; 5
    1fca:	49 2f       	mov	r20, r25
    1fcc:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_enu_Set_Pin_Value>
		DIO_enu_Set_Pin_Value(D0_PORT, D0_PIN,((Copy_command >> 0) & 1));
    1fd0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fd2:	98 2f       	mov	r25, r24
    1fd4:	91 70       	andi	r25, 0x01	; 1
    1fd6:	83 e0       	ldi	r24, 0x03	; 3
    1fd8:	67 e0       	ldi	r22, 0x07	; 7
    1fda:	49 2f       	mov	r20, r25
    1fdc:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_enu_Set_Pin_Value>


		DIO_enu_Set_Pin_Value(EN_PORT, EN_PIN, HIGH);
    1fe0:	82 e0       	ldi	r24, 0x02	; 2
    1fe2:	63 e0       	ldi	r22, 0x03	; 3
    1fe4:	41 e0       	ldi	r20, 0x01	; 1
    1fe6:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_enu_Set_Pin_Value>
    1fea:	80 e0       	ldi	r24, 0x00	; 0
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	a0 e2       	ldi	r26, 0x20	; 32
    1ff0:	b1 e4       	ldi	r27, 0x41	; 65
    1ff2:	8b 87       	std	Y+11, r24	; 0x0b
    1ff4:	9c 87       	std	Y+12, r25	; 0x0c
    1ff6:	ad 87       	std	Y+13, r26	; 0x0d
    1ff8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ffa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ffc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ffe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2000:	9e 85       	ldd	r25, Y+14	; 0x0e
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	4a e7       	ldi	r20, 0x7A	; 122
    2008:	53 e4       	ldi	r21, 0x43	; 67
    200a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    200e:	dc 01       	movw	r26, r24
    2010:	cb 01       	movw	r24, r22
    2012:	8f 83       	std	Y+7, r24	; 0x07
    2014:	98 87       	std	Y+8, r25	; 0x08
    2016:	a9 87       	std	Y+9, r26	; 0x09
    2018:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    201a:	6f 81       	ldd	r22, Y+7	; 0x07
    201c:	78 85       	ldd	r23, Y+8	; 0x08
    201e:	89 85       	ldd	r24, Y+9	; 0x09
    2020:	9a 85       	ldd	r25, Y+10	; 0x0a
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	40 e8       	ldi	r20, 0x80	; 128
    2028:	5f e3       	ldi	r21, 0x3F	; 63
    202a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    202e:	88 23       	and	r24, r24
    2030:	2c f4       	brge	.+10     	; 0x203c <LCD_Send_Command+0x132>
		__ticks = 1;
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	9e 83       	std	Y+6, r25	; 0x06
    2038:	8d 83       	std	Y+5, r24	; 0x05
    203a:	3f c0       	rjmp	.+126    	; 0x20ba <LCD_Send_Command+0x1b0>
	else if (__tmp > 65535)
    203c:	6f 81       	ldd	r22, Y+7	; 0x07
    203e:	78 85       	ldd	r23, Y+8	; 0x08
    2040:	89 85       	ldd	r24, Y+9	; 0x09
    2042:	9a 85       	ldd	r25, Y+10	; 0x0a
    2044:	20 e0       	ldi	r18, 0x00	; 0
    2046:	3f ef       	ldi	r19, 0xFF	; 255
    2048:	4f e7       	ldi	r20, 0x7F	; 127
    204a:	57 e4       	ldi	r21, 0x47	; 71
    204c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2050:	18 16       	cp	r1, r24
    2052:	4c f5       	brge	.+82     	; 0x20a6 <LCD_Send_Command+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2054:	6b 85       	ldd	r22, Y+11	; 0x0b
    2056:	7c 85       	ldd	r23, Y+12	; 0x0c
    2058:	8d 85       	ldd	r24, Y+13	; 0x0d
    205a:	9e 85       	ldd	r25, Y+14	; 0x0e
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	40 e2       	ldi	r20, 0x20	; 32
    2062:	51 e4       	ldi	r21, 0x41	; 65
    2064:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2068:	dc 01       	movw	r26, r24
    206a:	cb 01       	movw	r24, r22
    206c:	bc 01       	movw	r22, r24
    206e:	cd 01       	movw	r24, r26
    2070:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2074:	dc 01       	movw	r26, r24
    2076:	cb 01       	movw	r24, r22
    2078:	9e 83       	std	Y+6, r25	; 0x06
    207a:	8d 83       	std	Y+5, r24	; 0x05
    207c:	0f c0       	rjmp	.+30     	; 0x209c <LCD_Send_Command+0x192>
    207e:	89 e1       	ldi	r24, 0x19	; 25
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	9c 83       	std	Y+4, r25	; 0x04
    2084:	8b 83       	std	Y+3, r24	; 0x03
    2086:	8b 81       	ldd	r24, Y+3	; 0x03
    2088:	9c 81       	ldd	r25, Y+4	; 0x04
    208a:	01 97       	sbiw	r24, 0x01	; 1
    208c:	f1 f7       	brne	.-4      	; 0x208a <LCD_Send_Command+0x180>
    208e:	9c 83       	std	Y+4, r25	; 0x04
    2090:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2092:	8d 81       	ldd	r24, Y+5	; 0x05
    2094:	9e 81       	ldd	r25, Y+6	; 0x06
    2096:	01 97       	sbiw	r24, 0x01	; 1
    2098:	9e 83       	std	Y+6, r25	; 0x06
    209a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    209c:	8d 81       	ldd	r24, Y+5	; 0x05
    209e:	9e 81       	ldd	r25, Y+6	; 0x06
    20a0:	00 97       	sbiw	r24, 0x00	; 0
    20a2:	69 f7       	brne	.-38     	; 0x207e <LCD_Send_Command+0x174>
    20a4:	14 c0       	rjmp	.+40     	; 0x20ce <LCD_Send_Command+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a6:	6f 81       	ldd	r22, Y+7	; 0x07
    20a8:	78 85       	ldd	r23, Y+8	; 0x08
    20aa:	89 85       	ldd	r24, Y+9	; 0x09
    20ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b2:	dc 01       	movw	r26, r24
    20b4:	cb 01       	movw	r24, r22
    20b6:	9e 83       	std	Y+6, r25	; 0x06
    20b8:	8d 83       	std	Y+5, r24	; 0x05
    20ba:	8d 81       	ldd	r24, Y+5	; 0x05
    20bc:	9e 81       	ldd	r25, Y+6	; 0x06
    20be:	9a 83       	std	Y+2, r25	; 0x02
    20c0:	89 83       	std	Y+1, r24	; 0x01
    20c2:	89 81       	ldd	r24, Y+1	; 0x01
    20c4:	9a 81       	ldd	r25, Y+2	; 0x02
    20c6:	01 97       	sbiw	r24, 0x01	; 1
    20c8:	f1 f7       	brne	.-4      	; 0x20c6 <LCD_Send_Command+0x1bc>
    20ca:	9a 83       	std	Y+2, r25	; 0x02
    20cc:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		DIO_enu_Set_Pin_Value(EN_PORT, EN_PIN, LOW);
    20ce:	82 e0       	ldi	r24, 0x02	; 2
    20d0:	63 e0       	ldi	r22, 0x03	; 3
    20d2:	40 e0       	ldi	r20, 0x00	; 0
    20d4:	0e 94 94 09 	call	0x1328	; 0x1328 <DIO_enu_Set_Pin_Value>
}
    20d8:	2f 96       	adiw	r28, 0x0f	; 15
    20da:	0f b6       	in	r0, 0x3f	; 63
    20dc:	f8 94       	cli
    20de:	de bf       	out	0x3e, r29	; 62
    20e0:	0f be       	out	0x3f, r0	; 63
    20e2:	cd bf       	out	0x3d, r28	; 61
    20e4:	cf 91       	pop	r28
    20e6:	df 91       	pop	r29
    20e8:	08 95       	ret

000020ea <main>:
void which_key_pressed(u8 copy_keypessed);



int main()
{
    20ea:	df 93       	push	r29
    20ec:	cf 93       	push	r28
    20ee:	cd b7       	in	r28, 0x3d	; 61
    20f0:	de b7       	in	r29, 0x3e	; 62
    20f2:	c8 58       	subi	r28, 0x88	; 136
    20f4:	d0 40       	sbci	r29, 0x00	; 0
    20f6:	0f b6       	in	r0, 0x3f	; 63
    20f8:	f8 94       	cli
    20fa:	de bf       	out	0x3e, r29	; 62
    20fc:	0f be       	out	0x3f, r0	; 63
    20fe:	cd bf       	out	0x3d, r28	; 61
	CreatStack(&s);
    2100:	82 e2       	ldi	r24, 0x22	; 34
    2102:	92 e0       	ldi	r25, 0x02	; 2
    2104:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <CreatStack>
	CreatStack_f(&pos_s);
    2108:	86 e1       	ldi	r24, 0x16	; 22
    210a:	92 e0       	ldi	r25, 0x02	; 2
    210c:	0e 94 b1 18 	call	0x3162	; 0x3162 <CreatStack_f>
	CreatStack_i(&s2);
    2110:	8e e1       	ldi	r24, 0x1E	; 30
    2112:	92 e0       	ldi	r25, 0x02	; 2
    2114:	0e 94 25 1a 	call	0x344a	; 0x344a <CreatStack_i>


	DIO_enu_Intiat();
    2118:	0e 94 2c 07 	call	0xe58	; 0xe58 <DIO_enu_Intiat>
	LCD_enu_intiat();
    211c:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <LCD_enu_intiat>

//LCD_enu_Display_char(53);

	u8 local_keypressed;
	char expression[100];
	u8 i = 0;
    2120:	1d 8e       	std	Y+29, r1	; 0x1d
	while(1)
	{

		do
		{
			local_keypressed = KPD_GET_PRESSED();
    2122:	0e 94 ac 0b 	call	0x1758	; 0x1758 <KPD_GET_PRESSED>
    2126:	8e 8f       	std	Y+30, r24	; 0x1e
		}while(local_keypressed == KPD_NO_PRESSED_KEY);
    2128:	8e 8d       	ldd	r24, Y+30	; 0x1e
    212a:	8f 3f       	cpi	r24, 0xFF	; 255
    212c:	d1 f3       	breq	.-12     	; 0x2122 <main+0x38>


		which_key_pressed(local_keypressed);
    212e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2130:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <which_key_pressed>

		if(local_keypressed != 15)
    2134:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2136:	8f 30       	cpi	r24, 0x0F	; 15
    2138:	09 f4       	brne	.+2      	; 0x213c <main+0x52>
    213a:	64 c1       	rjmp	.+712    	; 0x2404 <main+0x31a>
		{
			switch (local_keypressed)
    213c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    213e:	28 2f       	mov	r18, r24
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	c9 57       	subi	r28, 0x79	; 121
    2144:	df 4f       	sbci	r29, 0xFF	; 255
    2146:	39 83       	std	Y+1, r19	; 0x01
    2148:	28 83       	st	Y, r18
    214a:	c7 58       	subi	r28, 0x87	; 135
    214c:	d0 40       	sbci	r29, 0x00	; 0
    214e:	c9 57       	subi	r28, 0x79	; 121
    2150:	df 4f       	sbci	r29, 0xFF	; 255
    2152:	88 81       	ld	r24, Y
    2154:	99 81       	ldd	r25, Y+1	; 0x01
    2156:	c7 58       	subi	r28, 0x87	; 135
    2158:	d0 40       	sbci	r29, 0x00	; 0
    215a:	87 30       	cpi	r24, 0x07	; 7
    215c:	91 05       	cpc	r25, r1
    215e:	09 f4       	brne	.+2      	; 0x2162 <main+0x78>
    2160:	e1 c0       	rjmp	.+450    	; 0x2324 <main+0x23a>
    2162:	c9 57       	subi	r28, 0x79	; 121
    2164:	df 4f       	sbci	r29, 0xFF	; 255
    2166:	28 81       	ld	r18, Y
    2168:	39 81       	ldd	r19, Y+1	; 0x01
    216a:	c7 58       	subi	r28, 0x87	; 135
    216c:	d0 40       	sbci	r29, 0x00	; 0
    216e:	28 30       	cpi	r18, 0x08	; 8
    2170:	31 05       	cpc	r19, r1
    2172:	ec f5       	brge	.+122    	; 0x21ee <main+0x104>
    2174:	c9 57       	subi	r28, 0x79	; 121
    2176:	df 4f       	sbci	r29, 0xFF	; 255
    2178:	88 81       	ld	r24, Y
    217a:	99 81       	ldd	r25, Y+1	; 0x01
    217c:	c7 58       	subi	r28, 0x87	; 135
    217e:	d0 40       	sbci	r29, 0x00	; 0
    2180:	83 30       	cpi	r24, 0x03	; 3
    2182:	91 05       	cpc	r25, r1
    2184:	09 f4       	brne	.+2      	; 0x2188 <main+0x9e>
    2186:	96 c0       	rjmp	.+300    	; 0x22b4 <main+0x1ca>
    2188:	c9 57       	subi	r28, 0x79	; 121
    218a:	df 4f       	sbci	r29, 0xFF	; 255
    218c:	28 81       	ld	r18, Y
    218e:	39 81       	ldd	r19, Y+1	; 0x01
    2190:	c7 58       	subi	r28, 0x87	; 135
    2192:	d0 40       	sbci	r29, 0x00	; 0
    2194:	24 30       	cpi	r18, 0x04	; 4
    2196:	31 05       	cpc	r19, r1
    2198:	ac f4       	brge	.+42     	; 0x21c4 <main+0xda>
    219a:	c9 57       	subi	r28, 0x79	; 121
    219c:	df 4f       	sbci	r29, 0xFF	; 255
    219e:	88 81       	ld	r24, Y
    21a0:	99 81       	ldd	r25, Y+1	; 0x01
    21a2:	c7 58       	subi	r28, 0x87	; 135
    21a4:	d0 40       	sbci	r29, 0x00	; 0
    21a6:	81 30       	cpi	r24, 0x01	; 1
    21a8:	91 05       	cpc	r25, r1
    21aa:	09 f4       	brne	.+2      	; 0x21ae <main+0xc4>
    21ac:	67 c0       	rjmp	.+206    	; 0x227c <main+0x192>
    21ae:	c9 57       	subi	r28, 0x79	; 121
    21b0:	df 4f       	sbci	r29, 0xFF	; 255
    21b2:	28 81       	ld	r18, Y
    21b4:	39 81       	ldd	r19, Y+1	; 0x01
    21b6:	c7 58       	subi	r28, 0x87	; 135
    21b8:	d0 40       	sbci	r29, 0x00	; 0
    21ba:	22 30       	cpi	r18, 0x02	; 2
    21bc:	31 05       	cpc	r19, r1
    21be:	09 f4       	brne	.+2      	; 0x21c2 <main+0xd8>
    21c0:	6b c0       	rjmp	.+214    	; 0x2298 <main+0x1ae>
    21c2:	82 c2       	rjmp	.+1284   	; 0x26c8 <main+0x5de>
    21c4:	c9 57       	subi	r28, 0x79	; 121
    21c6:	df 4f       	sbci	r29, 0xFF	; 255
    21c8:	88 81       	ld	r24, Y
    21ca:	99 81       	ldd	r25, Y+1	; 0x01
    21cc:	c7 58       	subi	r28, 0x87	; 135
    21ce:	d0 40       	sbci	r29, 0x00	; 0
    21d0:	85 30       	cpi	r24, 0x05	; 5
    21d2:	91 05       	cpc	r25, r1
    21d4:	09 f4       	brne	.+2      	; 0x21d8 <main+0xee>
    21d6:	8a c0       	rjmp	.+276    	; 0x22ec <main+0x202>
    21d8:	c9 57       	subi	r28, 0x79	; 121
    21da:	df 4f       	sbci	r29, 0xFF	; 255
    21dc:	28 81       	ld	r18, Y
    21de:	39 81       	ldd	r19, Y+1	; 0x01
    21e0:	c7 58       	subi	r28, 0x87	; 135
    21e2:	d0 40       	sbci	r29, 0x00	; 0
    21e4:	26 30       	cpi	r18, 0x06	; 6
    21e6:	31 05       	cpc	r19, r1
    21e8:	0c f0       	brlt	.+2      	; 0x21ec <main+0x102>
    21ea:	8e c0       	rjmp	.+284    	; 0x2308 <main+0x21e>
    21ec:	71 c0       	rjmp	.+226    	; 0x22d0 <main+0x1e6>
    21ee:	c9 57       	subi	r28, 0x79	; 121
    21f0:	df 4f       	sbci	r29, 0xFF	; 255
    21f2:	88 81       	ld	r24, Y
    21f4:	99 81       	ldd	r25, Y+1	; 0x01
    21f6:	c7 58       	subi	r28, 0x87	; 135
    21f8:	d0 40       	sbci	r29, 0x00	; 0
    21fa:	8b 30       	cpi	r24, 0x0B	; 11
    21fc:	91 05       	cpc	r25, r1
    21fe:	09 f4       	brne	.+2      	; 0x2202 <main+0x118>
    2200:	c9 c0       	rjmp	.+402    	; 0x2394 <main+0x2aa>
    2202:	c9 57       	subi	r28, 0x79	; 121
    2204:	df 4f       	sbci	r29, 0xFF	; 255
    2206:	28 81       	ld	r18, Y
    2208:	39 81       	ldd	r19, Y+1	; 0x01
    220a:	c7 58       	subi	r28, 0x87	; 135
    220c:	d0 40       	sbci	r29, 0x00	; 0
    220e:	2c 30       	cpi	r18, 0x0C	; 12
    2210:	31 05       	cpc	r19, r1
    2212:	ac f4       	brge	.+42     	; 0x223e <main+0x154>
    2214:	c9 57       	subi	r28, 0x79	; 121
    2216:	df 4f       	sbci	r29, 0xFF	; 255
    2218:	88 81       	ld	r24, Y
    221a:	99 81       	ldd	r25, Y+1	; 0x01
    221c:	c7 58       	subi	r28, 0x87	; 135
    221e:	d0 40       	sbci	r29, 0x00	; 0
    2220:	89 30       	cpi	r24, 0x09	; 9
    2222:	91 05       	cpc	r25, r1
    2224:	09 f4       	brne	.+2      	; 0x2228 <main+0x13e>
    2226:	9a c0       	rjmp	.+308    	; 0x235c <main+0x272>
    2228:	c9 57       	subi	r28, 0x79	; 121
    222a:	df 4f       	sbci	r29, 0xFF	; 255
    222c:	28 81       	ld	r18, Y
    222e:	39 81       	ldd	r19, Y+1	; 0x01
    2230:	c7 58       	subi	r28, 0x87	; 135
    2232:	d0 40       	sbci	r29, 0x00	; 0
    2234:	2a 30       	cpi	r18, 0x0A	; 10
    2236:	31 05       	cpc	r19, r1
    2238:	0c f0       	brlt	.+2      	; 0x223c <main+0x152>
    223a:	9e c0       	rjmp	.+316    	; 0x2378 <main+0x28e>
    223c:	81 c0       	rjmp	.+258    	; 0x2340 <main+0x256>
    223e:	c9 57       	subi	r28, 0x79	; 121
    2240:	df 4f       	sbci	r29, 0xFF	; 255
    2242:	88 81       	ld	r24, Y
    2244:	99 81       	ldd	r25, Y+1	; 0x01
    2246:	c7 58       	subi	r28, 0x87	; 135
    2248:	d0 40       	sbci	r29, 0x00	; 0
    224a:	8e 30       	cpi	r24, 0x0E	; 14
    224c:	91 05       	cpc	r25, r1
    224e:	09 f4       	brne	.+2      	; 0x2252 <main+0x168>
    2250:	bd c0       	rjmp	.+378    	; 0x23cc <main+0x2e2>
    2252:	c9 57       	subi	r28, 0x79	; 121
    2254:	df 4f       	sbci	r29, 0xFF	; 255
    2256:	28 81       	ld	r18, Y
    2258:	39 81       	ldd	r19, Y+1	; 0x01
    225a:	c7 58       	subi	r28, 0x87	; 135
    225c:	d0 40       	sbci	r29, 0x00	; 0
    225e:	20 31       	cpi	r18, 0x10	; 16
    2260:	31 05       	cpc	r19, r1
    2262:	09 f4       	brne	.+2      	; 0x2266 <main+0x17c>
    2264:	c1 c0       	rjmp	.+386    	; 0x23e8 <main+0x2fe>
    2266:	c9 57       	subi	r28, 0x79	; 121
    2268:	df 4f       	sbci	r29, 0xFF	; 255
    226a:	88 81       	ld	r24, Y
    226c:	99 81       	ldd	r25, Y+1	; 0x01
    226e:	c7 58       	subi	r28, 0x87	; 135
    2270:	d0 40       	sbci	r29, 0x00	; 0
    2272:	8c 30       	cpi	r24, 0x0C	; 12
    2274:	91 05       	cpc	r25, r1
    2276:	09 f4       	brne	.+2      	; 0x227a <main+0x190>
    2278:	9b c0       	rjmp	.+310    	; 0x23b0 <main+0x2c6>
    227a:	26 c2       	rjmp	.+1100   	; 0x26c8 <main+0x5de>
			{
			case 1: //7
				expression[i] = '7';
    227c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    227e:	28 2f       	mov	r18, r24
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	ce 01       	movw	r24, r28
    2284:	4f 96       	adiw	r24, 0x1f	; 31
    2286:	fc 01       	movw	r30, r24
    2288:	e2 0f       	add	r30, r18
    228a:	f3 1f       	adc	r31, r19
    228c:	87 e3       	ldi	r24, 0x37	; 55
    228e:	80 83       	st	Z, r24
				i++;
    2290:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2292:	8f 5f       	subi	r24, 0xFF	; 255
    2294:	8d 8f       	std	Y+29, r24	; 0x1d
    2296:	18 c2       	rjmp	.+1072   	; 0x26c8 <main+0x5de>
				break;
			case 2: // 8
				expression[i] = '8';
    2298:	8d 8d       	ldd	r24, Y+29	; 0x1d
    229a:	28 2f       	mov	r18, r24
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	ce 01       	movw	r24, r28
    22a0:	4f 96       	adiw	r24, 0x1f	; 31
    22a2:	fc 01       	movw	r30, r24
    22a4:	e2 0f       	add	r30, r18
    22a6:	f3 1f       	adc	r31, r19
    22a8:	88 e3       	ldi	r24, 0x38	; 56
    22aa:	80 83       	st	Z, r24
				i++;
    22ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22ae:	8f 5f       	subi	r24, 0xFF	; 255
    22b0:	8d 8f       	std	Y+29, r24	; 0x1d
    22b2:	0a c2       	rjmp	.+1044   	; 0x26c8 <main+0x5de>
				break;
			case 3: // 9
				expression[i] = '9';
    22b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22b6:	28 2f       	mov	r18, r24
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	ce 01       	movw	r24, r28
    22bc:	4f 96       	adiw	r24, 0x1f	; 31
    22be:	fc 01       	movw	r30, r24
    22c0:	e2 0f       	add	r30, r18
    22c2:	f3 1f       	adc	r31, r19
    22c4:	89 e3       	ldi	r24, 0x39	; 57
    22c6:	80 83       	st	Z, r24
				i++;
    22c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22ca:	8f 5f       	subi	r24, 0xFF	; 255
    22cc:	8d 8f       	std	Y+29, r24	; 0x1d
    22ce:	fc c1       	rjmp	.+1016   	; 0x26c8 <main+0x5de>
				break;
			case 4: // /
				expression[i] = '/';
    22d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22d2:	28 2f       	mov	r18, r24
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	ce 01       	movw	r24, r28
    22d8:	4f 96       	adiw	r24, 0x1f	; 31
    22da:	fc 01       	movw	r30, r24
    22dc:	e2 0f       	add	r30, r18
    22de:	f3 1f       	adc	r31, r19
    22e0:	8f e2       	ldi	r24, 0x2F	; 47
    22e2:	80 83       	st	Z, r24
				i++;
    22e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22e6:	8f 5f       	subi	r24, 0xFF	; 255
    22e8:	8d 8f       	std	Y+29, r24	; 0x1d
    22ea:	ee c1       	rjmp	.+988    	; 0x26c8 <main+0x5de>
				break;
			case 5: // 4
				expression[i] = '4';
    22ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22ee:	28 2f       	mov	r18, r24
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	ce 01       	movw	r24, r28
    22f4:	4f 96       	adiw	r24, 0x1f	; 31
    22f6:	fc 01       	movw	r30, r24
    22f8:	e2 0f       	add	r30, r18
    22fa:	f3 1f       	adc	r31, r19
    22fc:	84 e3       	ldi	r24, 0x34	; 52
    22fe:	80 83       	st	Z, r24
				i++;
    2300:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2302:	8f 5f       	subi	r24, 0xFF	; 255
    2304:	8d 8f       	std	Y+29, r24	; 0x1d
    2306:	e0 c1       	rjmp	.+960    	; 0x26c8 <main+0x5de>
				break;
			case 6: // 5
				expression[i] = '5';
    2308:	8d 8d       	ldd	r24, Y+29	; 0x1d
    230a:	28 2f       	mov	r18, r24
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	ce 01       	movw	r24, r28
    2310:	4f 96       	adiw	r24, 0x1f	; 31
    2312:	fc 01       	movw	r30, r24
    2314:	e2 0f       	add	r30, r18
    2316:	f3 1f       	adc	r31, r19
    2318:	85 e3       	ldi	r24, 0x35	; 53
    231a:	80 83       	st	Z, r24
				i++;
    231c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    231e:	8f 5f       	subi	r24, 0xFF	; 255
    2320:	8d 8f       	std	Y+29, r24	; 0x1d
    2322:	d2 c1       	rjmp	.+932    	; 0x26c8 <main+0x5de>
				break;
			case 7: // 6
				expression[i] = '6';
    2324:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2326:	28 2f       	mov	r18, r24
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	ce 01       	movw	r24, r28
    232c:	4f 96       	adiw	r24, 0x1f	; 31
    232e:	fc 01       	movw	r30, r24
    2330:	e2 0f       	add	r30, r18
    2332:	f3 1f       	adc	r31, r19
    2334:	86 e3       	ldi	r24, 0x36	; 54
    2336:	80 83       	st	Z, r24
				i++;
    2338:	8d 8d       	ldd	r24, Y+29	; 0x1d
    233a:	8f 5f       	subi	r24, 0xFF	; 255
    233c:	8d 8f       	std	Y+29, r24	; 0x1d
    233e:	c4 c1       	rjmp	.+904    	; 0x26c8 <main+0x5de>
				break;
			case 8: // *
				expression[i] = '*';
    2340:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2342:	28 2f       	mov	r18, r24
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	ce 01       	movw	r24, r28
    2348:	4f 96       	adiw	r24, 0x1f	; 31
    234a:	fc 01       	movw	r30, r24
    234c:	e2 0f       	add	r30, r18
    234e:	f3 1f       	adc	r31, r19
    2350:	8a e2       	ldi	r24, 0x2A	; 42
    2352:	80 83       	st	Z, r24
				i++;
    2354:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2356:	8f 5f       	subi	r24, 0xFF	; 255
    2358:	8d 8f       	std	Y+29, r24	; 0x1d
    235a:	b6 c1       	rjmp	.+876    	; 0x26c8 <main+0x5de>
				break;
			case 9: // 1
				expression[i] = '1';
    235c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    235e:	28 2f       	mov	r18, r24
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	ce 01       	movw	r24, r28
    2364:	4f 96       	adiw	r24, 0x1f	; 31
    2366:	fc 01       	movw	r30, r24
    2368:	e2 0f       	add	r30, r18
    236a:	f3 1f       	adc	r31, r19
    236c:	81 e3       	ldi	r24, 0x31	; 49
    236e:	80 83       	st	Z, r24
				i++;
    2370:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2372:	8f 5f       	subi	r24, 0xFF	; 255
    2374:	8d 8f       	std	Y+29, r24	; 0x1d
    2376:	a8 c1       	rjmp	.+848    	; 0x26c8 <main+0x5de>
				break;
			case 10: // 2
				expression[i] = '2';
    2378:	8d 8d       	ldd	r24, Y+29	; 0x1d
    237a:	28 2f       	mov	r18, r24
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	ce 01       	movw	r24, r28
    2380:	4f 96       	adiw	r24, 0x1f	; 31
    2382:	fc 01       	movw	r30, r24
    2384:	e2 0f       	add	r30, r18
    2386:	f3 1f       	adc	r31, r19
    2388:	82 e3       	ldi	r24, 0x32	; 50
    238a:	80 83       	st	Z, r24
				i++;
    238c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    238e:	8f 5f       	subi	r24, 0xFF	; 255
    2390:	8d 8f       	std	Y+29, r24	; 0x1d
    2392:	9a c1       	rjmp	.+820    	; 0x26c8 <main+0x5de>
				break;
			case 11: // 3
				expression[i] = '3';
    2394:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2396:	28 2f       	mov	r18, r24
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	ce 01       	movw	r24, r28
    239c:	4f 96       	adiw	r24, 0x1f	; 31
    239e:	fc 01       	movw	r30, r24
    23a0:	e2 0f       	add	r30, r18
    23a2:	f3 1f       	adc	r31, r19
    23a4:	83 e3       	ldi	r24, 0x33	; 51
    23a6:	80 83       	st	Z, r24
				i++;
    23a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23aa:	8f 5f       	subi	r24, 0xFF	; 255
    23ac:	8d 8f       	std	Y+29, r24	; 0x1d
    23ae:	8c c1       	rjmp	.+792    	; 0x26c8 <main+0x5de>
				break;
			case 12: // -
				expression[i] = '-';
    23b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23b2:	28 2f       	mov	r18, r24
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	ce 01       	movw	r24, r28
    23b8:	4f 96       	adiw	r24, 0x1f	; 31
    23ba:	fc 01       	movw	r30, r24
    23bc:	e2 0f       	add	r30, r18
    23be:	f3 1f       	adc	r31, r19
    23c0:	8d e2       	ldi	r24, 0x2D	; 45
    23c2:	80 83       	st	Z, r24
				i++;
    23c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23c6:	8f 5f       	subi	r24, 0xFF	; 255
    23c8:	8d 8f       	std	Y+29, r24	; 0x1d
    23ca:	7e c1       	rjmp	.+764    	; 0x26c8 <main+0x5de>
				break;
			case 14: // 0
				expression[i] = '0';
    23cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23ce:	28 2f       	mov	r18, r24
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	ce 01       	movw	r24, r28
    23d4:	4f 96       	adiw	r24, 0x1f	; 31
    23d6:	fc 01       	movw	r30, r24
    23d8:	e2 0f       	add	r30, r18
    23da:	f3 1f       	adc	r31, r19
    23dc:	80 e3       	ldi	r24, 0x30	; 48
    23de:	80 83       	st	Z, r24
				i++;
    23e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23e2:	8f 5f       	subi	r24, 0xFF	; 255
    23e4:	8d 8f       	std	Y+29, r24	; 0x1d
    23e6:	70 c1       	rjmp	.+736    	; 0x26c8 <main+0x5de>
				break;
			case 16: // +
				expression[i] = '+';
    23e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23ea:	28 2f       	mov	r18, r24
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	ce 01       	movw	r24, r28
    23f0:	4f 96       	adiw	r24, 0x1f	; 31
    23f2:	fc 01       	movw	r30, r24
    23f4:	e2 0f       	add	r30, r18
    23f6:	f3 1f       	adc	r31, r19
    23f8:	8b e2       	ldi	r24, 0x2B	; 43
    23fa:	80 83       	st	Z, r24
				i++;
    23fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23fe:	8f 5f       	subi	r24, 0xFF	; 255
    2400:	8d 8f       	std	Y+29, r24	; 0x1d
    2402:	62 c1       	rjmp	.+708    	; 0x26c8 <main+0x5de>
			}

		}
		else
		{
			expression[i] = '\0';
    2404:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2406:	28 2f       	mov	r18, r24
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	ce 01       	movw	r24, r28
    240c:	4f 96       	adiw	r24, 0x1f	; 31
    240e:	fc 01       	movw	r30, r24
    2410:	e2 0f       	add	r30, r18
    2412:	f3 1f       	adc	r31, r19
    2414:	10 82       	st	Z, r1
			LCD_enu_Send_command(0xc0);
    2416:	80 ec       	ldi	r24, 0xC0	; 192
    2418:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <LCD_enu_Send_command>

			char * ptr = Post_exp(expression);
    241c:	ce 01       	movw	r24, r28
    241e:	4f 96       	adiw	r24, 0x1f	; 31
    2420:	0e 94 c9 14 	call	0x2992	; 0x2992 <Post_exp>
    2424:	9c 8f       	std	Y+28, r25	; 0x1c
    2426:	8b 8f       	std	Y+27, r24	; 0x1b
			float res = evaluate(ptr);
    2428:	8b 8d       	ldd	r24, Y+27	; 0x1b
    242a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    242c:	0e 94 19 16 	call	0x2c32	; 0x2c32 <evaluate>
    2430:	dc 01       	movw	r26, r24
    2432:	cb 01       	movw	r24, r22
    2434:	8f 8b       	std	Y+23, r24	; 0x17
    2436:	98 8f       	std	Y+24, r25	; 0x18
    2438:	a9 8f       	std	Y+25, r26	; 0x19
    243a:	ba 8f       	std	Y+26, r27	; 0x1a
			if(res == .9999999)
    243c:	6f 89       	ldd	r22, Y+23	; 0x17
    243e:	78 8d       	ldd	r23, Y+24	; 0x18
    2440:	89 8d       	ldd	r24, Y+25	; 0x19
    2442:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2444:	2e ef       	ldi	r18, 0xFE	; 254
    2446:	3f ef       	ldi	r19, 0xFF	; 255
    2448:	4f e7       	ldi	r20, 0x7F	; 127
    244a:	5f e3       	ldi	r21, 0x3F	; 63
    244c:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    2450:	88 23       	and	r24, r24
    2452:	81 f4       	brne	.+32     	; 0x2474 <main+0x38a>
			{
				LCD_enu_Display_char('E');
    2454:	85 e4       	ldi	r24, 0x45	; 69
    2456:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <LCD_enu_Display_char>
				LCD_enu_Display_char('R');
    245a:	82 e5       	ldi	r24, 0x52	; 82
    245c:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <LCD_enu_Display_char>
				LCD_enu_Display_char('R');
    2460:	82 e5       	ldi	r24, 0x52	; 82
    2462:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <LCD_enu_Display_char>
				LCD_enu_Display_char('O');
    2466:	8f e4       	ldi	r24, 0x4F	; 79
    2468:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <LCD_enu_Display_char>
				LCD_enu_Display_char('R');
    246c:	82 e5       	ldi	r24, 0x52	; 82
    246e:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <LCD_enu_Display_char>
    2472:	2a c1       	rjmp	.+596    	; 0x26c8 <main+0x5de>
			}
			else if(res < 0)
    2474:	6f 89       	ldd	r22, Y+23	; 0x17
    2476:	78 8d       	ldd	r23, Y+24	; 0x18
    2478:	89 8d       	ldd	r24, Y+25	; 0x19
    247a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    247c:	20 e0       	ldi	r18, 0x00	; 0
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	40 e0       	ldi	r20, 0x00	; 0
    2482:	50 e0       	ldi	r21, 0x00	; 0
    2484:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2488:	88 23       	and	r24, r24
    248a:	0c f0       	brlt	.+2      	; 0x248e <main+0x3a4>
    248c:	7f c0       	rjmp	.+254    	; 0x258c <main+0x4a2>
			{
				LCD_enu_Display_char('-');
    248e:	8d e2       	ldi	r24, 0x2D	; 45
    2490:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <LCD_enu_Display_char>
				int int_res = -res;
    2494:	8f 89       	ldd	r24, Y+23	; 0x17
    2496:	98 8d       	ldd	r25, Y+24	; 0x18
    2498:	a9 8d       	ldd	r26, Y+25	; 0x19
    249a:	ba 8d       	ldd	r27, Y+26	; 0x1a
    249c:	b0 58       	subi	r27, 0x80	; 128
    249e:	bc 01       	movw	r22, r24
    24a0:	cd 01       	movw	r24, r26
    24a2:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    24a6:	dc 01       	movw	r26, r24
    24a8:	cb 01       	movw	r24, r22
    24aa:	9e 8b       	std	Y+22, r25	; 0x16
    24ac:	8d 8b       	std	Y+21, r24	; 0x15
				int num_1 = int_res;
    24ae:	8d 89       	ldd	r24, Y+21	; 0x15
    24b0:	9e 89       	ldd	r25, Y+22	; 0x16
    24b2:	9c 8b       	std	Y+20, r25	; 0x14
    24b4:	8b 8b       	std	Y+19, r24	; 0x13
    24b6:	16 c0       	rjmp	.+44     	; 0x24e4 <main+0x3fa>

				int popped;
				while (num_1 != 0) {
					push_i((num_1 % 10), &s2);
    24b8:	8b 89       	ldd	r24, Y+19	; 0x13
    24ba:	9c 89       	ldd	r25, Y+20	; 0x14
    24bc:	2a e0       	ldi	r18, 0x0A	; 10
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	b9 01       	movw	r22, r18
    24c2:	0e 94 76 1b 	call	0x36ec	; 0x36ec <__divmodhi4>
    24c6:	2e e1       	ldi	r18, 0x1E	; 30
    24c8:	32 e0       	ldi	r19, 0x02	; 2
    24ca:	b9 01       	movw	r22, r18
    24cc:	0e 94 39 1a 	call	0x3472	; 0x3472 <push_i>
					num_1 /= 10;
    24d0:	8b 89       	ldd	r24, Y+19	; 0x13
    24d2:	9c 89       	ldd	r25, Y+20	; 0x14
    24d4:	2a e0       	ldi	r18, 0x0A	; 10
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	b9 01       	movw	r22, r18
    24da:	0e 94 76 1b 	call	0x36ec	; 0x36ec <__divmodhi4>
    24de:	cb 01       	movw	r24, r22
    24e0:	9c 8b       	std	Y+20, r25	; 0x14
    24e2:	8b 8b       	std	Y+19, r24	; 0x13
				LCD_enu_Display_char('-');
				int int_res = -res;
				int num_1 = int_res;

				int popped;
				while (num_1 != 0) {
    24e4:	8b 89       	ldd	r24, Y+19	; 0x13
    24e6:	9c 89       	ldd	r25, Y+20	; 0x14
    24e8:	00 97       	sbiw	r24, 0x00	; 0
    24ea:	31 f7       	brne	.-52     	; 0x24b8 <main+0x3ce>
    24ec:	10 c0       	rjmp	.+32     	; 0x250e <main+0x424>
					num_1 /= 10;
				}

				while (!StackEmpty_i(&s2))
				{
					LCD_enu_Display_char(num_pressed(gettop_i(&s2)));
    24ee:	8e e1       	ldi	r24, 0x1E	; 30
    24f0:	92 e0       	ldi	r25, 0x02	; 2
    24f2:	0e 94 08 1b 	call	0x3610	; 0x3610 <gettop_i>
    24f6:	0e 94 82 13 	call	0x2704	; 0x2704 <num_pressed>
    24fa:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <LCD_enu_Display_char>
					pop_i(&popped, &s2);
    24fe:	ce 01       	movw	r24, r28
    2500:	8d 57       	subi	r24, 0x7D	; 125
    2502:	9f 4f       	sbci	r25, 0xFF	; 255
    2504:	2e e1       	ldi	r18, 0x1E	; 30
    2506:	32 e0       	ldi	r19, 0x02	; 2
    2508:	b9 01       	movw	r22, r18
    250a:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <pop_i>
				while (num_1 != 0) {
					push_i((num_1 % 10), &s2);
					num_1 /= 10;
				}

				while (!StackEmpty_i(&s2))
    250e:	8e e1       	ldi	r24, 0x1E	; 30
    2510:	92 e0       	ldi	r25, 0x02	; 2
    2512:	0e 94 b8 1a 	call	0x3570	; 0x3570 <StackEmpty_i>
    2516:	00 97       	sbiw	r24, 0x00	; 0
    2518:	51 f3       	breq	.-44     	; 0x24ee <main+0x404>
				{
					LCD_enu_Display_char(num_pressed(gettop_i(&s2)));
					pop_i(&popped, &s2);
				}

				LCD_enu_Display_char('.');
    251a:	8e e2       	ldi	r24, 0x2E	; 46
    251c:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <LCD_enu_Display_char>
				float int_res_2 = -(res - (-int_res));
    2520:	8d 89       	ldd	r24, Y+21	; 0x15
    2522:	9e 89       	ldd	r25, Y+22	; 0x16
    2524:	90 95       	com	r25
    2526:	81 95       	neg	r24
    2528:	9f 4f       	sbci	r25, 0xFF	; 255
    252a:	aa 27       	eor	r26, r26
    252c:	97 fd       	sbrc	r25, 7
    252e:	a0 95       	com	r26
    2530:	ba 2f       	mov	r27, r26
    2532:	bc 01       	movw	r22, r24
    2534:	cd 01       	movw	r24, r26
    2536:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    253a:	9b 01       	movw	r18, r22
    253c:	ac 01       	movw	r20, r24
    253e:	6f 89       	ldd	r22, Y+23	; 0x17
    2540:	78 8d       	ldd	r23, Y+24	; 0x18
    2542:	89 8d       	ldd	r24, Y+25	; 0x19
    2544:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2546:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    254a:	dc 01       	movw	r26, r24
    254c:	cb 01       	movw	r24, r22
    254e:	b0 58       	subi	r27, 0x80	; 128
    2550:	8f 87       	std	Y+15, r24	; 0x0f
    2552:	98 8b       	std	Y+16, r25	; 0x10
    2554:	a9 8b       	std	Y+17, r26	; 0x11
    2556:	ba 8b       	std	Y+18, r27	; 0x12
				int num = int_res_2 * 10;
    2558:	6f 85       	ldd	r22, Y+15	; 0x0f
    255a:	78 89       	ldd	r23, Y+16	; 0x10
    255c:	89 89       	ldd	r24, Y+17	; 0x11
    255e:	9a 89       	ldd	r25, Y+18	; 0x12
    2560:	20 e0       	ldi	r18, 0x00	; 0
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	40 e2       	ldi	r20, 0x20	; 32
    2566:	51 e4       	ldi	r21, 0x41	; 65
    2568:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    256c:	dc 01       	movw	r26, r24
    256e:	cb 01       	movw	r24, r22
    2570:	bc 01       	movw	r22, r24
    2572:	cd 01       	movw	r24, r26
    2574:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    2578:	dc 01       	movw	r26, r24
    257a:	cb 01       	movw	r24, r22
    257c:	9e 87       	std	Y+14, r25	; 0x0e
    257e:	8d 87       	std	Y+13, r24	; 0x0d
				LCD_enu_Display_char(num_pressed(num));
    2580:	8d 85       	ldd	r24, Y+13	; 0x0d
    2582:	0e 94 82 13 	call	0x2704	; 0x2704 <num_pressed>
    2586:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <LCD_enu_Display_char>
    258a:	9e c0       	rjmp	.+316    	; 0x26c8 <main+0x5de>
			}
			else
			{

				int int_res = res;
    258c:	6f 89       	ldd	r22, Y+23	; 0x17
    258e:	78 8d       	ldd	r23, Y+24	; 0x18
    2590:	89 8d       	ldd	r24, Y+25	; 0x19
    2592:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2594:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    2598:	dc 01       	movw	r26, r24
    259a:	cb 01       	movw	r24, r22
    259c:	9c 87       	std	Y+12, r25	; 0x0c
    259e:	8b 87       	std	Y+11, r24	; 0x0b
				int num_1 = int_res;
    25a0:	8b 85       	ldd	r24, Y+11	; 0x0b
    25a2:	9c 85       	ldd	r25, Y+12	; 0x0c
    25a4:	9a 87       	std	Y+10, r25	; 0x0a
    25a6:	89 87       	std	Y+9, r24	; 0x09
				if(res == 0)
    25a8:	6f 89       	ldd	r22, Y+23	; 0x17
    25aa:	78 8d       	ldd	r23, Y+24	; 0x18
    25ac:	89 8d       	ldd	r24, Y+25	; 0x19
    25ae:	9a 8d       	ldd	r25, Y+26	; 0x1a
    25b0:	20 e0       	ldi	r18, 0x00	; 0
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	40 e0       	ldi	r20, 0x00	; 0
    25b6:	50 e0       	ldi	r21, 0x00	; 0
    25b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    25bc:	88 23       	and	r24, r24
    25be:	19 f4       	brne	.+6      	; 0x25c6 <main+0x4dc>
					LCD_enu_Display_char('0');
    25c0:	80 e3       	ldi	r24, 0x30	; 48
    25c2:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <LCD_enu_Display_char>
				if(res > 0 && res < 1)
    25c6:	6f 89       	ldd	r22, Y+23	; 0x17
    25c8:	78 8d       	ldd	r23, Y+24	; 0x18
    25ca:	89 8d       	ldd	r24, Y+25	; 0x19
    25cc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    25ce:	20 e0       	ldi	r18, 0x00	; 0
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	40 e0       	ldi	r20, 0x00	; 0
    25d4:	50 e0       	ldi	r21, 0x00	; 0
    25d6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    25da:	18 16       	cp	r1, r24
    25dc:	34 f5       	brge	.+76     	; 0x262a <main+0x540>
    25de:	6f 89       	ldd	r22, Y+23	; 0x17
    25e0:	78 8d       	ldd	r23, Y+24	; 0x18
    25e2:	89 8d       	ldd	r24, Y+25	; 0x19
    25e4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    25e6:	20 e0       	ldi	r18, 0x00	; 0
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	40 e8       	ldi	r20, 0x80	; 128
    25ec:	5f e3       	ldi	r21, 0x3F	; 63
    25ee:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    25f2:	88 23       	and	r24, r24
    25f4:	d4 f4       	brge	.+52     	; 0x262a <main+0x540>
				{
					LCD_enu_Display_char('0');
    25f6:	80 e3       	ldi	r24, 0x30	; 48
    25f8:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <LCD_enu_Display_char>
    25fc:	16 c0       	rjmp	.+44     	; 0x262a <main+0x540>
				}
				int popped;

				while (num_1 != 0)
				{
					push_i((num_1 % 10), &s2);
    25fe:	89 85       	ldd	r24, Y+9	; 0x09
    2600:	9a 85       	ldd	r25, Y+10	; 0x0a
    2602:	2a e0       	ldi	r18, 0x0A	; 10
    2604:	30 e0       	ldi	r19, 0x00	; 0
    2606:	b9 01       	movw	r22, r18
    2608:	0e 94 76 1b 	call	0x36ec	; 0x36ec <__divmodhi4>
    260c:	2e e1       	ldi	r18, 0x1E	; 30
    260e:	32 e0       	ldi	r19, 0x02	; 2
    2610:	b9 01       	movw	r22, r18
    2612:	0e 94 39 1a 	call	0x3472	; 0x3472 <push_i>
					num_1 /= 10;
    2616:	89 85       	ldd	r24, Y+9	; 0x09
    2618:	9a 85       	ldd	r25, Y+10	; 0x0a
    261a:	2a e0       	ldi	r18, 0x0A	; 10
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	b9 01       	movw	r22, r18
    2620:	0e 94 76 1b 	call	0x36ec	; 0x36ec <__divmodhi4>
    2624:	cb 01       	movw	r24, r22
    2626:	9a 87       	std	Y+10, r25	; 0x0a
    2628:	89 87       	std	Y+9, r24	; 0x09
				{
					LCD_enu_Display_char('0');
				}
				int popped;

				while (num_1 != 0)
    262a:	89 85       	ldd	r24, Y+9	; 0x09
    262c:	9a 85       	ldd	r25, Y+10	; 0x0a
    262e:	00 97       	sbiw	r24, 0x00	; 0
    2630:	31 f7       	brne	.-52     	; 0x25fe <main+0x514>
    2632:	10 c0       	rjmp	.+32     	; 0x2654 <main+0x56a>
					num_1 /= 10;
				}

				while (!StackEmpty_i(&s2))
				{
					LCD_enu_Display_char(num_pressed(gettop_i(&s2)));
    2634:	8e e1       	ldi	r24, 0x1E	; 30
    2636:	92 e0       	ldi	r25, 0x02	; 2
    2638:	0e 94 08 1b 	call	0x3610	; 0x3610 <gettop_i>
    263c:	0e 94 82 13 	call	0x2704	; 0x2704 <num_pressed>
    2640:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <LCD_enu_Display_char>
					pop_i(&popped, &s2);
    2644:	ce 01       	movw	r24, r28
    2646:	8b 57       	subi	r24, 0x7B	; 123
    2648:	9f 4f       	sbci	r25, 0xFF	; 255
    264a:	2e e1       	ldi	r18, 0x1E	; 30
    264c:	32 e0       	ldi	r19, 0x02	; 2
    264e:	b9 01       	movw	r22, r18
    2650:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <pop_i>
				{
					push_i((num_1 % 10), &s2);
					num_1 /= 10;
				}

				while (!StackEmpty_i(&s2))
    2654:	8e e1       	ldi	r24, 0x1E	; 30
    2656:	92 e0       	ldi	r25, 0x02	; 2
    2658:	0e 94 b8 1a 	call	0x3570	; 0x3570 <StackEmpty_i>
    265c:	00 97       	sbiw	r24, 0x00	; 0
    265e:	51 f3       	breq	.-44     	; 0x2634 <main+0x54a>
				{
					LCD_enu_Display_char(num_pressed(gettop_i(&s2)));
					pop_i(&popped, &s2);
				}

				LCD_enu_Display_char('.');
    2660:	8e e2       	ldi	r24, 0x2E	; 46
    2662:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <LCD_enu_Display_char>
				float int_res_2 = res - int_res;
    2666:	8b 85       	ldd	r24, Y+11	; 0x0b
    2668:	9c 85       	ldd	r25, Y+12	; 0x0c
    266a:	aa 27       	eor	r26, r26
    266c:	97 fd       	sbrc	r25, 7
    266e:	a0 95       	com	r26
    2670:	ba 2f       	mov	r27, r26
    2672:	bc 01       	movw	r22, r24
    2674:	cd 01       	movw	r24, r26
    2676:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    267a:	9b 01       	movw	r18, r22
    267c:	ac 01       	movw	r20, r24
    267e:	6f 89       	ldd	r22, Y+23	; 0x17
    2680:	78 8d       	ldd	r23, Y+24	; 0x18
    2682:	89 8d       	ldd	r24, Y+25	; 0x19
    2684:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2686:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    268a:	dc 01       	movw	r26, r24
    268c:	cb 01       	movw	r24, r22
    268e:	8d 83       	std	Y+5, r24	; 0x05
    2690:	9e 83       	std	Y+6, r25	; 0x06
    2692:	af 83       	std	Y+7, r26	; 0x07
    2694:	b8 87       	std	Y+8, r27	; 0x08
				int num = int_res_2 * 10;
    2696:	6d 81       	ldd	r22, Y+5	; 0x05
    2698:	7e 81       	ldd	r23, Y+6	; 0x06
    269a:	8f 81       	ldd	r24, Y+7	; 0x07
    269c:	98 85       	ldd	r25, Y+8	; 0x08
    269e:	20 e0       	ldi	r18, 0x00	; 0
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	40 e2       	ldi	r20, 0x20	; 32
    26a4:	51 e4       	ldi	r21, 0x41	; 65
    26a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26aa:	dc 01       	movw	r26, r24
    26ac:	cb 01       	movw	r24, r22
    26ae:	bc 01       	movw	r22, r24
    26b0:	cd 01       	movw	r24, r26
    26b2:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    26b6:	dc 01       	movw	r26, r24
    26b8:	cb 01       	movw	r24, r22
    26ba:	9c 83       	std	Y+4, r25	; 0x04
    26bc:	8b 83       	std	Y+3, r24	; 0x03
				LCD_enu_Display_char(num_pressed(num));
    26be:	8b 81       	ldd	r24, Y+3	; 0x03
    26c0:	0e 94 82 13 	call	0x2704	; 0x2704 <num_pressed>
    26c4:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <LCD_enu_Display_char>
			}
		}

		if(local_keypressed == 13)
    26c8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26ca:	8d 30       	cpi	r24, 0x0D	; 13
    26cc:	09 f0       	breq	.+2      	; 0x26d0 <main+0x5e6>
    26ce:	29 cd       	rjmp	.-1454   	; 0x2122 <main+0x38>
		{
			LCD_enu_Send_command(0x01);
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <LCD_enu_Send_command>
			i = 0;
    26d6:	1d 8e       	std	Y+29, r1	; 0x1d
			for(int i = 0; i < 100; i++)
    26d8:	1a 82       	std	Y+2, r1	; 0x02
    26da:	19 82       	std	Y+1, r1	; 0x01
    26dc:	0d c0       	rjmp	.+26     	; 0x26f8 <main+0x60e>
			{
				expression[i] = 0;
    26de:	29 81       	ldd	r18, Y+1	; 0x01
    26e0:	3a 81       	ldd	r19, Y+2	; 0x02
    26e2:	ce 01       	movw	r24, r28
    26e4:	4f 96       	adiw	r24, 0x1f	; 31
    26e6:	fc 01       	movw	r30, r24
    26e8:	e2 0f       	add	r30, r18
    26ea:	f3 1f       	adc	r31, r19
    26ec:	10 82       	st	Z, r1

		if(local_keypressed == 13)
		{
			LCD_enu_Send_command(0x01);
			i = 0;
			for(int i = 0; i < 100; i++)
    26ee:	89 81       	ldd	r24, Y+1	; 0x01
    26f0:	9a 81       	ldd	r25, Y+2	; 0x02
    26f2:	01 96       	adiw	r24, 0x01	; 1
    26f4:	9a 83       	std	Y+2, r25	; 0x02
    26f6:	89 83       	std	Y+1, r24	; 0x01
    26f8:	89 81       	ldd	r24, Y+1	; 0x01
    26fa:	9a 81       	ldd	r25, Y+2	; 0x02
    26fc:	84 36       	cpi	r24, 0x64	; 100
    26fe:	91 05       	cpc	r25, r1
    2700:	74 f3       	brlt	.-36     	; 0x26de <main+0x5f4>
    2702:	0f cd       	rjmp	.-1506   	; 0x2122 <main+0x38>

00002704 <num_pressed>:




u8 num_pressed(u8 copy_keypressed)
{
    2704:	df 93       	push	r29
    2706:	cf 93       	push	r28
    2708:	00 d0       	rcall	.+0      	; 0x270a <num_pressed+0x6>
    270a:	00 d0       	rcall	.+0      	; 0x270c <num_pressed+0x8>
    270c:	cd b7       	in	r28, 0x3d	; 61
    270e:	de b7       	in	r29, 0x3e	; 62
    2710:	8a 83       	std	Y+2, r24	; 0x02
	u8 var;
	switch(copy_keypressed)
    2712:	8a 81       	ldd	r24, Y+2	; 0x02
    2714:	28 2f       	mov	r18, r24
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	3c 83       	std	Y+4, r19	; 0x04
    271a:	2b 83       	std	Y+3, r18	; 0x03
    271c:	8b 81       	ldd	r24, Y+3	; 0x03
    271e:	9c 81       	ldd	r25, Y+4	; 0x04
    2720:	84 30       	cpi	r24, 0x04	; 4
    2722:	91 05       	cpc	r25, r1
    2724:	09 f4       	brne	.+2      	; 0x2728 <num_pressed+0x24>
    2726:	4b c0       	rjmp	.+150    	; 0x27be <num_pressed+0xba>
    2728:	2b 81       	ldd	r18, Y+3	; 0x03
    272a:	3c 81       	ldd	r19, Y+4	; 0x04
    272c:	25 30       	cpi	r18, 0x05	; 5
    272e:	31 05       	cpc	r19, r1
    2730:	d4 f4       	brge	.+52     	; 0x2766 <num_pressed+0x62>
    2732:	8b 81       	ldd	r24, Y+3	; 0x03
    2734:	9c 81       	ldd	r25, Y+4	; 0x04
    2736:	81 30       	cpi	r24, 0x01	; 1
    2738:	91 05       	cpc	r25, r1
    273a:	c1 f1       	breq	.+112    	; 0x27ac <num_pressed+0xa8>
    273c:	2b 81       	ldd	r18, Y+3	; 0x03
    273e:	3c 81       	ldd	r19, Y+4	; 0x04
    2740:	22 30       	cpi	r18, 0x02	; 2
    2742:	31 05       	cpc	r19, r1
    2744:	2c f4       	brge	.+10     	; 0x2750 <num_pressed+0x4c>
    2746:	8b 81       	ldd	r24, Y+3	; 0x03
    2748:	9c 81       	ldd	r25, Y+4	; 0x04
    274a:	00 97       	sbiw	r24, 0x00	; 0
    274c:	61 f1       	breq	.+88     	; 0x27a6 <num_pressed+0xa2>
    274e:	48 c0       	rjmp	.+144    	; 0x27e0 <num_pressed+0xdc>
    2750:	2b 81       	ldd	r18, Y+3	; 0x03
    2752:	3c 81       	ldd	r19, Y+4	; 0x04
    2754:	22 30       	cpi	r18, 0x02	; 2
    2756:	31 05       	cpc	r19, r1
    2758:	61 f1       	breq	.+88     	; 0x27b2 <num_pressed+0xae>
    275a:	8b 81       	ldd	r24, Y+3	; 0x03
    275c:	9c 81       	ldd	r25, Y+4	; 0x04
    275e:	83 30       	cpi	r24, 0x03	; 3
    2760:	91 05       	cpc	r25, r1
    2762:	51 f1       	breq	.+84     	; 0x27b8 <num_pressed+0xb4>
    2764:	3d c0       	rjmp	.+122    	; 0x27e0 <num_pressed+0xdc>
    2766:	2b 81       	ldd	r18, Y+3	; 0x03
    2768:	3c 81       	ldd	r19, Y+4	; 0x04
    276a:	27 30       	cpi	r18, 0x07	; 7
    276c:	31 05       	cpc	r19, r1
    276e:	81 f1       	breq	.+96     	; 0x27d0 <num_pressed+0xcc>
    2770:	8b 81       	ldd	r24, Y+3	; 0x03
    2772:	9c 81       	ldd	r25, Y+4	; 0x04
    2774:	88 30       	cpi	r24, 0x08	; 8
    2776:	91 05       	cpc	r25, r1
    2778:	5c f4       	brge	.+22     	; 0x2790 <num_pressed+0x8c>
    277a:	2b 81       	ldd	r18, Y+3	; 0x03
    277c:	3c 81       	ldd	r19, Y+4	; 0x04
    277e:	25 30       	cpi	r18, 0x05	; 5
    2780:	31 05       	cpc	r19, r1
    2782:	01 f1       	breq	.+64     	; 0x27c4 <num_pressed+0xc0>
    2784:	8b 81       	ldd	r24, Y+3	; 0x03
    2786:	9c 81       	ldd	r25, Y+4	; 0x04
    2788:	86 30       	cpi	r24, 0x06	; 6
    278a:	91 05       	cpc	r25, r1
    278c:	f1 f0       	breq	.+60     	; 0x27ca <num_pressed+0xc6>
    278e:	28 c0       	rjmp	.+80     	; 0x27e0 <num_pressed+0xdc>
    2790:	2b 81       	ldd	r18, Y+3	; 0x03
    2792:	3c 81       	ldd	r19, Y+4	; 0x04
    2794:	28 30       	cpi	r18, 0x08	; 8
    2796:	31 05       	cpc	r19, r1
    2798:	f1 f0       	breq	.+60     	; 0x27d6 <num_pressed+0xd2>
    279a:	8b 81       	ldd	r24, Y+3	; 0x03
    279c:	9c 81       	ldd	r25, Y+4	; 0x04
    279e:	89 30       	cpi	r24, 0x09	; 9
    27a0:	91 05       	cpc	r25, r1
    27a2:	e1 f0       	breq	.+56     	; 0x27dc <num_pressed+0xd8>
    27a4:	1d c0       	rjmp	.+58     	; 0x27e0 <num_pressed+0xdc>
	{
	case 0:

		var = 48;
    27a6:	80 e3       	ldi	r24, 0x30	; 48
    27a8:	89 83       	std	Y+1, r24	; 0x01
    27aa:	1a c0       	rjmp	.+52     	; 0x27e0 <num_pressed+0xdc>
		break;
	case 1:
		var = 49;
    27ac:	81 e3       	ldi	r24, 0x31	; 49
    27ae:	89 83       	std	Y+1, r24	; 0x01
    27b0:	17 c0       	rjmp	.+46     	; 0x27e0 <num_pressed+0xdc>
		break;
	case 2:
		var = 50;
    27b2:	82 e3       	ldi	r24, 0x32	; 50
    27b4:	89 83       	std	Y+1, r24	; 0x01
    27b6:	14 c0       	rjmp	.+40     	; 0x27e0 <num_pressed+0xdc>
		break;
	case 3:
		var = 51;
    27b8:	83 e3       	ldi	r24, 0x33	; 51
    27ba:	89 83       	std	Y+1, r24	; 0x01
    27bc:	11 c0       	rjmp	.+34     	; 0x27e0 <num_pressed+0xdc>
		break;
	case 4:
		var = 52;
    27be:	84 e3       	ldi	r24, 0x34	; 52
    27c0:	89 83       	std	Y+1, r24	; 0x01
    27c2:	0e c0       	rjmp	.+28     	; 0x27e0 <num_pressed+0xdc>
		break;
	case 5:
		var = 53;
    27c4:	85 e3       	ldi	r24, 0x35	; 53
    27c6:	89 83       	std	Y+1, r24	; 0x01
    27c8:	0b c0       	rjmp	.+22     	; 0x27e0 <num_pressed+0xdc>
		break;
	case 6:
		var = 54;
    27ca:	86 e3       	ldi	r24, 0x36	; 54
    27cc:	89 83       	std	Y+1, r24	; 0x01
    27ce:	08 c0       	rjmp	.+16     	; 0x27e0 <num_pressed+0xdc>
		break;
	case 7:
		var = 55;
    27d0:	87 e3       	ldi	r24, 0x37	; 55
    27d2:	89 83       	std	Y+1, r24	; 0x01
    27d4:	05 c0       	rjmp	.+10     	; 0x27e0 <num_pressed+0xdc>
		break;
	case 8:
		var = 56;
    27d6:	88 e3       	ldi	r24, 0x38	; 56
    27d8:	89 83       	std	Y+1, r24	; 0x01
    27da:	02 c0       	rjmp	.+4      	; 0x27e0 <num_pressed+0xdc>
		break;
	case 9:
		var = 57;
    27dc:	89 e3       	ldi	r24, 0x39	; 57
    27de:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return var;
    27e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    27e2:	0f 90       	pop	r0
    27e4:	0f 90       	pop	r0
    27e6:	0f 90       	pop	r0
    27e8:	0f 90       	pop	r0
    27ea:	cf 91       	pop	r28
    27ec:	df 91       	pop	r29
    27ee:	08 95       	ret

000027f0 <which_key_pressed>:



void which_key_pressed(u8 copy_keypessed)
{
    27f0:	df 93       	push	r29
    27f2:	cf 93       	push	r28
    27f4:	00 d0       	rcall	.+0      	; 0x27f6 <which_key_pressed+0x6>
    27f6:	0f 92       	push	r0
    27f8:	cd b7       	in	r28, 0x3d	; 61
    27fa:	de b7       	in	r29, 0x3e	; 62
    27fc:	89 83       	std	Y+1, r24	; 0x01


	switch (copy_keypessed)
    27fe:	89 81       	ldd	r24, Y+1	; 0x01
    2800:	28 2f       	mov	r18, r24
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	3b 83       	std	Y+3, r19	; 0x03
    2806:	2a 83       	std	Y+2, r18	; 0x02
    2808:	8a 81       	ldd	r24, Y+2	; 0x02
    280a:	9b 81       	ldd	r25, Y+3	; 0x03
    280c:	88 30       	cpi	r24, 0x08	; 8
    280e:	91 05       	cpc	r25, r1
    2810:	09 f4       	brne	.+2      	; 0x2814 <which_key_pressed+0x24>
    2812:	73 c0       	rjmp	.+230    	; 0x28fa <which_key_pressed+0x10a>
    2814:	2a 81       	ldd	r18, Y+2	; 0x02
    2816:	3b 81       	ldd	r19, Y+3	; 0x03
    2818:	29 30       	cpi	r18, 0x09	; 9
    281a:	31 05       	cpc	r19, r1
    281c:	54 f5       	brge	.+84     	; 0x2872 <which_key_pressed+0x82>
    281e:	8a 81       	ldd	r24, Y+2	; 0x02
    2820:	9b 81       	ldd	r25, Y+3	; 0x03
    2822:	84 30       	cpi	r24, 0x04	; 4
    2824:	91 05       	cpc	r25, r1
    2826:	09 f4       	brne	.+2      	; 0x282a <which_key_pressed+0x3a>
    2828:	58 c0       	rjmp	.+176    	; 0x28da <which_key_pressed+0xea>
    282a:	2a 81       	ldd	r18, Y+2	; 0x02
    282c:	3b 81       	ldd	r19, Y+3	; 0x03
    282e:	25 30       	cpi	r18, 0x05	; 5
    2830:	31 05       	cpc	r19, r1
    2832:	94 f4       	brge	.+36     	; 0x2858 <which_key_pressed+0x68>
    2834:	8a 81       	ldd	r24, Y+2	; 0x02
    2836:	9b 81       	ldd	r25, Y+3	; 0x03
    2838:	82 30       	cpi	r24, 0x02	; 2
    283a:	91 05       	cpc	r25, r1
    283c:	09 f4       	brne	.+2      	; 0x2840 <which_key_pressed+0x50>
    283e:	45 c0       	rjmp	.+138    	; 0x28ca <which_key_pressed+0xda>
    2840:	2a 81       	ldd	r18, Y+2	; 0x02
    2842:	3b 81       	ldd	r19, Y+3	; 0x03
    2844:	23 30       	cpi	r18, 0x03	; 3
    2846:	31 05       	cpc	r19, r1
    2848:	0c f0       	brlt	.+2      	; 0x284c <which_key_pressed+0x5c>
    284a:	43 c0       	rjmp	.+134    	; 0x28d2 <which_key_pressed+0xe2>
    284c:	8a 81       	ldd	r24, Y+2	; 0x02
    284e:	9b 81       	ldd	r25, Y+3	; 0x03
    2850:	81 30       	cpi	r24, 0x01	; 1
    2852:	91 05       	cpc	r25, r1
    2854:	b1 f1       	breq	.+108    	; 0x28c2 <which_key_pressed+0xd2>
    2856:	70 c0       	rjmp	.+224    	; 0x2938 <which_key_pressed+0x148>
    2858:	2a 81       	ldd	r18, Y+2	; 0x02
    285a:	3b 81       	ldd	r19, Y+3	; 0x03
    285c:	26 30       	cpi	r18, 0x06	; 6
    285e:	31 05       	cpc	r19, r1
    2860:	09 f4       	brne	.+2      	; 0x2864 <which_key_pressed+0x74>
    2862:	43 c0       	rjmp	.+134    	; 0x28ea <which_key_pressed+0xfa>
    2864:	8a 81       	ldd	r24, Y+2	; 0x02
    2866:	9b 81       	ldd	r25, Y+3	; 0x03
    2868:	87 30       	cpi	r24, 0x07	; 7
    286a:	91 05       	cpc	r25, r1
    286c:	0c f0       	brlt	.+2      	; 0x2870 <which_key_pressed+0x80>
    286e:	41 c0       	rjmp	.+130    	; 0x28f2 <which_key_pressed+0x102>
    2870:	38 c0       	rjmp	.+112    	; 0x28e2 <which_key_pressed+0xf2>
    2872:	2a 81       	ldd	r18, Y+2	; 0x02
    2874:	3b 81       	ldd	r19, Y+3	; 0x03
    2876:	2c 30       	cpi	r18, 0x0C	; 12
    2878:	31 05       	cpc	r19, r1
    287a:	09 f4       	brne	.+2      	; 0x287e <which_key_pressed+0x8e>
    287c:	4e c0       	rjmp	.+156    	; 0x291a <which_key_pressed+0x12a>
    287e:	8a 81       	ldd	r24, Y+2	; 0x02
    2880:	9b 81       	ldd	r25, Y+3	; 0x03
    2882:	8d 30       	cpi	r24, 0x0D	; 13
    2884:	91 05       	cpc	r25, r1
    2886:	5c f4       	brge	.+22     	; 0x289e <which_key_pressed+0xae>
    2888:	2a 81       	ldd	r18, Y+2	; 0x02
    288a:	3b 81       	ldd	r19, Y+3	; 0x03
    288c:	2a 30       	cpi	r18, 0x0A	; 10
    288e:	31 05       	cpc	r19, r1
    2890:	e1 f1       	breq	.+120    	; 0x290a <which_key_pressed+0x11a>
    2892:	8a 81       	ldd	r24, Y+2	; 0x02
    2894:	9b 81       	ldd	r25, Y+3	; 0x03
    2896:	8b 30       	cpi	r24, 0x0B	; 11
    2898:	91 05       	cpc	r25, r1
    289a:	dc f5       	brge	.+118    	; 0x2912 <which_key_pressed+0x122>
    289c:	32 c0       	rjmp	.+100    	; 0x2902 <which_key_pressed+0x112>
    289e:	2a 81       	ldd	r18, Y+2	; 0x02
    28a0:	3b 81       	ldd	r19, Y+3	; 0x03
    28a2:	2f 30       	cpi	r18, 0x0F	; 15
    28a4:	31 05       	cpc	r19, r1
    28a6:	09 f4       	brne	.+2      	; 0x28aa <which_key_pressed+0xba>
    28a8:	40 c0       	rjmp	.+128    	; 0x292a <which_key_pressed+0x13a>
    28aa:	8a 81       	ldd	r24, Y+2	; 0x02
    28ac:	9b 81       	ldd	r25, Y+3	; 0x03
    28ae:	80 31       	cpi	r24, 0x10	; 16
    28b0:	91 05       	cpc	r25, r1
    28b2:	09 f4       	brne	.+2      	; 0x28b6 <which_key_pressed+0xc6>
    28b4:	3e c0       	rjmp	.+124    	; 0x2932 <which_key_pressed+0x142>
    28b6:	2a 81       	ldd	r18, Y+2	; 0x02
    28b8:	3b 81       	ldd	r19, Y+3	; 0x03
    28ba:	2e 30       	cpi	r18, 0x0E	; 14
    28bc:	31 05       	cpc	r19, r1
    28be:	89 f1       	breq	.+98     	; 0x2922 <which_key_pressed+0x132>
    28c0:	3b c0       	rjmp	.+118    	; 0x2938 <which_key_pressed+0x148>
	{
	case 1: //7
		LCD_enu_Display_char(55);
    28c2:	87 e3       	ldi	r24, 0x37	; 55
    28c4:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <LCD_enu_Display_char>
    28c8:	37 c0       	rjmp	.+110    	; 0x2938 <which_key_pressed+0x148>
		break;
	case 2: // 8
		LCD_enu_Display_char(56);
    28ca:	88 e3       	ldi	r24, 0x38	; 56
    28cc:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <LCD_enu_Display_char>
    28d0:	33 c0       	rjmp	.+102    	; 0x2938 <which_key_pressed+0x148>
		break;
	case 3: // 9
		LCD_enu_Display_char(57);
    28d2:	89 e3       	ldi	r24, 0x39	; 57
    28d4:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <LCD_enu_Display_char>
    28d8:	2f c0       	rjmp	.+94     	; 0x2938 <which_key_pressed+0x148>
		break;
	case 4: // /
		LCD_enu_Display_char(47);
    28da:	8f e2       	ldi	r24, 0x2F	; 47
    28dc:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <LCD_enu_Display_char>
    28e0:	2b c0       	rjmp	.+86     	; 0x2938 <which_key_pressed+0x148>
		break;
	case 5: // 4
		LCD_enu_Display_char(52);
    28e2:	84 e3       	ldi	r24, 0x34	; 52
    28e4:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <LCD_enu_Display_char>
    28e8:	27 c0       	rjmp	.+78     	; 0x2938 <which_key_pressed+0x148>
		break;
	case 6: // 5
		LCD_enu_Display_char(53);
    28ea:	85 e3       	ldi	r24, 0x35	; 53
    28ec:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <LCD_enu_Display_char>
    28f0:	23 c0       	rjmp	.+70     	; 0x2938 <which_key_pressed+0x148>
		break;
	case 7: // 6
		LCD_enu_Display_char(54);
    28f2:	86 e3       	ldi	r24, 0x36	; 54
    28f4:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <LCD_enu_Display_char>
    28f8:	1f c0       	rjmp	.+62     	; 0x2938 <which_key_pressed+0x148>
		break;
	case 8: // *
		LCD_enu_Display_char(42);
    28fa:	8a e2       	ldi	r24, 0x2A	; 42
    28fc:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <LCD_enu_Display_char>
    2900:	1b c0       	rjmp	.+54     	; 0x2938 <which_key_pressed+0x148>
		break;
	case 9: // 1
		LCD_enu_Display_char(49);
    2902:	81 e3       	ldi	r24, 0x31	; 49
    2904:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <LCD_enu_Display_char>
    2908:	17 c0       	rjmp	.+46     	; 0x2938 <which_key_pressed+0x148>
		break;
	case 10: // 2
		LCD_enu_Display_char(50);
    290a:	82 e3       	ldi	r24, 0x32	; 50
    290c:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <LCD_enu_Display_char>
    2910:	13 c0       	rjmp	.+38     	; 0x2938 <which_key_pressed+0x148>
		break;
	case 11: // 3
		LCD_enu_Display_char(51);
    2912:	83 e3       	ldi	r24, 0x33	; 51
    2914:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <LCD_enu_Display_char>
    2918:	0f c0       	rjmp	.+30     	; 0x2938 <which_key_pressed+0x148>
		break;
	case 12: // -
		LCD_enu_Display_char(45);
    291a:	8d e2       	ldi	r24, 0x2D	; 45
    291c:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <LCD_enu_Display_char>
    2920:	0b c0       	rjmp	.+22     	; 0x2938 <which_key_pressed+0x148>
		break;
	case 14: // 0
		LCD_enu_Display_char(48);
    2922:	80 e3       	ldi	r24, 0x30	; 48
    2924:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <LCD_enu_Display_char>
    2928:	07 c0       	rjmp	.+14     	; 0x2938 <which_key_pressed+0x148>
		break;
	case 15: // =
		LCD_enu_Display_char(61);
    292a:	8d e3       	ldi	r24, 0x3D	; 61
    292c:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <LCD_enu_Display_char>
    2930:	03 c0       	rjmp	.+6      	; 0x2938 <which_key_pressed+0x148>
		break;
	case 16: // +
		LCD_enu_Display_char(43);
    2932:	8b e2       	ldi	r24, 0x2B	; 43
    2934:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <LCD_enu_Display_char>
		break;
	}

}
    2938:	0f 90       	pop	r0
    293a:	0f 90       	pop	r0
    293c:	0f 90       	pop	r0
    293e:	cf 91       	pop	r28
    2940:	df 91       	pop	r29
    2942:	08 95       	ret

00002944 <priority>:




int priority(char op)
{
    2944:	df 93       	push	r29
    2946:	cf 93       	push	r28
    2948:	00 d0       	rcall	.+0      	; 0x294a <priority+0x6>
    294a:	0f 92       	push	r0
    294c:	cd b7       	in	r28, 0x3d	; 61
    294e:	de b7       	in	r29, 0x3e	; 62
    2950:	89 83       	std	Y+1, r24	; 0x01
    if(op == '+' || op == '-')
    2952:	89 81       	ldd	r24, Y+1	; 0x01
    2954:	8b 32       	cpi	r24, 0x2B	; 43
    2956:	19 f0       	breq	.+6      	; 0x295e <priority+0x1a>
    2958:	89 81       	ldd	r24, Y+1	; 0x01
    295a:	8d 32       	cpi	r24, 0x2D	; 45
    295c:	29 f4       	brne	.+10     	; 0x2968 <priority+0x24>
    {
        return 1;
    295e:	81 e0       	ldi	r24, 0x01	; 1
    2960:	90 e0       	ldi	r25, 0x00	; 0
    2962:	9b 83       	std	Y+3, r25	; 0x03
    2964:	8a 83       	std	Y+2, r24	; 0x02
    2966:	0d c0       	rjmp	.+26     	; 0x2982 <priority+0x3e>
    }
    else if(op == '*' || op == '/')
    2968:	89 81       	ldd	r24, Y+1	; 0x01
    296a:	8a 32       	cpi	r24, 0x2A	; 42
    296c:	19 f0       	breq	.+6      	; 0x2974 <priority+0x30>
    296e:	89 81       	ldd	r24, Y+1	; 0x01
    2970:	8f 32       	cpi	r24, 0x2F	; 47
    2972:	29 f4       	brne	.+10     	; 0x297e <priority+0x3a>
    {
        return 2;
    2974:	82 e0       	ldi	r24, 0x02	; 2
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	9b 83       	std	Y+3, r25	; 0x03
    297a:	8a 83       	std	Y+2, r24	; 0x02
    297c:	02 c0       	rjmp	.+4      	; 0x2982 <priority+0x3e>
    }
    else
    {
        return 0;
    297e:	1b 82       	std	Y+3, r1	; 0x03
    2980:	1a 82       	std	Y+2, r1	; 0x02
    2982:	8a 81       	ldd	r24, Y+2	; 0x02
    2984:	9b 81       	ldd	r25, Y+3	; 0x03
    }
}
    2986:	0f 90       	pop	r0
    2988:	0f 90       	pop	r0
    298a:	0f 90       	pop	r0
    298c:	cf 91       	pop	r28
    298e:	df 91       	pop	r29
    2990:	08 95       	ret

00002992 <Post_exp>:


char * Post_exp(char exp [])
{
    2992:	0f 93       	push	r16
    2994:	1f 93       	push	r17
    2996:	df 93       	push	r29
    2998:	cf 93       	push	r28
    299a:	cd b7       	in	r28, 0x3d	; 61
    299c:	de b7       	in	r29, 0x3e	; 62
    299e:	27 97       	sbiw	r28, 0x07	; 7
    29a0:	0f b6       	in	r0, 0x3f	; 63
    29a2:	f8 94       	cli
    29a4:	de bf       	out	0x3e, r29	; 62
    29a6:	0f be       	out	0x3f, r0	; 63
    29a8:	cd bf       	out	0x3d, r28	; 61
    29aa:	9f 83       	std	Y+7, r25	; 0x07
    29ac:	8e 83       	std	Y+6, r24	; 0x06

    char poped;
    static char return_exp[100];
    int j = 0;
    29ae:	1c 82       	std	Y+4, r1	; 0x04
    29b0:	1b 82       	std	Y+3, r1	; 0x03
    for(int i = 0; exp[i] != '\0'; i++)
    29b2:	1a 82       	std	Y+2, r1	; 0x02
    29b4:	19 82       	std	Y+1, r1	; 0x01
    29b6:	f6 c0       	rjmp	.+492    	; 0x2ba4 <Post_exp+0x212>
    {
        if(exp[i] == ' ')
    29b8:	29 81       	ldd	r18, Y+1	; 0x01
    29ba:	3a 81       	ldd	r19, Y+2	; 0x02
    29bc:	8e 81       	ldd	r24, Y+6	; 0x06
    29be:	9f 81       	ldd	r25, Y+7	; 0x07
    29c0:	fc 01       	movw	r30, r24
    29c2:	e2 0f       	add	r30, r18
    29c4:	f3 1f       	adc	r31, r19
    29c6:	80 81       	ld	r24, Z
    29c8:	80 32       	cpi	r24, 0x20	; 32
    29ca:	09 f4       	brne	.+2      	; 0x29ce <Post_exp+0x3c>
    29cc:	e6 c0       	rjmp	.+460    	; 0x2b9a <Post_exp+0x208>
        {
            continue;
        }
        else if(isdigit(exp[i]) || isalpha(exp[i]))
    29ce:	29 81       	ldd	r18, Y+1	; 0x01
    29d0:	3a 81       	ldd	r19, Y+2	; 0x02
    29d2:	8e 81       	ldd	r24, Y+6	; 0x06
    29d4:	9f 81       	ldd	r25, Y+7	; 0x07
    29d6:	fc 01       	movw	r30, r24
    29d8:	e2 0f       	add	r30, r18
    29da:	f3 1f       	adc	r31, r19
    29dc:	80 81       	ld	r24, Z
    29de:	88 2f       	mov	r24, r24
    29e0:	90 e0       	ldi	r25, 0x00	; 0
    29e2:	c0 97       	sbiw	r24, 0x30	; 48
    29e4:	8a 30       	cpi	r24, 0x0A	; 10
    29e6:	91 05       	cpc	r25, r1
    29e8:	38 f1       	brcs	.+78     	; 0x2a38 <Post_exp+0xa6>
    29ea:	29 81       	ldd	r18, Y+1	; 0x01
    29ec:	3a 81       	ldd	r19, Y+2	; 0x02
    29ee:	8e 81       	ldd	r24, Y+6	; 0x06
    29f0:	9f 81       	ldd	r25, Y+7	; 0x07
    29f2:	fc 01       	movw	r30, r24
    29f4:	e2 0f       	add	r30, r18
    29f6:	f3 1f       	adc	r31, r19
    29f8:	80 81       	ld	r24, Z
    29fa:	88 2f       	mov	r24, r24
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <isalpha>
    2a02:	00 97       	sbiw	r24, 0x00	; 0
    2a04:	c9 f1       	breq	.+114    	; 0x2a78 <Post_exp+0xe6>
    2a06:	18 c0       	rjmp	.+48     	; 0x2a38 <Post_exp+0xa6>
        {
        	while (isdigit(exp[i]))
        	{
        	   return_exp[j] = exp[i];
    2a08:	4b 81       	ldd	r20, Y+3	; 0x03
    2a0a:	5c 81       	ldd	r21, Y+4	; 0x04
    2a0c:	29 81       	ldd	r18, Y+1	; 0x01
    2a0e:	3a 81       	ldd	r19, Y+2	; 0x02
    2a10:	8e 81       	ldd	r24, Y+6	; 0x06
    2a12:	9f 81       	ldd	r25, Y+7	; 0x07
    2a14:	fc 01       	movw	r30, r24
    2a16:	e2 0f       	add	r30, r18
    2a18:	f3 1f       	adc	r31, r19
    2a1a:	80 81       	ld	r24, Z
    2a1c:	fa 01       	movw	r30, r20
    2a1e:	ee 54       	subi	r30, 0x4E	; 78
    2a20:	fe 4f       	sbci	r31, 0xFE	; 254
    2a22:	80 83       	st	Z, r24
        	   j++;
    2a24:	8b 81       	ldd	r24, Y+3	; 0x03
    2a26:	9c 81       	ldd	r25, Y+4	; 0x04
    2a28:	01 96       	adiw	r24, 0x01	; 1
    2a2a:	9c 83       	std	Y+4, r25	; 0x04
    2a2c:	8b 83       	std	Y+3, r24	; 0x03
        	   i++;
    2a2e:	89 81       	ldd	r24, Y+1	; 0x01
    2a30:	9a 81       	ldd	r25, Y+2	; 0x02
    2a32:	01 96       	adiw	r24, 0x01	; 1
    2a34:	9a 83       	std	Y+2, r25	; 0x02
    2a36:	89 83       	std	Y+1, r24	; 0x01
        {
            continue;
        }
        else if(isdigit(exp[i]) || isalpha(exp[i]))
        {
        	while (isdigit(exp[i]))
    2a38:	29 81       	ldd	r18, Y+1	; 0x01
    2a3a:	3a 81       	ldd	r19, Y+2	; 0x02
    2a3c:	8e 81       	ldd	r24, Y+6	; 0x06
    2a3e:	9f 81       	ldd	r25, Y+7	; 0x07
    2a40:	fc 01       	movw	r30, r24
    2a42:	e2 0f       	add	r30, r18
    2a44:	f3 1f       	adc	r31, r19
    2a46:	80 81       	ld	r24, Z
    2a48:	88 2f       	mov	r24, r24
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	c0 97       	sbiw	r24, 0x30	; 48
    2a4e:	8a 30       	cpi	r24, 0x0A	; 10
    2a50:	91 05       	cpc	r25, r1
    2a52:	d0 f2       	brcs	.-76     	; 0x2a08 <Post_exp+0x76>
        	{
        	   return_exp[j] = exp[i];
        	   j++;
        	   i++;
        	}
        	return_exp[j] = ' ';
    2a54:	8b 81       	ldd	r24, Y+3	; 0x03
    2a56:	9c 81       	ldd	r25, Y+4	; 0x04
    2a58:	fc 01       	movw	r30, r24
    2a5a:	ee 54       	subi	r30, 0x4E	; 78
    2a5c:	fe 4f       	sbci	r31, 0xFE	; 254
    2a5e:	80 e2       	ldi	r24, 0x20	; 32
    2a60:	80 83       	st	Z, r24
        	j++;
    2a62:	8b 81       	ldd	r24, Y+3	; 0x03
    2a64:	9c 81       	ldd	r25, Y+4	; 0x04
    2a66:	01 96       	adiw	r24, 0x01	; 1
    2a68:	9c 83       	std	Y+4, r25	; 0x04
    2a6a:	8b 83       	std	Y+3, r24	; 0x03
        	i--;
    2a6c:	89 81       	ldd	r24, Y+1	; 0x01
    2a6e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a70:	01 97       	sbiw	r24, 0x01	; 1
    2a72:	9a 83       	std	Y+2, r25	; 0x02
    2a74:	89 83       	std	Y+1, r24	; 0x01
    2a76:	91 c0       	rjmp	.+290    	; 0x2b9a <Post_exp+0x208>
        }
        else if(exp[i] == '(')
    2a78:	29 81       	ldd	r18, Y+1	; 0x01
    2a7a:	3a 81       	ldd	r19, Y+2	; 0x02
    2a7c:	8e 81       	ldd	r24, Y+6	; 0x06
    2a7e:	9f 81       	ldd	r25, Y+7	; 0x07
    2a80:	fc 01       	movw	r30, r24
    2a82:	e2 0f       	add	r30, r18
    2a84:	f3 1f       	adc	r31, r19
    2a86:	80 81       	ld	r24, Z
    2a88:	88 32       	cpi	r24, 0x28	; 40
    2a8a:	71 f4       	brne	.+28     	; 0x2aa8 <Post_exp+0x116>
        {
            push(exp[i], &s);
    2a8c:	29 81       	ldd	r18, Y+1	; 0x01
    2a8e:	3a 81       	ldd	r19, Y+2	; 0x02
    2a90:	8e 81       	ldd	r24, Y+6	; 0x06
    2a92:	9f 81       	ldd	r25, Y+7	; 0x07
    2a94:	fc 01       	movw	r30, r24
    2a96:	e2 0f       	add	r30, r18
    2a98:	f3 1f       	adc	r31, r19
    2a9a:	80 81       	ld	r24, Z
    2a9c:	22 e2       	ldi	r18, 0x22	; 34
    2a9e:	32 e0       	ldi	r19, 0x02	; 2
    2aa0:	b9 01       	movw	r22, r18
    2aa2:	0e 94 7d 17 	call	0x2efa	; 0x2efa <push>
    2aa6:	79 c0       	rjmp	.+242    	; 0x2b9a <Post_exp+0x208>
        }
        else if(exp[i] == ')')
    2aa8:	29 81       	ldd	r18, Y+1	; 0x01
    2aaa:	3a 81       	ldd	r19, Y+2	; 0x02
    2aac:	8e 81       	ldd	r24, Y+6	; 0x06
    2aae:	9f 81       	ldd	r25, Y+7	; 0x07
    2ab0:	fc 01       	movw	r30, r24
    2ab2:	e2 0f       	add	r30, r18
    2ab4:	f3 1f       	adc	r31, r19
    2ab6:	80 81       	ld	r24, Z
    2ab8:	89 32       	cpi	r24, 0x29	; 41
    2aba:	09 f0       	breq	.+2      	; 0x2abe <Post_exp+0x12c>
    2abc:	47 c0       	rjmp	.+142    	; 0x2b4c <Post_exp+0x1ba>
    2abe:	16 c0       	rjmp	.+44     	; 0x2aec <Post_exp+0x15a>
        {
            while(gettop(&s) != '(')
            {
                return_exp[j] = gettop(&s);
    2ac0:	0b 81       	ldd	r16, Y+3	; 0x03
    2ac2:	1c 81       	ldd	r17, Y+4	; 0x04
    2ac4:	82 e2       	ldi	r24, 0x22	; 34
    2ac6:	92 e0       	ldi	r25, 0x02	; 2
    2ac8:	0e 94 46 18 	call	0x308c	; 0x308c <gettop>
    2acc:	f8 01       	movw	r30, r16
    2ace:	ee 54       	subi	r30, 0x4E	; 78
    2ad0:	fe 4f       	sbci	r31, 0xFE	; 254
    2ad2:	80 83       	st	Z, r24
                pop(&poped, &s);
    2ad4:	ce 01       	movw	r24, r28
    2ad6:	05 96       	adiw	r24, 0x05	; 5
    2ad8:	22 e2       	ldi	r18, 0x22	; 34
    2ada:	32 e0       	ldi	r19, 0x02	; 2
    2adc:	b9 01       	movw	r22, r18
    2ade:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <pop>
                j++;
    2ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ae6:	01 96       	adiw	r24, 0x01	; 1
    2ae8:	9c 83       	std	Y+4, r25	; 0x04
    2aea:	8b 83       	std	Y+3, r24	; 0x03
        {
            push(exp[i], &s);
        }
        else if(exp[i] == ')')
        {
            while(gettop(&s) != '(')
    2aec:	82 e2       	ldi	r24, 0x22	; 34
    2aee:	92 e0       	ldi	r25, 0x02	; 2
    2af0:	0e 94 46 18 	call	0x308c	; 0x308c <gettop>
    2af4:	88 32       	cpi	r24, 0x28	; 40
    2af6:	21 f7       	brne	.-56     	; 0x2ac0 <Post_exp+0x12e>
            {
                return_exp[j] = gettop(&s);
                pop(&poped, &s);
                j++;
            }
            pop(&poped, &s);
    2af8:	ce 01       	movw	r24, r28
    2afa:	05 96       	adiw	r24, 0x05	; 5
    2afc:	22 e2       	ldi	r18, 0x22	; 34
    2afe:	32 e0       	ldi	r19, 0x02	; 2
    2b00:	b9 01       	movw	r22, r18
    2b02:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <pop>
    2b06:	49 c0       	rjmp	.+146    	; 0x2b9a <Post_exp+0x208>
        }
        else
        {
            while(!StackEmpty(&s) && priority(exp[i]) <= priority(gettop(&s)))
            {
                return_exp[j] = gettop(&s);
    2b08:	0b 81       	ldd	r16, Y+3	; 0x03
    2b0a:	1c 81       	ldd	r17, Y+4	; 0x04
    2b0c:	82 e2       	ldi	r24, 0x22	; 34
    2b0e:	92 e0       	ldi	r25, 0x02	; 2
    2b10:	0e 94 46 18 	call	0x308c	; 0x308c <gettop>
    2b14:	f8 01       	movw	r30, r16
    2b16:	ee 54       	subi	r30, 0x4E	; 78
    2b18:	fe 4f       	sbci	r31, 0xFE	; 254
    2b1a:	80 83       	st	Z, r24
                j++;
    2b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b1e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b20:	01 96       	adiw	r24, 0x01	; 1
    2b22:	9c 83       	std	Y+4, r25	; 0x04
    2b24:	8b 83       	std	Y+3, r24	; 0x03
                return_exp[j] = ' ';
    2b26:	8b 81       	ldd	r24, Y+3	; 0x03
    2b28:	9c 81       	ldd	r25, Y+4	; 0x04
    2b2a:	fc 01       	movw	r30, r24
    2b2c:	ee 54       	subi	r30, 0x4E	; 78
    2b2e:	fe 4f       	sbci	r31, 0xFE	; 254
    2b30:	80 e2       	ldi	r24, 0x20	; 32
    2b32:	80 83       	st	Z, r24
                j++;
    2b34:	8b 81       	ldd	r24, Y+3	; 0x03
    2b36:	9c 81       	ldd	r25, Y+4	; 0x04
    2b38:	01 96       	adiw	r24, 0x01	; 1
    2b3a:	9c 83       	std	Y+4, r25	; 0x04
    2b3c:	8b 83       	std	Y+3, r24	; 0x03
                pop(&poped,&s);
    2b3e:	ce 01       	movw	r24, r28
    2b40:	05 96       	adiw	r24, 0x05	; 5
    2b42:	22 e2       	ldi	r18, 0x22	; 34
    2b44:	32 e0       	ldi	r19, 0x02	; 2
    2b46:	b9 01       	movw	r22, r18
    2b48:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <pop>
            }
            pop(&poped, &s);
        }
        else
        {
            while(!StackEmpty(&s) && priority(exp[i]) <= priority(gettop(&s)))
    2b4c:	82 e2       	ldi	r24, 0x22	; 34
    2b4e:	92 e0       	ldi	r25, 0x02	; 2
    2b50:	0e 94 f6 17 	call	0x2fec	; 0x2fec <StackEmpty>
    2b54:	00 97       	sbiw	r24, 0x00	; 0
    2b56:	a1 f4       	brne	.+40     	; 0x2b80 <Post_exp+0x1ee>
    2b58:	29 81       	ldd	r18, Y+1	; 0x01
    2b5a:	3a 81       	ldd	r19, Y+2	; 0x02
    2b5c:	8e 81       	ldd	r24, Y+6	; 0x06
    2b5e:	9f 81       	ldd	r25, Y+7	; 0x07
    2b60:	fc 01       	movw	r30, r24
    2b62:	e2 0f       	add	r30, r18
    2b64:	f3 1f       	adc	r31, r19
    2b66:	80 81       	ld	r24, Z
    2b68:	0e 94 a2 14 	call	0x2944	; 0x2944 <priority>
    2b6c:	8c 01       	movw	r16, r24
    2b6e:	82 e2       	ldi	r24, 0x22	; 34
    2b70:	92 e0       	ldi	r25, 0x02	; 2
    2b72:	0e 94 46 18 	call	0x308c	; 0x308c <gettop>
    2b76:	0e 94 a2 14 	call	0x2944	; 0x2944 <priority>
    2b7a:	80 17       	cp	r24, r16
    2b7c:	91 07       	cpc	r25, r17
    2b7e:	24 f6       	brge	.-120    	; 0x2b08 <Post_exp+0x176>
                j++;
                return_exp[j] = ' ';
                j++;
                pop(&poped,&s);
            }
            push(exp[i], &s);
    2b80:	29 81       	ldd	r18, Y+1	; 0x01
    2b82:	3a 81       	ldd	r19, Y+2	; 0x02
    2b84:	8e 81       	ldd	r24, Y+6	; 0x06
    2b86:	9f 81       	ldd	r25, Y+7	; 0x07
    2b88:	fc 01       	movw	r30, r24
    2b8a:	e2 0f       	add	r30, r18
    2b8c:	f3 1f       	adc	r31, r19
    2b8e:	80 81       	ld	r24, Z
    2b90:	22 e2       	ldi	r18, 0x22	; 34
    2b92:	32 e0       	ldi	r19, 0x02	; 2
    2b94:	b9 01       	movw	r22, r18
    2b96:	0e 94 7d 17 	call	0x2efa	; 0x2efa <push>
{

    char poped;
    static char return_exp[100];
    int j = 0;
    for(int i = 0; exp[i] != '\0'; i++)
    2b9a:	89 81       	ldd	r24, Y+1	; 0x01
    2b9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b9e:	01 96       	adiw	r24, 0x01	; 1
    2ba0:	9a 83       	std	Y+2, r25	; 0x02
    2ba2:	89 83       	std	Y+1, r24	; 0x01
    2ba4:	29 81       	ldd	r18, Y+1	; 0x01
    2ba6:	3a 81       	ldd	r19, Y+2	; 0x02
    2ba8:	8e 81       	ldd	r24, Y+6	; 0x06
    2baa:	9f 81       	ldd	r25, Y+7	; 0x07
    2bac:	fc 01       	movw	r30, r24
    2bae:	e2 0f       	add	r30, r18
    2bb0:	f3 1f       	adc	r31, r19
    2bb2:	80 81       	ld	r24, Z
    2bb4:	88 23       	and	r24, r24
    2bb6:	09 f0       	breq	.+2      	; 0x2bba <Post_exp+0x228>
    2bb8:	ff ce       	rjmp	.-514    	; 0x29b8 <Post_exp+0x26>
    2bba:	22 c0       	rjmp	.+68     	; 0x2c00 <Post_exp+0x26e>
            push(exp[i], &s);
        }
    }
    while(!StackEmpty(&s))
    {
        return_exp[j] = gettop(&s);
    2bbc:	0b 81       	ldd	r16, Y+3	; 0x03
    2bbe:	1c 81       	ldd	r17, Y+4	; 0x04
    2bc0:	82 e2       	ldi	r24, 0x22	; 34
    2bc2:	92 e0       	ldi	r25, 0x02	; 2
    2bc4:	0e 94 46 18 	call	0x308c	; 0x308c <gettop>
    2bc8:	f8 01       	movw	r30, r16
    2bca:	ee 54       	subi	r30, 0x4E	; 78
    2bcc:	fe 4f       	sbci	r31, 0xFE	; 254
    2bce:	80 83       	st	Z, r24
        j++;
    2bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd2:	9c 81       	ldd	r25, Y+4	; 0x04
    2bd4:	01 96       	adiw	r24, 0x01	; 1
    2bd6:	9c 83       	std	Y+4, r25	; 0x04
    2bd8:	8b 83       	std	Y+3, r24	; 0x03
        return_exp[j] = ' ';
    2bda:	8b 81       	ldd	r24, Y+3	; 0x03
    2bdc:	9c 81       	ldd	r25, Y+4	; 0x04
    2bde:	fc 01       	movw	r30, r24
    2be0:	ee 54       	subi	r30, 0x4E	; 78
    2be2:	fe 4f       	sbci	r31, 0xFE	; 254
    2be4:	80 e2       	ldi	r24, 0x20	; 32
    2be6:	80 83       	st	Z, r24
        j++;
    2be8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bea:	9c 81       	ldd	r25, Y+4	; 0x04
    2bec:	01 96       	adiw	r24, 0x01	; 1
    2bee:	9c 83       	std	Y+4, r25	; 0x04
    2bf0:	8b 83       	std	Y+3, r24	; 0x03
        pop(&poped,&s);
    2bf2:	ce 01       	movw	r24, r28
    2bf4:	05 96       	adiw	r24, 0x05	; 5
    2bf6:	22 e2       	ldi	r18, 0x22	; 34
    2bf8:	32 e0       	ldi	r19, 0x02	; 2
    2bfa:	b9 01       	movw	r22, r18
    2bfc:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <pop>
                pop(&poped,&s);
            }
            push(exp[i], &s);
        }
    }
    while(!StackEmpty(&s))
    2c00:	82 e2       	ldi	r24, 0x22	; 34
    2c02:	92 e0       	ldi	r25, 0x02	; 2
    2c04:	0e 94 f6 17 	call	0x2fec	; 0x2fec <StackEmpty>
    2c08:	00 97       	sbiw	r24, 0x00	; 0
    2c0a:	c1 f2       	breq	.-80     	; 0x2bbc <Post_exp+0x22a>
        j++;
        return_exp[j] = ' ';
        j++;
        pop(&poped,&s);
    }
    return_exp[j] = '\0';
    2c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c0e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c10:	fc 01       	movw	r30, r24
    2c12:	ee 54       	subi	r30, 0x4E	; 78
    2c14:	fe 4f       	sbci	r31, 0xFE	; 254
    2c16:	10 82       	st	Z, r1
    //LCD_enu_Send_command(0xc0);
    /*for(int l = 0;  return_exp[l] != '\0'; l++)
    {
    	LCD_enu_Display_char(return_exp[l]);
    }*/
    return return_exp;
    2c18:	82 eb       	ldi	r24, 0xB2	; 178
    2c1a:	91 e0       	ldi	r25, 0x01	; 1
}
    2c1c:	27 96       	adiw	r28, 0x07	; 7
    2c1e:	0f b6       	in	r0, 0x3f	; 63
    2c20:	f8 94       	cli
    2c22:	de bf       	out	0x3e, r29	; 62
    2c24:	0f be       	out	0x3f, r0	; 63
    2c26:	cd bf       	out	0x3d, r28	; 61
    2c28:	cf 91       	pop	r28
    2c2a:	df 91       	pop	r29
    2c2c:	1f 91       	pop	r17
    2c2e:	0f 91       	pop	r16
    2c30:	08 95       	ret

00002c32 <evaluate>:




float evaluate(char * ptr_exp) // 35+2-
{
    2c32:	0f 93       	push	r16
    2c34:	1f 93       	push	r17
    2c36:	df 93       	push	r29
    2c38:	cf 93       	push	r28
    2c3a:	cd b7       	in	r28, 0x3d	; 61
    2c3c:	de b7       	in	r29, 0x3e	; 62
    2c3e:	6b 97       	sbiw	r28, 0x1b	; 27
    2c40:	0f b6       	in	r0, 0x3f	; 63
    2c42:	f8 94       	cli
    2c44:	de bf       	out	0x3e, r29	; 62
    2c46:	0f be       	out	0x3f, r0	; 63
    2c48:	cd bf       	out	0x3d, r28	; 61
    2c4a:	9f 8b       	std	Y+23, r25	; 0x17
    2c4c:	8e 8b       	std	Y+22, r24	; 0x16
    char ch;
    float return_res;
    float op1;
    float op2;

    for(int i = 0; ptr_exp[i] != '\0'; i++)
    2c4e:	1c 82       	std	Y+4, r1	; 0x04
    2c50:	1b 82       	std	Y+3, r1	; 0x03
    2c52:	19 c1       	rjmp	.+562    	; 0x2e86 <evaluate+0x254>
    {
    	ch = ptr_exp[i];
    2c54:	2b 81       	ldd	r18, Y+3	; 0x03
    2c56:	3c 81       	ldd	r19, Y+4	; 0x04
    2c58:	8e 89       	ldd	r24, Y+22	; 0x16
    2c5a:	9f 89       	ldd	r25, Y+23	; 0x17
    2c5c:	fc 01       	movw	r30, r24
    2c5e:	e2 0f       	add	r30, r18
    2c60:	f3 1f       	adc	r31, r19
    2c62:	80 81       	ld	r24, Z
    2c64:	89 8b       	std	Y+17, r24	; 0x11
        if(isdigit(ch))
    2c66:	89 89       	ldd	r24, Y+17	; 0x11
    2c68:	88 2f       	mov	r24, r24
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	c0 97       	sbiw	r24, 0x30	; 48
    2c6e:	8a 30       	cpi	r24, 0x0A	; 10
    2c70:	91 05       	cpc	r25, r1
    2c72:	08 f0       	brcs	.+2      	; 0x2c76 <evaluate+0x44>
    2c74:	67 c0       	rjmp	.+206    	; 0x2d44 <evaluate+0x112>
        {
        	int num = 0;
    2c76:	1a 82       	std	Y+2, r1	; 0x02
    2c78:	19 82       	std	Y+1, r1	; 0x01
    2c7a:	21 c0       	rjmp	.+66     	; 0x2cbe <evaluate+0x8c>
        	while (ptr_exp[i] != ' ')
        	{
        	   num  = (num * 10) + (ptr_exp[i] - '0');
    2c7c:	89 81       	ldd	r24, Y+1	; 0x01
    2c7e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c80:	9c 01       	movw	r18, r24
    2c82:	22 0f       	add	r18, r18
    2c84:	33 1f       	adc	r19, r19
    2c86:	c9 01       	movw	r24, r18
    2c88:	88 0f       	add	r24, r24
    2c8a:	99 1f       	adc	r25, r25
    2c8c:	88 0f       	add	r24, r24
    2c8e:	99 1f       	adc	r25, r25
    2c90:	a9 01       	movw	r20, r18
    2c92:	48 0f       	add	r20, r24
    2c94:	59 1f       	adc	r21, r25
    2c96:	2b 81       	ldd	r18, Y+3	; 0x03
    2c98:	3c 81       	ldd	r19, Y+4	; 0x04
    2c9a:	8e 89       	ldd	r24, Y+22	; 0x16
    2c9c:	9f 89       	ldd	r25, Y+23	; 0x17
    2c9e:	fc 01       	movw	r30, r24
    2ca0:	e2 0f       	add	r30, r18
    2ca2:	f3 1f       	adc	r31, r19
    2ca4:	80 81       	ld	r24, Z
    2ca6:	88 2f       	mov	r24, r24
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	c0 97       	sbiw	r24, 0x30	; 48
    2cac:	84 0f       	add	r24, r20
    2cae:	95 1f       	adc	r25, r21
    2cb0:	9a 83       	std	Y+2, r25	; 0x02
    2cb2:	89 83       	std	Y+1, r24	; 0x01
        	   i++;
    2cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb6:	9c 81       	ldd	r25, Y+4	; 0x04
    2cb8:	01 96       	adiw	r24, 0x01	; 1
    2cba:	9c 83       	std	Y+4, r25	; 0x04
    2cbc:	8b 83       	std	Y+3, r24	; 0x03
    {
    	ch = ptr_exp[i];
        if(isdigit(ch))
        {
        	int num = 0;
        	while (ptr_exp[i] != ' ')
    2cbe:	2b 81       	ldd	r18, Y+3	; 0x03
    2cc0:	3c 81       	ldd	r19, Y+4	; 0x04
    2cc2:	8e 89       	ldd	r24, Y+22	; 0x16
    2cc4:	9f 89       	ldd	r25, Y+23	; 0x17
    2cc6:	fc 01       	movw	r30, r24
    2cc8:	e2 0f       	add	r30, r18
    2cca:	f3 1f       	adc	r31, r19
    2ccc:	80 81       	ld	r24, Z
    2cce:	80 32       	cpi	r24, 0x20	; 32
    2cd0:	a9 f6       	brne	.-86     	; 0x2c7c <evaluate+0x4a>
        	{
        	   num  = (num * 10) + (ptr_exp[i] - '0');
        	   i++;
        	}
        	i--;
    2cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd4:	9c 81       	ldd	r25, Y+4	; 0x04
    2cd6:	01 97       	sbiw	r24, 0x01	; 1
    2cd8:	9c 83       	std	Y+4, r25	; 0x04
    2cda:	8b 83       	std	Y+3, r24	; 0x03
            push_f(num, &pos_s);
    2cdc:	89 81       	ldd	r24, Y+1	; 0x01
    2cde:	9a 81       	ldd	r25, Y+2	; 0x02
    2ce0:	aa 27       	eor	r26, r26
    2ce2:	97 fd       	sbrc	r25, 7
    2ce4:	a0 95       	com	r26
    2ce6:	ba 2f       	mov	r27, r26
    2ce8:	bc 01       	movw	r22, r24
    2cea:	cd 01       	movw	r24, r26
    2cec:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    2cf0:	dc 01       	movw	r26, r24
    2cf2:	cb 01       	movw	r24, r22
    2cf4:	26 e1       	ldi	r18, 0x16	; 22
    2cf6:	32 e0       	ldi	r19, 0x02	; 2
    2cf8:	bc 01       	movw	r22, r24
    2cfa:	cd 01       	movw	r24, r26
    2cfc:	a9 01       	movw	r20, r18
    2cfe:	0e 94 c5 18 	call	0x318a	; 0x318a <push_f>
      	   *((u8 *)0x43) = gettop_f(&pos_s);
    2d02:	03 e4       	ldi	r16, 0x43	; 67
    2d04:	10 e0       	ldi	r17, 0x00	; 0
    2d06:	86 e1       	ldi	r24, 0x16	; 22
    2d08:	92 e0       	ldi	r25, 0x02	; 2
    2d0a:	0e 94 a1 19 	call	0x3342	; 0x3342 <gettop_f>
    2d0e:	dc 01       	movw	r26, r24
    2d10:	cb 01       	movw	r24, r22
    2d12:	bc 01       	movw	r22, r24
    2d14:	cd 01       	movw	r24, r26
    2d16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d1a:	dc 01       	movw	r26, r24
    2d1c:	cb 01       	movw	r24, r22
    2d1e:	d8 01       	movw	r26, r16
    2d20:	8c 93       	st	X, r24
      	   	//pop_f(&popped, &pos_s);
      	   	//push_f(num, &pos_s);
      	   	*((u8 *)0x53) = gettop_f(&pos_s);
    2d22:	03 e5       	ldi	r16, 0x53	; 83
    2d24:	10 e0       	ldi	r17, 0x00	; 0
    2d26:	86 e1       	ldi	r24, 0x16	; 22
    2d28:	92 e0       	ldi	r25, 0x02	; 2
    2d2a:	0e 94 a1 19 	call	0x3342	; 0x3342 <gettop_f>
    2d2e:	dc 01       	movw	r26, r24
    2d30:	cb 01       	movw	r24, r22
    2d32:	bc 01       	movw	r22, r24
    2d34:	cd 01       	movw	r24, r26
    2d36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d3a:	dc 01       	movw	r26, r24
    2d3c:	cb 01       	movw	r24, r22
    2d3e:	f8 01       	movw	r30, r16
    2d40:	80 83       	st	Z, r24
    2d42:	9c c0       	rjmp	.+312    	; 0x2e7c <evaluate+0x24a>
        }
        else if(ptr_exp[i] == ' ')
    2d44:	2b 81       	ldd	r18, Y+3	; 0x03
    2d46:	3c 81       	ldd	r19, Y+4	; 0x04
    2d48:	8e 89       	ldd	r24, Y+22	; 0x16
    2d4a:	9f 89       	ldd	r25, Y+23	; 0x17
    2d4c:	fc 01       	movw	r30, r24
    2d4e:	e2 0f       	add	r30, r18
    2d50:	f3 1f       	adc	r31, r19
    2d52:	80 81       	ld	r24, Z
    2d54:	80 32       	cpi	r24, 0x20	; 32
    2d56:	09 f4       	brne	.+2      	; 0x2d5a <evaluate+0x128>
    2d58:	91 c0       	rjmp	.+290    	; 0x2e7c <evaluate+0x24a>
        {
        	continue;
        }
        else
        {
            op2 = gettop_f(&pos_s);
    2d5a:	86 e1       	ldi	r24, 0x16	; 22
    2d5c:	92 e0       	ldi	r25, 0x02	; 2
    2d5e:	0e 94 a1 19 	call	0x3342	; 0x3342 <gettop_f>
    2d62:	dc 01       	movw	r26, r24
    2d64:	cb 01       	movw	r24, r22
    2d66:	8d 83       	std	Y+5, r24	; 0x05
    2d68:	9e 83       	std	Y+6, r25	; 0x06
    2d6a:	af 83       	std	Y+7, r26	; 0x07
    2d6c:	b8 87       	std	Y+8, r27	; 0x08
            pop_f(&popped, &pos_s);
    2d6e:	ce 01       	movw	r24, r28
    2d70:	42 96       	adiw	r24, 0x12	; 18
    2d72:	26 e1       	ldi	r18, 0x16	; 22
    2d74:	32 e0       	ldi	r19, 0x02	; 2
    2d76:	b9 01       	movw	r22, r18
    2d78:	0e 94 05 19 	call	0x320a	; 0x320a <pop_f>
            op1 = gettop_f(&pos_s);
    2d7c:	86 e1       	ldi	r24, 0x16	; 22
    2d7e:	92 e0       	ldi	r25, 0x02	; 2
    2d80:	0e 94 a1 19 	call	0x3342	; 0x3342 <gettop_f>
    2d84:	dc 01       	movw	r26, r24
    2d86:	cb 01       	movw	r24, r22
    2d88:	89 87       	std	Y+9, r24	; 0x09
    2d8a:	9a 87       	std	Y+10, r25	; 0x0a
    2d8c:	ab 87       	std	Y+11, r26	; 0x0b
    2d8e:	bc 87       	std	Y+12, r27	; 0x0c
            pop_f(&popped, &pos_s);
    2d90:	ce 01       	movw	r24, r28
    2d92:	42 96       	adiw	r24, 0x12	; 18
    2d94:	26 e1       	ldi	r18, 0x16	; 22
    2d96:	32 e0       	ldi	r19, 0x02	; 2
    2d98:	b9 01       	movw	r22, r18
    2d9a:	0e 94 05 19 	call	0x320a	; 0x320a <pop_f>

            if(ch == '+')
    2d9e:	89 89       	ldd	r24, Y+17	; 0x11
    2da0:	8b 32       	cpi	r24, 0x2B	; 43
    2da2:	89 f4       	brne	.+34     	; 0x2dc6 <evaluate+0x194>
            {
            	return_res = op1 + op2;
    2da4:	69 85       	ldd	r22, Y+9	; 0x09
    2da6:	7a 85       	ldd	r23, Y+10	; 0x0a
    2da8:	8b 85       	ldd	r24, Y+11	; 0x0b
    2daa:	9c 85       	ldd	r25, Y+12	; 0x0c
    2dac:	2d 81       	ldd	r18, Y+5	; 0x05
    2dae:	3e 81       	ldd	r19, Y+6	; 0x06
    2db0:	4f 81       	ldd	r20, Y+7	; 0x07
    2db2:	58 85       	ldd	r21, Y+8	; 0x08
    2db4:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2db8:	dc 01       	movw	r26, r24
    2dba:	cb 01       	movw	r24, r22
    2dbc:	8d 87       	std	Y+13, r24	; 0x0d
    2dbe:	9e 87       	std	Y+14, r25	; 0x0e
    2dc0:	af 87       	std	Y+15, r26	; 0x0f
    2dc2:	b8 8b       	std	Y+16, r27	; 0x10
    2dc4:	50 c0       	rjmp	.+160    	; 0x2e66 <evaluate+0x234>
            }
            else if(ch == '-')
    2dc6:	89 89       	ldd	r24, Y+17	; 0x11
    2dc8:	8d 32       	cpi	r24, 0x2D	; 45
    2dca:	89 f4       	brne	.+34     	; 0x2dee <evaluate+0x1bc>
            {
            	return_res = op1 - op2;
    2dcc:	69 85       	ldd	r22, Y+9	; 0x09
    2dce:	7a 85       	ldd	r23, Y+10	; 0x0a
    2dd0:	8b 85       	ldd	r24, Y+11	; 0x0b
    2dd2:	9c 85       	ldd	r25, Y+12	; 0x0c
    2dd4:	2d 81       	ldd	r18, Y+5	; 0x05
    2dd6:	3e 81       	ldd	r19, Y+6	; 0x06
    2dd8:	4f 81       	ldd	r20, Y+7	; 0x07
    2dda:	58 85       	ldd	r21, Y+8	; 0x08
    2ddc:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2de0:	dc 01       	movw	r26, r24
    2de2:	cb 01       	movw	r24, r22
    2de4:	8d 87       	std	Y+13, r24	; 0x0d
    2de6:	9e 87       	std	Y+14, r25	; 0x0e
    2de8:	af 87       	std	Y+15, r26	; 0x0f
    2dea:	b8 8b       	std	Y+16, r27	; 0x10
    2dec:	3c c0       	rjmp	.+120    	; 0x2e66 <evaluate+0x234>
            }
            else if(ch == '*')
    2dee:	89 89       	ldd	r24, Y+17	; 0x11
    2df0:	8a 32       	cpi	r24, 0x2A	; 42
    2df2:	89 f4       	brne	.+34     	; 0x2e16 <evaluate+0x1e4>
            {
             	return_res = op1 * op2;
    2df4:	69 85       	ldd	r22, Y+9	; 0x09
    2df6:	7a 85       	ldd	r23, Y+10	; 0x0a
    2df8:	8b 85       	ldd	r24, Y+11	; 0x0b
    2dfa:	9c 85       	ldd	r25, Y+12	; 0x0c
    2dfc:	2d 81       	ldd	r18, Y+5	; 0x05
    2dfe:	3e 81       	ldd	r19, Y+6	; 0x06
    2e00:	4f 81       	ldd	r20, Y+7	; 0x07
    2e02:	58 85       	ldd	r21, Y+8	; 0x08
    2e04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e08:	dc 01       	movw	r26, r24
    2e0a:	cb 01       	movw	r24, r22
    2e0c:	8d 87       	std	Y+13, r24	; 0x0d
    2e0e:	9e 87       	std	Y+14, r25	; 0x0e
    2e10:	af 87       	std	Y+15, r26	; 0x0f
    2e12:	b8 8b       	std	Y+16, r27	; 0x10
    2e14:	28 c0       	rjmp	.+80     	; 0x2e66 <evaluate+0x234>
            }
            else if(ch == '/')
    2e16:	89 89       	ldd	r24, Y+17	; 0x11
    2e18:	8f 32       	cpi	r24, 0x2F	; 47
    2e1a:	29 f5       	brne	.+74     	; 0x2e66 <evaluate+0x234>
            {
            	if(op2 == 0)
    2e1c:	6d 81       	ldd	r22, Y+5	; 0x05
    2e1e:	7e 81       	ldd	r23, Y+6	; 0x06
    2e20:	8f 81       	ldd	r24, Y+7	; 0x07
    2e22:	98 85       	ldd	r25, Y+8	; 0x08
    2e24:	20 e0       	ldi	r18, 0x00	; 0
    2e26:	30 e0       	ldi	r19, 0x00	; 0
    2e28:	40 e0       	ldi	r20, 0x00	; 0
    2e2a:	50 e0       	ldi	r21, 0x00	; 0
    2e2c:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    2e30:	88 23       	and	r24, r24
    2e32:	49 f4       	brne	.+18     	; 0x2e46 <evaluate+0x214>
            	{
            		return .9999999;
    2e34:	8e ef       	ldi	r24, 0xFE	; 254
    2e36:	9f ef       	ldi	r25, 0xFF	; 255
    2e38:	af e7       	ldi	r26, 0x7F	; 127
    2e3a:	bf e3       	ldi	r27, 0x3F	; 63
    2e3c:	88 8f       	std	Y+24, r24	; 0x18
    2e3e:	99 8f       	std	Y+25, r25	; 0x19
    2e40:	aa 8f       	std	Y+26, r26	; 0x1a
    2e42:	bb 8f       	std	Y+27, r27	; 0x1b
    2e44:	35 c0       	rjmp	.+106    	; 0x2eb0 <evaluate+0x27e>
            		break;
            	}
             	return_res = op1 / op2;
    2e46:	69 85       	ldd	r22, Y+9	; 0x09
    2e48:	7a 85       	ldd	r23, Y+10	; 0x0a
    2e4a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e4c:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e4e:	2d 81       	ldd	r18, Y+5	; 0x05
    2e50:	3e 81       	ldd	r19, Y+6	; 0x06
    2e52:	4f 81       	ldd	r20, Y+7	; 0x07
    2e54:	58 85       	ldd	r21, Y+8	; 0x08
    2e56:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2e5a:	dc 01       	movw	r26, r24
    2e5c:	cb 01       	movw	r24, r22
    2e5e:	8d 87       	std	Y+13, r24	; 0x0d
    2e60:	9e 87       	std	Y+14, r25	; 0x0e
    2e62:	af 87       	std	Y+15, r26	; 0x0f
    2e64:	b8 8b       	std	Y+16, r27	; 0x10
            }
            push_f(return_res, &pos_s);
    2e66:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e68:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e6a:	af 85       	ldd	r26, Y+15	; 0x0f
    2e6c:	b8 89       	ldd	r27, Y+16	; 0x10
    2e6e:	26 e1       	ldi	r18, 0x16	; 22
    2e70:	32 e0       	ldi	r19, 0x02	; 2
    2e72:	bc 01       	movw	r22, r24
    2e74:	cd 01       	movw	r24, r26
    2e76:	a9 01       	movw	r20, r18
    2e78:	0e 94 c5 18 	call	0x318a	; 0x318a <push_f>
    char ch;
    float return_res;
    float op1;
    float op2;

    for(int i = 0; ptr_exp[i] != '\0'; i++)
    2e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e7e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e80:	01 96       	adiw	r24, 0x01	; 1
    2e82:	9c 83       	std	Y+4, r25	; 0x04
    2e84:	8b 83       	std	Y+3, r24	; 0x03
    2e86:	2b 81       	ldd	r18, Y+3	; 0x03
    2e88:	3c 81       	ldd	r19, Y+4	; 0x04
    2e8a:	8e 89       	ldd	r24, Y+22	; 0x16
    2e8c:	9f 89       	ldd	r25, Y+23	; 0x17
    2e8e:	fc 01       	movw	r30, r24
    2e90:	e2 0f       	add	r30, r18
    2e92:	f3 1f       	adc	r31, r19
    2e94:	80 81       	ld	r24, Z
    2e96:	88 23       	and	r24, r24
    2e98:	09 f0       	breq	.+2      	; 0x2e9c <evaluate+0x26a>
    2e9a:	dc ce       	rjmp	.-584    	; 0x2c54 <evaluate+0x22>

        }
    }


    return gettop_f(&pos_s);
    2e9c:	86 e1       	ldi	r24, 0x16	; 22
    2e9e:	92 e0       	ldi	r25, 0x02	; 2
    2ea0:	0e 94 a1 19 	call	0x3342	; 0x3342 <gettop_f>
    2ea4:	dc 01       	movw	r26, r24
    2ea6:	cb 01       	movw	r24, r22
    2ea8:	88 8f       	std	Y+24, r24	; 0x18
    2eaa:	99 8f       	std	Y+25, r25	; 0x19
    2eac:	aa 8f       	std	Y+26, r26	; 0x1a
    2eae:	bb 8f       	std	Y+27, r27	; 0x1b
    2eb0:	88 8d       	ldd	r24, Y+24	; 0x18
    2eb2:	99 8d       	ldd	r25, Y+25	; 0x19
    2eb4:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2eb6:	bb 8d       	ldd	r27, Y+27	; 0x1b
}
    2eb8:	bc 01       	movw	r22, r24
    2eba:	cd 01       	movw	r24, r26
    2ebc:	6b 96       	adiw	r28, 0x1b	; 27
    2ebe:	0f b6       	in	r0, 0x3f	; 63
    2ec0:	f8 94       	cli
    2ec2:	de bf       	out	0x3e, r29	; 62
    2ec4:	0f be       	out	0x3f, r0	; 63
    2ec6:	cd bf       	out	0x3d, r28	; 61
    2ec8:	cf 91       	pop	r28
    2eca:	df 91       	pop	r29
    2ecc:	1f 91       	pop	r17
    2ece:	0f 91       	pop	r16
    2ed0:	08 95       	ret

00002ed2 <CreatStack>:




void CreatStack(Stack *ps)
{
    2ed2:	df 93       	push	r29
    2ed4:	cf 93       	push	r28
    2ed6:	00 d0       	rcall	.+0      	; 0x2ed8 <CreatStack+0x6>
    2ed8:	cd b7       	in	r28, 0x3d	; 61
    2eda:	de b7       	in	r29, 0x3e	; 62
    2edc:	9a 83       	std	Y+2, r25	; 0x02
    2ede:	89 83       	std	Y+1, r24	; 0x01
    ps->top = NULL;
    2ee0:	e9 81       	ldd	r30, Y+1	; 0x01
    2ee2:	fa 81       	ldd	r31, Y+2	; 0x02
    2ee4:	11 82       	std	Z+1, r1	; 0x01
    2ee6:	10 82       	st	Z, r1
    ps->size = 0;
    2ee8:	e9 81       	ldd	r30, Y+1	; 0x01
    2eea:	fa 81       	ldd	r31, Y+2	; 0x02
    2eec:	13 82       	std	Z+3, r1	; 0x03
    2eee:	12 82       	std	Z+2, r1	; 0x02
}
    2ef0:	0f 90       	pop	r0
    2ef2:	0f 90       	pop	r0
    2ef4:	cf 91       	pop	r28
    2ef6:	df 91       	pop	r29
    2ef8:	08 95       	ret

00002efa <push>:

void push(type item, Stack *ps)
{
    2efa:	df 93       	push	r29
    2efc:	cf 93       	push	r28
    2efe:	00 d0       	rcall	.+0      	; 0x2f00 <push+0x6>
    2f00:	00 d0       	rcall	.+0      	; 0x2f02 <push+0x8>
    2f02:	0f 92       	push	r0
    2f04:	cd b7       	in	r28, 0x3d	; 61
    2f06:	de b7       	in	r29, 0x3e	; 62
    2f08:	8b 83       	std	Y+3, r24	; 0x03
    2f0a:	7d 83       	std	Y+5, r23	; 0x05
    2f0c:	6c 83       	std	Y+4, r22	; 0x04
    StackNode *pn = (StackNode *)malloc(sizeof(StackNode));
    2f0e:	83 e0       	ldi	r24, 0x03	; 3
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <malloc>
    2f16:	9a 83       	std	Y+2, r25	; 0x02
    2f18:	89 83       	std	Y+1, r24	; 0x01
    pn->data = item;
    2f1a:	e9 81       	ldd	r30, Y+1	; 0x01
    2f1c:	fa 81       	ldd	r31, Y+2	; 0x02
    2f1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f20:	80 83       	st	Z, r24
    pn->next = ps->top;
    2f22:	ec 81       	ldd	r30, Y+4	; 0x04
    2f24:	fd 81       	ldd	r31, Y+5	; 0x05
    2f26:	80 81       	ld	r24, Z
    2f28:	91 81       	ldd	r25, Z+1	; 0x01
    2f2a:	e9 81       	ldd	r30, Y+1	; 0x01
    2f2c:	fa 81       	ldd	r31, Y+2	; 0x02
    2f2e:	92 83       	std	Z+2, r25	; 0x02
    2f30:	81 83       	std	Z+1, r24	; 0x01
    ps->top = pn;
    2f32:	ec 81       	ldd	r30, Y+4	; 0x04
    2f34:	fd 81       	ldd	r31, Y+5	; 0x05
    2f36:	89 81       	ldd	r24, Y+1	; 0x01
    2f38:	9a 81       	ldd	r25, Y+2	; 0x02
    2f3a:	91 83       	std	Z+1, r25	; 0x01
    2f3c:	80 83       	st	Z, r24
    ps->size++;
    2f3e:	ec 81       	ldd	r30, Y+4	; 0x04
    2f40:	fd 81       	ldd	r31, Y+5	; 0x05
    2f42:	82 81       	ldd	r24, Z+2	; 0x02
    2f44:	93 81       	ldd	r25, Z+3	; 0x03
    2f46:	01 96       	adiw	r24, 0x01	; 1
    2f48:	ec 81       	ldd	r30, Y+4	; 0x04
    2f4a:	fd 81       	ldd	r31, Y+5	; 0x05
    2f4c:	93 83       	std	Z+3, r25	; 0x03
    2f4e:	82 83       	std	Z+2, r24	; 0x02
}
    2f50:	0f 90       	pop	r0
    2f52:	0f 90       	pop	r0
    2f54:	0f 90       	pop	r0
    2f56:	0f 90       	pop	r0
    2f58:	0f 90       	pop	r0
    2f5a:	cf 91       	pop	r28
    2f5c:	df 91       	pop	r29
    2f5e:	08 95       	ret

00002f60 <pop>:

void pop(type *pe, Stack *ps)
{
    2f60:	df 93       	push	r29
    2f62:	cf 93       	push	r28
    2f64:	00 d0       	rcall	.+0      	; 0x2f66 <pop+0x6>
    2f66:	00 d0       	rcall	.+0      	; 0x2f68 <pop+0x8>
    2f68:	00 d0       	rcall	.+0      	; 0x2f6a <pop+0xa>
    2f6a:	cd b7       	in	r28, 0x3d	; 61
    2f6c:	de b7       	in	r29, 0x3e	; 62
    2f6e:	9c 83       	std	Y+4, r25	; 0x04
    2f70:	8b 83       	std	Y+3, r24	; 0x03
    2f72:	7e 83       	std	Y+6, r23	; 0x06
    2f74:	6d 83       	std	Y+5, r22	; 0x05
    StackNode *pn = ps->top;
    2f76:	ed 81       	ldd	r30, Y+5	; 0x05
    2f78:	fe 81       	ldd	r31, Y+6	; 0x06
    2f7a:	80 81       	ld	r24, Z
    2f7c:	91 81       	ldd	r25, Z+1	; 0x01
    2f7e:	9a 83       	std	Y+2, r25	; 0x02
    2f80:	89 83       	std	Y+1, r24	; 0x01
    *pe = pn->data;
    2f82:	e9 81       	ldd	r30, Y+1	; 0x01
    2f84:	fa 81       	ldd	r31, Y+2	; 0x02
    2f86:	80 81       	ld	r24, Z
    2f88:	eb 81       	ldd	r30, Y+3	; 0x03
    2f8a:	fc 81       	ldd	r31, Y+4	; 0x04
    2f8c:	80 83       	st	Z, r24
    ps->top = ps->top->next;
    2f8e:	ed 81       	ldd	r30, Y+5	; 0x05
    2f90:	fe 81       	ldd	r31, Y+6	; 0x06
    2f92:	01 90       	ld	r0, Z+
    2f94:	f0 81       	ld	r31, Z
    2f96:	e0 2d       	mov	r30, r0
    2f98:	81 81       	ldd	r24, Z+1	; 0x01
    2f9a:	92 81       	ldd	r25, Z+2	; 0x02
    2f9c:	ed 81       	ldd	r30, Y+5	; 0x05
    2f9e:	fe 81       	ldd	r31, Y+6	; 0x06
    2fa0:	91 83       	std	Z+1, r25	; 0x01
    2fa2:	80 83       	st	Z, r24
    free(pn);
    2fa4:	89 81       	ldd	r24, Y+1	; 0x01
    2fa6:	9a 81       	ldd	r25, Y+2	; 0x02
    2fa8:	0e 94 81 1c 	call	0x3902	; 0x3902 <free>
    ps->size--;
    2fac:	ed 81       	ldd	r30, Y+5	; 0x05
    2fae:	fe 81       	ldd	r31, Y+6	; 0x06
    2fb0:	82 81       	ldd	r24, Z+2	; 0x02
    2fb2:	93 81       	ldd	r25, Z+3	; 0x03
    2fb4:	01 97       	sbiw	r24, 0x01	; 1
    2fb6:	ed 81       	ldd	r30, Y+5	; 0x05
    2fb8:	fe 81       	ldd	r31, Y+6	; 0x06
    2fba:	93 83       	std	Z+3, r25	; 0x03
    2fbc:	82 83       	std	Z+2, r24	; 0x02
}
    2fbe:	26 96       	adiw	r28, 0x06	; 6
    2fc0:	0f b6       	in	r0, 0x3f	; 63
    2fc2:	f8 94       	cli
    2fc4:	de bf       	out	0x3e, r29	; 62
    2fc6:	0f be       	out	0x3f, r0	; 63
    2fc8:	cd bf       	out	0x3d, r28	; 61
    2fca:	cf 91       	pop	r28
    2fcc:	df 91       	pop	r29
    2fce:	08 95       	ret

00002fd0 <StackFull>:

int StackFull(Stack *ps /*is not necessary*/)
{
    2fd0:	df 93       	push	r29
    2fd2:	cf 93       	push	r28
    2fd4:	00 d0       	rcall	.+0      	; 0x2fd6 <StackFull+0x6>
    2fd6:	cd b7       	in	r28, 0x3d	; 61
    2fd8:	de b7       	in	r29, 0x3e	; 62
    2fda:	9a 83       	std	Y+2, r25	; 0x02
    2fdc:	89 83       	std	Y+1, r24	; 0x01
    return 0;
    2fde:	80 e0       	ldi	r24, 0x00	; 0
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
}
    2fe2:	0f 90       	pop	r0
    2fe4:	0f 90       	pop	r0
    2fe6:	cf 91       	pop	r28
    2fe8:	df 91       	pop	r29
    2fea:	08 95       	ret

00002fec <StackEmpty>:

int StackEmpty(Stack *ps)
{
    2fec:	df 93       	push	r29
    2fee:	cf 93       	push	r28
    2ff0:	00 d0       	rcall	.+0      	; 0x2ff2 <StackEmpty+0x6>
    2ff2:	00 d0       	rcall	.+0      	; 0x2ff4 <StackEmpty+0x8>
    2ff4:	cd b7       	in	r28, 0x3d	; 61
    2ff6:	de b7       	in	r29, 0x3e	; 62
    2ff8:	9a 83       	std	Y+2, r25	; 0x02
    2ffa:	89 83       	std	Y+1, r24	; 0x01
    return !ps->size;
    2ffc:	e9 81       	ldd	r30, Y+1	; 0x01
    2ffe:	fa 81       	ldd	r31, Y+2	; 0x02
    3000:	82 81       	ldd	r24, Z+2	; 0x02
    3002:	93 81       	ldd	r25, Z+3	; 0x03
    3004:	1c 82       	std	Y+4, r1	; 0x04
    3006:	1b 82       	std	Y+3, r1	; 0x03
    3008:	00 97       	sbiw	r24, 0x00	; 0
    300a:	21 f4       	brne	.+8      	; 0x3014 <StackEmpty+0x28>
    300c:	81 e0       	ldi	r24, 0x01	; 1
    300e:	90 e0       	ldi	r25, 0x00	; 0
    3010:	9c 83       	std	Y+4, r25	; 0x04
    3012:	8b 83       	std	Y+3, r24	; 0x03
    3014:	8b 81       	ldd	r24, Y+3	; 0x03
    3016:	9c 81       	ldd	r25, Y+4	; 0x04
}
    3018:	0f 90       	pop	r0
    301a:	0f 90       	pop	r0
    301c:	0f 90       	pop	r0
    301e:	0f 90       	pop	r0
    3020:	cf 91       	pop	r28
    3022:	df 91       	pop	r29
    3024:	08 95       	ret

00003026 <clear>:

void clear(Stack *ps)
{
    3026:	df 93       	push	r29
    3028:	cf 93       	push	r28
    302a:	00 d0       	rcall	.+0      	; 0x302c <clear+0x6>
    302c:	00 d0       	rcall	.+0      	; 0x302e <clear+0x8>
    302e:	cd b7       	in	r28, 0x3d	; 61
    3030:	de b7       	in	r29, 0x3e	; 62
    3032:	9c 83       	std	Y+4, r25	; 0x04
    3034:	8b 83       	std	Y+3, r24	; 0x03
    StackNode *pn = ps->top;
    3036:	eb 81       	ldd	r30, Y+3	; 0x03
    3038:	fc 81       	ldd	r31, Y+4	; 0x04
    303a:	80 81       	ld	r24, Z
    303c:	91 81       	ldd	r25, Z+1	; 0x01
    303e:	9a 83       	std	Y+2, r25	; 0x02
    3040:	89 83       	std	Y+1, r24	; 0x01
    3042:	15 c0       	rjmp	.+42     	; 0x306e <clear+0x48>
    while(pn)
    {
        ps->top = ps->top->next;
    3044:	eb 81       	ldd	r30, Y+3	; 0x03
    3046:	fc 81       	ldd	r31, Y+4	; 0x04
    3048:	01 90       	ld	r0, Z+
    304a:	f0 81       	ld	r31, Z
    304c:	e0 2d       	mov	r30, r0
    304e:	81 81       	ldd	r24, Z+1	; 0x01
    3050:	92 81       	ldd	r25, Z+2	; 0x02
    3052:	eb 81       	ldd	r30, Y+3	; 0x03
    3054:	fc 81       	ldd	r31, Y+4	; 0x04
    3056:	91 83       	std	Z+1, r25	; 0x01
    3058:	80 83       	st	Z, r24
        free(pn);
    305a:	89 81       	ldd	r24, Y+1	; 0x01
    305c:	9a 81       	ldd	r25, Y+2	; 0x02
    305e:	0e 94 81 1c 	call	0x3902	; 0x3902 <free>
        pn = ps->top;
    3062:	eb 81       	ldd	r30, Y+3	; 0x03
    3064:	fc 81       	ldd	r31, Y+4	; 0x04
    3066:	80 81       	ld	r24, Z
    3068:	91 81       	ldd	r25, Z+1	; 0x01
    306a:	9a 83       	std	Y+2, r25	; 0x02
    306c:	89 83       	std	Y+1, r24	; 0x01
}

void clear(Stack *ps)
{
    StackNode *pn = ps->top;
    while(pn)
    306e:	89 81       	ldd	r24, Y+1	; 0x01
    3070:	9a 81       	ldd	r25, Y+2	; 0x02
    3072:	00 97       	sbiw	r24, 0x00	; 0
    3074:	39 f7       	brne	.-50     	; 0x3044 <clear+0x1e>
    {
        ps->top = ps->top->next;
        free(pn);
        pn = ps->top;
    }
    ps->size = 0;
    3076:	eb 81       	ldd	r30, Y+3	; 0x03
    3078:	fc 81       	ldd	r31, Y+4	; 0x04
    307a:	13 82       	std	Z+3, r1	; 0x03
    307c:	12 82       	std	Z+2, r1	; 0x02
}
    307e:	0f 90       	pop	r0
    3080:	0f 90       	pop	r0
    3082:	0f 90       	pop	r0
    3084:	0f 90       	pop	r0
    3086:	cf 91       	pop	r28
    3088:	df 91       	pop	r29
    308a:	08 95       	ret

0000308c <gettop>:

type gettop(Stack *ps)
{
    308c:	df 93       	push	r29
    308e:	cf 93       	push	r28
    3090:	00 d0       	rcall	.+0      	; 0x3092 <gettop+0x6>
    3092:	cd b7       	in	r28, 0x3d	; 61
    3094:	de b7       	in	r29, 0x3e	; 62
    3096:	9a 83       	std	Y+2, r25	; 0x02
    3098:	89 83       	std	Y+1, r24	; 0x01
    return ps->top->data;
    309a:	e9 81       	ldd	r30, Y+1	; 0x01
    309c:	fa 81       	ldd	r31, Y+2	; 0x02
    309e:	01 90       	ld	r0, Z+
    30a0:	f0 81       	ld	r31, Z
    30a2:	e0 2d       	mov	r30, r0
    30a4:	80 81       	ld	r24, Z
}
    30a6:	0f 90       	pop	r0
    30a8:	0f 90       	pop	r0
    30aa:	cf 91       	pop	r28
    30ac:	df 91       	pop	r29
    30ae:	08 95       	ret

000030b0 <getsize>:

int getsize(Stack *ps)
{
    30b0:	df 93       	push	r29
    30b2:	cf 93       	push	r28
    30b4:	00 d0       	rcall	.+0      	; 0x30b6 <getsize+0x6>
    30b6:	cd b7       	in	r28, 0x3d	; 61
    30b8:	de b7       	in	r29, 0x3e	; 62
    30ba:	9a 83       	std	Y+2, r25	; 0x02
    30bc:	89 83       	std	Y+1, r24	; 0x01
    return ps->size;
    30be:	e9 81       	ldd	r30, Y+1	; 0x01
    30c0:	fa 81       	ldd	r31, Y+2	; 0x02
    30c2:	82 81       	ldd	r24, Z+2	; 0x02
    30c4:	93 81       	ldd	r25, Z+3	; 0x03
}
    30c6:	0f 90       	pop	r0
    30c8:	0f 90       	pop	r0
    30ca:	cf 91       	pop	r28
    30cc:	df 91       	pop	r29
    30ce:	08 95       	ret

000030d0 <display>:

void display(type element)
{
    30d0:	df 93       	push	r29
    30d2:	cf 93       	push	r28
    30d4:	0f 92       	push	r0
    30d6:	cd b7       	in	r28, 0x3d	; 61
    30d8:	de b7       	in	r29, 0x3e	; 62
    30da:	89 83       	std	Y+1, r24	; 0x01
    printf("item : %c\n", element);
    30dc:	89 81       	ldd	r24, Y+1	; 0x01
    30de:	28 2f       	mov	r18, r24
    30e0:	30 e0       	ldi	r19, 0x00	; 0
    30e2:	00 d0       	rcall	.+0      	; 0x30e4 <display+0x14>
    30e4:	00 d0       	rcall	.+0      	; 0x30e6 <display+0x16>
    30e6:	ed b7       	in	r30, 0x3d	; 61
    30e8:	fe b7       	in	r31, 0x3e	; 62
    30ea:	31 96       	adiw	r30, 0x01	; 1
    30ec:	80 e6       	ldi	r24, 0x60	; 96
    30ee:	90 e0       	ldi	r25, 0x00	; 0
    30f0:	91 83       	std	Z+1, r25	; 0x01
    30f2:	80 83       	st	Z, r24
    30f4:	33 83       	std	Z+3, r19	; 0x03
    30f6:	22 83       	std	Z+2, r18	; 0x02
    30f8:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <printf>
    30fc:	0f 90       	pop	r0
    30fe:	0f 90       	pop	r0
    3100:	0f 90       	pop	r0
    3102:	0f 90       	pop	r0
}
    3104:	0f 90       	pop	r0
    3106:	cf 91       	pop	r28
    3108:	df 91       	pop	r29
    310a:	08 95       	ret

0000310c <Traverse>:

void Traverse(Stack *ps, void(*pf)(type))
{
    310c:	df 93       	push	r29
    310e:	cf 93       	push	r28
    3110:	00 d0       	rcall	.+0      	; 0x3112 <Traverse+0x6>
    3112:	00 d0       	rcall	.+0      	; 0x3114 <Traverse+0x8>
    3114:	00 d0       	rcall	.+0      	; 0x3116 <Traverse+0xa>
    3116:	cd b7       	in	r28, 0x3d	; 61
    3118:	de b7       	in	r29, 0x3e	; 62
    311a:	9c 83       	std	Y+4, r25	; 0x04
    311c:	8b 83       	std	Y+3, r24	; 0x03
    311e:	7e 83       	std	Y+6, r23	; 0x06
    3120:	6d 83       	std	Y+5, r22	; 0x05
    StackNode *pn = ps->top;
    3122:	eb 81       	ldd	r30, Y+3	; 0x03
    3124:	fc 81       	ldd	r31, Y+4	; 0x04
    3126:	80 81       	ld	r24, Z
    3128:	91 81       	ldd	r25, Z+1	; 0x01
    312a:	9a 83       	std	Y+2, r25	; 0x02
    312c:	89 83       	std	Y+1, r24	; 0x01
    312e:	0c c0       	rjmp	.+24     	; 0x3148 <Traverse+0x3c>
    while(pn)
    {
        (*pf)(pn->data);
    3130:	e9 81       	ldd	r30, Y+1	; 0x01
    3132:	fa 81       	ldd	r31, Y+2	; 0x02
    3134:	80 81       	ld	r24, Z
    3136:	ed 81       	ldd	r30, Y+5	; 0x05
    3138:	fe 81       	ldd	r31, Y+6	; 0x06
    313a:	09 95       	icall
        pn = pn->next;
    313c:	e9 81       	ldd	r30, Y+1	; 0x01
    313e:	fa 81       	ldd	r31, Y+2	; 0x02
    3140:	81 81       	ldd	r24, Z+1	; 0x01
    3142:	92 81       	ldd	r25, Z+2	; 0x02
    3144:	9a 83       	std	Y+2, r25	; 0x02
    3146:	89 83       	std	Y+1, r24	; 0x01
}

void Traverse(Stack *ps, void(*pf)(type))
{
    StackNode *pn = ps->top;
    while(pn)
    3148:	89 81       	ldd	r24, Y+1	; 0x01
    314a:	9a 81       	ldd	r25, Y+2	; 0x02
    314c:	00 97       	sbiw	r24, 0x00	; 0
    314e:	81 f7       	brne	.-32     	; 0x3130 <Traverse+0x24>
    {
        (*pf)(pn->data);
        pn = pn->next;
    }
}
    3150:	26 96       	adiw	r28, 0x06	; 6
    3152:	0f b6       	in	r0, 0x3f	; 63
    3154:	f8 94       	cli
    3156:	de bf       	out	0x3e, r29	; 62
    3158:	0f be       	out	0x3f, r0	; 63
    315a:	cd bf       	out	0x3d, r28	; 61
    315c:	cf 91       	pop	r28
    315e:	df 91       	pop	r29
    3160:	08 95       	ret

00003162 <CreatStack_f>:
#include "stack_float.h"



void CreatStack_f(Stack_f *ps)
{
    3162:	df 93       	push	r29
    3164:	cf 93       	push	r28
    3166:	00 d0       	rcall	.+0      	; 0x3168 <CreatStack_f+0x6>
    3168:	cd b7       	in	r28, 0x3d	; 61
    316a:	de b7       	in	r29, 0x3e	; 62
    316c:	9a 83       	std	Y+2, r25	; 0x02
    316e:	89 83       	std	Y+1, r24	; 0x01
    ps->top = NULL;
    3170:	e9 81       	ldd	r30, Y+1	; 0x01
    3172:	fa 81       	ldd	r31, Y+2	; 0x02
    3174:	11 82       	std	Z+1, r1	; 0x01
    3176:	10 82       	st	Z, r1
    ps->size = 0;
    3178:	e9 81       	ldd	r30, Y+1	; 0x01
    317a:	fa 81       	ldd	r31, Y+2	; 0x02
    317c:	13 82       	std	Z+3, r1	; 0x03
    317e:	12 82       	std	Z+2, r1	; 0x02
}
    3180:	0f 90       	pop	r0
    3182:	0f 90       	pop	r0
    3184:	cf 91       	pop	r28
    3186:	df 91       	pop	r29
    3188:	08 95       	ret

0000318a <push_f>:

void push_f(type_f item, Stack_f *ps)
{
    318a:	df 93       	push	r29
    318c:	cf 93       	push	r28
    318e:	cd b7       	in	r28, 0x3d	; 61
    3190:	de b7       	in	r29, 0x3e	; 62
    3192:	28 97       	sbiw	r28, 0x08	; 8
    3194:	0f b6       	in	r0, 0x3f	; 63
    3196:	f8 94       	cli
    3198:	de bf       	out	0x3e, r29	; 62
    319a:	0f be       	out	0x3f, r0	; 63
    319c:	cd bf       	out	0x3d, r28	; 61
    319e:	6b 83       	std	Y+3, r22	; 0x03
    31a0:	7c 83       	std	Y+4, r23	; 0x04
    31a2:	8d 83       	std	Y+5, r24	; 0x05
    31a4:	9e 83       	std	Y+6, r25	; 0x06
    31a6:	58 87       	std	Y+8, r21	; 0x08
    31a8:	4f 83       	std	Y+7, r20	; 0x07
    StackNode_f *pn = (StackNode_f *)malloc(sizeof(StackNode_f));
    31aa:	86 e0       	ldi	r24, 0x06	; 6
    31ac:	90 e0       	ldi	r25, 0x00	; 0
    31ae:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <malloc>
    31b2:	9a 83       	std	Y+2, r25	; 0x02
    31b4:	89 83       	std	Y+1, r24	; 0x01
    pn->data = item;
    31b6:	e9 81       	ldd	r30, Y+1	; 0x01
    31b8:	fa 81       	ldd	r31, Y+2	; 0x02
    31ba:	8b 81       	ldd	r24, Y+3	; 0x03
    31bc:	9c 81       	ldd	r25, Y+4	; 0x04
    31be:	ad 81       	ldd	r26, Y+5	; 0x05
    31c0:	be 81       	ldd	r27, Y+6	; 0x06
    31c2:	80 83       	st	Z, r24
    31c4:	91 83       	std	Z+1, r25	; 0x01
    31c6:	a2 83       	std	Z+2, r26	; 0x02
    31c8:	b3 83       	std	Z+3, r27	; 0x03
    pn->next = ps->top;
    31ca:	ef 81       	ldd	r30, Y+7	; 0x07
    31cc:	f8 85       	ldd	r31, Y+8	; 0x08
    31ce:	80 81       	ld	r24, Z
    31d0:	91 81       	ldd	r25, Z+1	; 0x01
    31d2:	e9 81       	ldd	r30, Y+1	; 0x01
    31d4:	fa 81       	ldd	r31, Y+2	; 0x02
    31d6:	95 83       	std	Z+5, r25	; 0x05
    31d8:	84 83       	std	Z+4, r24	; 0x04
    ps->top = pn;
    31da:	ef 81       	ldd	r30, Y+7	; 0x07
    31dc:	f8 85       	ldd	r31, Y+8	; 0x08
    31de:	89 81       	ldd	r24, Y+1	; 0x01
    31e0:	9a 81       	ldd	r25, Y+2	; 0x02
    31e2:	91 83       	std	Z+1, r25	; 0x01
    31e4:	80 83       	st	Z, r24
    ps->size++;
    31e6:	ef 81       	ldd	r30, Y+7	; 0x07
    31e8:	f8 85       	ldd	r31, Y+8	; 0x08
    31ea:	82 81       	ldd	r24, Z+2	; 0x02
    31ec:	93 81       	ldd	r25, Z+3	; 0x03
    31ee:	01 96       	adiw	r24, 0x01	; 1
    31f0:	ef 81       	ldd	r30, Y+7	; 0x07
    31f2:	f8 85       	ldd	r31, Y+8	; 0x08
    31f4:	93 83       	std	Z+3, r25	; 0x03
    31f6:	82 83       	std	Z+2, r24	; 0x02
}
    31f8:	28 96       	adiw	r28, 0x08	; 8
    31fa:	0f b6       	in	r0, 0x3f	; 63
    31fc:	f8 94       	cli
    31fe:	de bf       	out	0x3e, r29	; 62
    3200:	0f be       	out	0x3f, r0	; 63
    3202:	cd bf       	out	0x3d, r28	; 61
    3204:	cf 91       	pop	r28
    3206:	df 91       	pop	r29
    3208:	08 95       	ret

0000320a <pop_f>:

void pop_f(type_f *pe, Stack_f *ps)
{
    320a:	df 93       	push	r29
    320c:	cf 93       	push	r28
    320e:	00 d0       	rcall	.+0      	; 0x3210 <pop_f+0x6>
    3210:	00 d0       	rcall	.+0      	; 0x3212 <pop_f+0x8>
    3212:	00 d0       	rcall	.+0      	; 0x3214 <pop_f+0xa>
    3214:	cd b7       	in	r28, 0x3d	; 61
    3216:	de b7       	in	r29, 0x3e	; 62
    3218:	9c 83       	std	Y+4, r25	; 0x04
    321a:	8b 83       	std	Y+3, r24	; 0x03
    321c:	7e 83       	std	Y+6, r23	; 0x06
    321e:	6d 83       	std	Y+5, r22	; 0x05
    StackNode_f *pn = ps->top;
    3220:	ed 81       	ldd	r30, Y+5	; 0x05
    3222:	fe 81       	ldd	r31, Y+6	; 0x06
    3224:	80 81       	ld	r24, Z
    3226:	91 81       	ldd	r25, Z+1	; 0x01
    3228:	9a 83       	std	Y+2, r25	; 0x02
    322a:	89 83       	std	Y+1, r24	; 0x01
    *pe = pn->data;
    322c:	e9 81       	ldd	r30, Y+1	; 0x01
    322e:	fa 81       	ldd	r31, Y+2	; 0x02
    3230:	80 81       	ld	r24, Z
    3232:	91 81       	ldd	r25, Z+1	; 0x01
    3234:	a2 81       	ldd	r26, Z+2	; 0x02
    3236:	b3 81       	ldd	r27, Z+3	; 0x03
    3238:	eb 81       	ldd	r30, Y+3	; 0x03
    323a:	fc 81       	ldd	r31, Y+4	; 0x04
    323c:	80 83       	st	Z, r24
    323e:	91 83       	std	Z+1, r25	; 0x01
    3240:	a2 83       	std	Z+2, r26	; 0x02
    3242:	b3 83       	std	Z+3, r27	; 0x03
    ps->top = ps->top->next;
    3244:	ed 81       	ldd	r30, Y+5	; 0x05
    3246:	fe 81       	ldd	r31, Y+6	; 0x06
    3248:	01 90       	ld	r0, Z+
    324a:	f0 81       	ld	r31, Z
    324c:	e0 2d       	mov	r30, r0
    324e:	84 81       	ldd	r24, Z+4	; 0x04
    3250:	95 81       	ldd	r25, Z+5	; 0x05
    3252:	ed 81       	ldd	r30, Y+5	; 0x05
    3254:	fe 81       	ldd	r31, Y+6	; 0x06
    3256:	91 83       	std	Z+1, r25	; 0x01
    3258:	80 83       	st	Z, r24
    free(pn);
    325a:	89 81       	ldd	r24, Y+1	; 0x01
    325c:	9a 81       	ldd	r25, Y+2	; 0x02
    325e:	0e 94 81 1c 	call	0x3902	; 0x3902 <free>
    ps->size--;
    3262:	ed 81       	ldd	r30, Y+5	; 0x05
    3264:	fe 81       	ldd	r31, Y+6	; 0x06
    3266:	82 81       	ldd	r24, Z+2	; 0x02
    3268:	93 81       	ldd	r25, Z+3	; 0x03
    326a:	01 97       	sbiw	r24, 0x01	; 1
    326c:	ed 81       	ldd	r30, Y+5	; 0x05
    326e:	fe 81       	ldd	r31, Y+6	; 0x06
    3270:	93 83       	std	Z+3, r25	; 0x03
    3272:	82 83       	std	Z+2, r24	; 0x02
}
    3274:	26 96       	adiw	r28, 0x06	; 6
    3276:	0f b6       	in	r0, 0x3f	; 63
    3278:	f8 94       	cli
    327a:	de bf       	out	0x3e, r29	; 62
    327c:	0f be       	out	0x3f, r0	; 63
    327e:	cd bf       	out	0x3d, r28	; 61
    3280:	cf 91       	pop	r28
    3282:	df 91       	pop	r29
    3284:	08 95       	ret

00003286 <StackFull_f>:

int StackFull_f(Stack_f *ps /*is not necessary*/)
{
    3286:	df 93       	push	r29
    3288:	cf 93       	push	r28
    328a:	00 d0       	rcall	.+0      	; 0x328c <StackFull_f+0x6>
    328c:	cd b7       	in	r28, 0x3d	; 61
    328e:	de b7       	in	r29, 0x3e	; 62
    3290:	9a 83       	std	Y+2, r25	; 0x02
    3292:	89 83       	std	Y+1, r24	; 0x01
    return 0;
    3294:	80 e0       	ldi	r24, 0x00	; 0
    3296:	90 e0       	ldi	r25, 0x00	; 0
}
    3298:	0f 90       	pop	r0
    329a:	0f 90       	pop	r0
    329c:	cf 91       	pop	r28
    329e:	df 91       	pop	r29
    32a0:	08 95       	ret

000032a2 <StackEmpty_f>:

int StackEmpty_f(Stack_f *ps)
{
    32a2:	df 93       	push	r29
    32a4:	cf 93       	push	r28
    32a6:	00 d0       	rcall	.+0      	; 0x32a8 <StackEmpty_f+0x6>
    32a8:	00 d0       	rcall	.+0      	; 0x32aa <StackEmpty_f+0x8>
    32aa:	cd b7       	in	r28, 0x3d	; 61
    32ac:	de b7       	in	r29, 0x3e	; 62
    32ae:	9a 83       	std	Y+2, r25	; 0x02
    32b0:	89 83       	std	Y+1, r24	; 0x01
    return !ps->size;
    32b2:	e9 81       	ldd	r30, Y+1	; 0x01
    32b4:	fa 81       	ldd	r31, Y+2	; 0x02
    32b6:	82 81       	ldd	r24, Z+2	; 0x02
    32b8:	93 81       	ldd	r25, Z+3	; 0x03
    32ba:	1c 82       	std	Y+4, r1	; 0x04
    32bc:	1b 82       	std	Y+3, r1	; 0x03
    32be:	00 97       	sbiw	r24, 0x00	; 0
    32c0:	21 f4       	brne	.+8      	; 0x32ca <StackEmpty_f+0x28>
    32c2:	81 e0       	ldi	r24, 0x01	; 1
    32c4:	90 e0       	ldi	r25, 0x00	; 0
    32c6:	9c 83       	std	Y+4, r25	; 0x04
    32c8:	8b 83       	std	Y+3, r24	; 0x03
    32ca:	8b 81       	ldd	r24, Y+3	; 0x03
    32cc:	9c 81       	ldd	r25, Y+4	; 0x04
}
    32ce:	0f 90       	pop	r0
    32d0:	0f 90       	pop	r0
    32d2:	0f 90       	pop	r0
    32d4:	0f 90       	pop	r0
    32d6:	cf 91       	pop	r28
    32d8:	df 91       	pop	r29
    32da:	08 95       	ret

000032dc <clear_f>:

void clear_f(Stack_f *ps)
{
    32dc:	df 93       	push	r29
    32de:	cf 93       	push	r28
    32e0:	00 d0       	rcall	.+0      	; 0x32e2 <clear_f+0x6>
    32e2:	00 d0       	rcall	.+0      	; 0x32e4 <clear_f+0x8>
    32e4:	cd b7       	in	r28, 0x3d	; 61
    32e6:	de b7       	in	r29, 0x3e	; 62
    32e8:	9c 83       	std	Y+4, r25	; 0x04
    32ea:	8b 83       	std	Y+3, r24	; 0x03
    StackNode_f *pn = ps->top;
    32ec:	eb 81       	ldd	r30, Y+3	; 0x03
    32ee:	fc 81       	ldd	r31, Y+4	; 0x04
    32f0:	80 81       	ld	r24, Z
    32f2:	91 81       	ldd	r25, Z+1	; 0x01
    32f4:	9a 83       	std	Y+2, r25	; 0x02
    32f6:	89 83       	std	Y+1, r24	; 0x01
    32f8:	15 c0       	rjmp	.+42     	; 0x3324 <clear_f+0x48>
    while(pn)
    {
        ps->top = ps->top->next;
    32fa:	eb 81       	ldd	r30, Y+3	; 0x03
    32fc:	fc 81       	ldd	r31, Y+4	; 0x04
    32fe:	01 90       	ld	r0, Z+
    3300:	f0 81       	ld	r31, Z
    3302:	e0 2d       	mov	r30, r0
    3304:	84 81       	ldd	r24, Z+4	; 0x04
    3306:	95 81       	ldd	r25, Z+5	; 0x05
    3308:	eb 81       	ldd	r30, Y+3	; 0x03
    330a:	fc 81       	ldd	r31, Y+4	; 0x04
    330c:	91 83       	std	Z+1, r25	; 0x01
    330e:	80 83       	st	Z, r24
        free(pn);
    3310:	89 81       	ldd	r24, Y+1	; 0x01
    3312:	9a 81       	ldd	r25, Y+2	; 0x02
    3314:	0e 94 81 1c 	call	0x3902	; 0x3902 <free>
        pn = ps->top;
    3318:	eb 81       	ldd	r30, Y+3	; 0x03
    331a:	fc 81       	ldd	r31, Y+4	; 0x04
    331c:	80 81       	ld	r24, Z
    331e:	91 81       	ldd	r25, Z+1	; 0x01
    3320:	9a 83       	std	Y+2, r25	; 0x02
    3322:	89 83       	std	Y+1, r24	; 0x01
}

void clear_f(Stack_f *ps)
{
    StackNode_f *pn = ps->top;
    while(pn)
    3324:	89 81       	ldd	r24, Y+1	; 0x01
    3326:	9a 81       	ldd	r25, Y+2	; 0x02
    3328:	00 97       	sbiw	r24, 0x00	; 0
    332a:	39 f7       	brne	.-50     	; 0x32fa <clear_f+0x1e>
    {
        ps->top = ps->top->next;
        free(pn);
        pn = ps->top;
    }
    ps->size = 0;
    332c:	eb 81       	ldd	r30, Y+3	; 0x03
    332e:	fc 81       	ldd	r31, Y+4	; 0x04
    3330:	13 82       	std	Z+3, r1	; 0x03
    3332:	12 82       	std	Z+2, r1	; 0x02
}
    3334:	0f 90       	pop	r0
    3336:	0f 90       	pop	r0
    3338:	0f 90       	pop	r0
    333a:	0f 90       	pop	r0
    333c:	cf 91       	pop	r28
    333e:	df 91       	pop	r29
    3340:	08 95       	ret

00003342 <gettop_f>:

type_f gettop_f(Stack_f *ps)
{
    3342:	df 93       	push	r29
    3344:	cf 93       	push	r28
    3346:	00 d0       	rcall	.+0      	; 0x3348 <gettop_f+0x6>
    3348:	cd b7       	in	r28, 0x3d	; 61
    334a:	de b7       	in	r29, 0x3e	; 62
    334c:	9a 83       	std	Y+2, r25	; 0x02
    334e:	89 83       	std	Y+1, r24	; 0x01
    return ps->top->data;
    3350:	e9 81       	ldd	r30, Y+1	; 0x01
    3352:	fa 81       	ldd	r31, Y+2	; 0x02
    3354:	01 90       	ld	r0, Z+
    3356:	f0 81       	ld	r31, Z
    3358:	e0 2d       	mov	r30, r0
    335a:	80 81       	ld	r24, Z
    335c:	91 81       	ldd	r25, Z+1	; 0x01
    335e:	a2 81       	ldd	r26, Z+2	; 0x02
    3360:	b3 81       	ldd	r27, Z+3	; 0x03
}
    3362:	bc 01       	movw	r22, r24
    3364:	cd 01       	movw	r24, r26
    3366:	0f 90       	pop	r0
    3368:	0f 90       	pop	r0
    336a:	cf 91       	pop	r28
    336c:	df 91       	pop	r29
    336e:	08 95       	ret

00003370 <getsize_f>:

int getsize_f(Stack_f *ps)
{
    3370:	df 93       	push	r29
    3372:	cf 93       	push	r28
    3374:	00 d0       	rcall	.+0      	; 0x3376 <getsize_f+0x6>
    3376:	cd b7       	in	r28, 0x3d	; 61
    3378:	de b7       	in	r29, 0x3e	; 62
    337a:	9a 83       	std	Y+2, r25	; 0x02
    337c:	89 83       	std	Y+1, r24	; 0x01
    return ps->size;
    337e:	e9 81       	ldd	r30, Y+1	; 0x01
    3380:	fa 81       	ldd	r31, Y+2	; 0x02
    3382:	82 81       	ldd	r24, Z+2	; 0x02
    3384:	93 81       	ldd	r25, Z+3	; 0x03
}
    3386:	0f 90       	pop	r0
    3388:	0f 90       	pop	r0
    338a:	cf 91       	pop	r28
    338c:	df 91       	pop	r29
    338e:	08 95       	ret

00003390 <display_f>:

void display_f(type_f element)
{
    3390:	df 93       	push	r29
    3392:	cf 93       	push	r28
    3394:	00 d0       	rcall	.+0      	; 0x3396 <display_f+0x6>
    3396:	00 d0       	rcall	.+0      	; 0x3398 <display_f+0x8>
    3398:	cd b7       	in	r28, 0x3d	; 61
    339a:	de b7       	in	r29, 0x3e	; 62
    339c:	69 83       	std	Y+1, r22	; 0x01
    339e:	7a 83       	std	Y+2, r23	; 0x02
    33a0:	8b 83       	std	Y+3, r24	; 0x03
    33a2:	9c 83       	std	Y+4, r25	; 0x04
    printf("item : %0.1f\n", element);
    33a4:	00 d0       	rcall	.+0      	; 0x33a6 <display_f+0x16>
    33a6:	00 d0       	rcall	.+0      	; 0x33a8 <display_f+0x18>
    33a8:	00 d0       	rcall	.+0      	; 0x33aa <display_f+0x1a>
    33aa:	ed b7       	in	r30, 0x3d	; 61
    33ac:	fe b7       	in	r31, 0x3e	; 62
    33ae:	31 96       	adiw	r30, 0x01	; 1
    33b0:	8b e6       	ldi	r24, 0x6B	; 107
    33b2:	90 e0       	ldi	r25, 0x00	; 0
    33b4:	91 83       	std	Z+1, r25	; 0x01
    33b6:	80 83       	st	Z, r24
    33b8:	89 81       	ldd	r24, Y+1	; 0x01
    33ba:	9a 81       	ldd	r25, Y+2	; 0x02
    33bc:	ab 81       	ldd	r26, Y+3	; 0x03
    33be:	bc 81       	ldd	r27, Y+4	; 0x04
    33c0:	82 83       	std	Z+2, r24	; 0x02
    33c2:	93 83       	std	Z+3, r25	; 0x03
    33c4:	a4 83       	std	Z+4, r26	; 0x04
    33c6:	b5 83       	std	Z+5, r27	; 0x05
    33c8:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <printf>
    33cc:	8d b7       	in	r24, 0x3d	; 61
    33ce:	9e b7       	in	r25, 0x3e	; 62
    33d0:	06 96       	adiw	r24, 0x06	; 6
    33d2:	0f b6       	in	r0, 0x3f	; 63
    33d4:	f8 94       	cli
    33d6:	9e bf       	out	0x3e, r25	; 62
    33d8:	0f be       	out	0x3f, r0	; 63
    33da:	8d bf       	out	0x3d, r24	; 61
}
    33dc:	0f 90       	pop	r0
    33de:	0f 90       	pop	r0
    33e0:	0f 90       	pop	r0
    33e2:	0f 90       	pop	r0
    33e4:	cf 91       	pop	r28
    33e6:	df 91       	pop	r29
    33e8:	08 95       	ret

000033ea <Traverse_f>:

void Traverse_f(Stack_f *ps, void(*pf)(type_f))
{
    33ea:	df 93       	push	r29
    33ec:	cf 93       	push	r28
    33ee:	00 d0       	rcall	.+0      	; 0x33f0 <Traverse_f+0x6>
    33f0:	00 d0       	rcall	.+0      	; 0x33f2 <Traverse_f+0x8>
    33f2:	00 d0       	rcall	.+0      	; 0x33f4 <Traverse_f+0xa>
    33f4:	cd b7       	in	r28, 0x3d	; 61
    33f6:	de b7       	in	r29, 0x3e	; 62
    33f8:	9c 83       	std	Y+4, r25	; 0x04
    33fa:	8b 83       	std	Y+3, r24	; 0x03
    33fc:	7e 83       	std	Y+6, r23	; 0x06
    33fe:	6d 83       	std	Y+5, r22	; 0x05
    StackNode_f *pn = ps->top;
    3400:	eb 81       	ldd	r30, Y+3	; 0x03
    3402:	fc 81       	ldd	r31, Y+4	; 0x04
    3404:	80 81       	ld	r24, Z
    3406:	91 81       	ldd	r25, Z+1	; 0x01
    3408:	9a 83       	std	Y+2, r25	; 0x02
    340a:	89 83       	std	Y+1, r24	; 0x01
    340c:	11 c0       	rjmp	.+34     	; 0x3430 <Traverse_f+0x46>
    while(pn)
    {
        (*pf)(pn->data);
    340e:	e9 81       	ldd	r30, Y+1	; 0x01
    3410:	fa 81       	ldd	r31, Y+2	; 0x02
    3412:	80 81       	ld	r24, Z
    3414:	91 81       	ldd	r25, Z+1	; 0x01
    3416:	a2 81       	ldd	r26, Z+2	; 0x02
    3418:	b3 81       	ldd	r27, Z+3	; 0x03
    341a:	ed 81       	ldd	r30, Y+5	; 0x05
    341c:	fe 81       	ldd	r31, Y+6	; 0x06
    341e:	bc 01       	movw	r22, r24
    3420:	cd 01       	movw	r24, r26
    3422:	09 95       	icall
        pn = pn->next;
    3424:	e9 81       	ldd	r30, Y+1	; 0x01
    3426:	fa 81       	ldd	r31, Y+2	; 0x02
    3428:	84 81       	ldd	r24, Z+4	; 0x04
    342a:	95 81       	ldd	r25, Z+5	; 0x05
    342c:	9a 83       	std	Y+2, r25	; 0x02
    342e:	89 83       	std	Y+1, r24	; 0x01
}

void Traverse_f(Stack_f *ps, void(*pf)(type_f))
{
    StackNode_f *pn = ps->top;
    while(pn)
    3430:	89 81       	ldd	r24, Y+1	; 0x01
    3432:	9a 81       	ldd	r25, Y+2	; 0x02
    3434:	00 97       	sbiw	r24, 0x00	; 0
    3436:	59 f7       	brne	.-42     	; 0x340e <Traverse_f+0x24>
    {
        (*pf)(pn->data);
        pn = pn->next;
    }
}
    3438:	26 96       	adiw	r28, 0x06	; 6
    343a:	0f b6       	in	r0, 0x3f	; 63
    343c:	f8 94       	cli
    343e:	de bf       	out	0x3e, r29	; 62
    3440:	0f be       	out	0x3f, r0	; 63
    3442:	cd bf       	out	0x3d, r28	; 61
    3444:	cf 91       	pop	r28
    3446:	df 91       	pop	r29
    3448:	08 95       	ret

0000344a <CreatStack_i>:

#include "stack_int.h"


void CreatStack_i(Stack_i *ps)
{
    344a:	df 93       	push	r29
    344c:	cf 93       	push	r28
    344e:	00 d0       	rcall	.+0      	; 0x3450 <CreatStack_i+0x6>
    3450:	cd b7       	in	r28, 0x3d	; 61
    3452:	de b7       	in	r29, 0x3e	; 62
    3454:	9a 83       	std	Y+2, r25	; 0x02
    3456:	89 83       	std	Y+1, r24	; 0x01
    ps->top = NULL;
    3458:	e9 81       	ldd	r30, Y+1	; 0x01
    345a:	fa 81       	ldd	r31, Y+2	; 0x02
    345c:	11 82       	std	Z+1, r1	; 0x01
    345e:	10 82       	st	Z, r1
    ps->size = 0;
    3460:	e9 81       	ldd	r30, Y+1	; 0x01
    3462:	fa 81       	ldd	r31, Y+2	; 0x02
    3464:	13 82       	std	Z+3, r1	; 0x03
    3466:	12 82       	std	Z+2, r1	; 0x02
}
    3468:	0f 90       	pop	r0
    346a:	0f 90       	pop	r0
    346c:	cf 91       	pop	r28
    346e:	df 91       	pop	r29
    3470:	08 95       	ret

00003472 <push_i>:

void push_i(type_i item, Stack_i *ps)
{
    3472:	df 93       	push	r29
    3474:	cf 93       	push	r28
    3476:	00 d0       	rcall	.+0      	; 0x3478 <push_i+0x6>
    3478:	00 d0       	rcall	.+0      	; 0x347a <push_i+0x8>
    347a:	00 d0       	rcall	.+0      	; 0x347c <push_i+0xa>
    347c:	cd b7       	in	r28, 0x3d	; 61
    347e:	de b7       	in	r29, 0x3e	; 62
    3480:	9c 83       	std	Y+4, r25	; 0x04
    3482:	8b 83       	std	Y+3, r24	; 0x03
    3484:	7e 83       	std	Y+6, r23	; 0x06
    3486:	6d 83       	std	Y+5, r22	; 0x05
    StackNode_i *pn = (StackNode_i *)malloc(sizeof(StackNode_i));
    3488:	84 e0       	ldi	r24, 0x04	; 4
    348a:	90 e0       	ldi	r25, 0x00	; 0
    348c:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <malloc>
    3490:	9a 83       	std	Y+2, r25	; 0x02
    3492:	89 83       	std	Y+1, r24	; 0x01
    pn->data = item;
    3494:	e9 81       	ldd	r30, Y+1	; 0x01
    3496:	fa 81       	ldd	r31, Y+2	; 0x02
    3498:	8b 81       	ldd	r24, Y+3	; 0x03
    349a:	9c 81       	ldd	r25, Y+4	; 0x04
    349c:	91 83       	std	Z+1, r25	; 0x01
    349e:	80 83       	st	Z, r24
    pn->next = ps->top;
    34a0:	ed 81       	ldd	r30, Y+5	; 0x05
    34a2:	fe 81       	ldd	r31, Y+6	; 0x06
    34a4:	80 81       	ld	r24, Z
    34a6:	91 81       	ldd	r25, Z+1	; 0x01
    34a8:	e9 81       	ldd	r30, Y+1	; 0x01
    34aa:	fa 81       	ldd	r31, Y+2	; 0x02
    34ac:	93 83       	std	Z+3, r25	; 0x03
    34ae:	82 83       	std	Z+2, r24	; 0x02
    ps->top = pn;
    34b0:	ed 81       	ldd	r30, Y+5	; 0x05
    34b2:	fe 81       	ldd	r31, Y+6	; 0x06
    34b4:	89 81       	ldd	r24, Y+1	; 0x01
    34b6:	9a 81       	ldd	r25, Y+2	; 0x02
    34b8:	91 83       	std	Z+1, r25	; 0x01
    34ba:	80 83       	st	Z, r24
    ps->size++;
    34bc:	ed 81       	ldd	r30, Y+5	; 0x05
    34be:	fe 81       	ldd	r31, Y+6	; 0x06
    34c0:	82 81       	ldd	r24, Z+2	; 0x02
    34c2:	93 81       	ldd	r25, Z+3	; 0x03
    34c4:	01 96       	adiw	r24, 0x01	; 1
    34c6:	ed 81       	ldd	r30, Y+5	; 0x05
    34c8:	fe 81       	ldd	r31, Y+6	; 0x06
    34ca:	93 83       	std	Z+3, r25	; 0x03
    34cc:	82 83       	std	Z+2, r24	; 0x02
}
    34ce:	26 96       	adiw	r28, 0x06	; 6
    34d0:	0f b6       	in	r0, 0x3f	; 63
    34d2:	f8 94       	cli
    34d4:	de bf       	out	0x3e, r29	; 62
    34d6:	0f be       	out	0x3f, r0	; 63
    34d8:	cd bf       	out	0x3d, r28	; 61
    34da:	cf 91       	pop	r28
    34dc:	df 91       	pop	r29
    34de:	08 95       	ret

000034e0 <pop_i>:

void pop_i(type_i *pe, Stack_i *ps)
{
    34e0:	df 93       	push	r29
    34e2:	cf 93       	push	r28
    34e4:	00 d0       	rcall	.+0      	; 0x34e6 <pop_i+0x6>
    34e6:	00 d0       	rcall	.+0      	; 0x34e8 <pop_i+0x8>
    34e8:	00 d0       	rcall	.+0      	; 0x34ea <pop_i+0xa>
    34ea:	cd b7       	in	r28, 0x3d	; 61
    34ec:	de b7       	in	r29, 0x3e	; 62
    34ee:	9c 83       	std	Y+4, r25	; 0x04
    34f0:	8b 83       	std	Y+3, r24	; 0x03
    34f2:	7e 83       	std	Y+6, r23	; 0x06
    34f4:	6d 83       	std	Y+5, r22	; 0x05
    StackNode_i *pn = ps->top;
    34f6:	ed 81       	ldd	r30, Y+5	; 0x05
    34f8:	fe 81       	ldd	r31, Y+6	; 0x06
    34fa:	80 81       	ld	r24, Z
    34fc:	91 81       	ldd	r25, Z+1	; 0x01
    34fe:	9a 83       	std	Y+2, r25	; 0x02
    3500:	89 83       	std	Y+1, r24	; 0x01
    *pe = pn->data;
    3502:	e9 81       	ldd	r30, Y+1	; 0x01
    3504:	fa 81       	ldd	r31, Y+2	; 0x02
    3506:	80 81       	ld	r24, Z
    3508:	91 81       	ldd	r25, Z+1	; 0x01
    350a:	eb 81       	ldd	r30, Y+3	; 0x03
    350c:	fc 81       	ldd	r31, Y+4	; 0x04
    350e:	91 83       	std	Z+1, r25	; 0x01
    3510:	80 83       	st	Z, r24
    ps->top = ps->top->next;
    3512:	ed 81       	ldd	r30, Y+5	; 0x05
    3514:	fe 81       	ldd	r31, Y+6	; 0x06
    3516:	01 90       	ld	r0, Z+
    3518:	f0 81       	ld	r31, Z
    351a:	e0 2d       	mov	r30, r0
    351c:	82 81       	ldd	r24, Z+2	; 0x02
    351e:	93 81       	ldd	r25, Z+3	; 0x03
    3520:	ed 81       	ldd	r30, Y+5	; 0x05
    3522:	fe 81       	ldd	r31, Y+6	; 0x06
    3524:	91 83       	std	Z+1, r25	; 0x01
    3526:	80 83       	st	Z, r24
    free(pn);
    3528:	89 81       	ldd	r24, Y+1	; 0x01
    352a:	9a 81       	ldd	r25, Y+2	; 0x02
    352c:	0e 94 81 1c 	call	0x3902	; 0x3902 <free>
    ps->size--;
    3530:	ed 81       	ldd	r30, Y+5	; 0x05
    3532:	fe 81       	ldd	r31, Y+6	; 0x06
    3534:	82 81       	ldd	r24, Z+2	; 0x02
    3536:	93 81       	ldd	r25, Z+3	; 0x03
    3538:	01 97       	sbiw	r24, 0x01	; 1
    353a:	ed 81       	ldd	r30, Y+5	; 0x05
    353c:	fe 81       	ldd	r31, Y+6	; 0x06
    353e:	93 83       	std	Z+3, r25	; 0x03
    3540:	82 83       	std	Z+2, r24	; 0x02
}
    3542:	26 96       	adiw	r28, 0x06	; 6
    3544:	0f b6       	in	r0, 0x3f	; 63
    3546:	f8 94       	cli
    3548:	de bf       	out	0x3e, r29	; 62
    354a:	0f be       	out	0x3f, r0	; 63
    354c:	cd bf       	out	0x3d, r28	; 61
    354e:	cf 91       	pop	r28
    3550:	df 91       	pop	r29
    3552:	08 95       	ret

00003554 <StackFull_i>:

int StackFull_i(Stack_i *ps /*is not necessary*/)
{
    3554:	df 93       	push	r29
    3556:	cf 93       	push	r28
    3558:	00 d0       	rcall	.+0      	; 0x355a <StackFull_i+0x6>
    355a:	cd b7       	in	r28, 0x3d	; 61
    355c:	de b7       	in	r29, 0x3e	; 62
    355e:	9a 83       	std	Y+2, r25	; 0x02
    3560:	89 83       	std	Y+1, r24	; 0x01
    return 0;
    3562:	80 e0       	ldi	r24, 0x00	; 0
    3564:	90 e0       	ldi	r25, 0x00	; 0
}
    3566:	0f 90       	pop	r0
    3568:	0f 90       	pop	r0
    356a:	cf 91       	pop	r28
    356c:	df 91       	pop	r29
    356e:	08 95       	ret

00003570 <StackEmpty_i>:

int StackEmpty_i(Stack_i *ps)
{
    3570:	df 93       	push	r29
    3572:	cf 93       	push	r28
    3574:	00 d0       	rcall	.+0      	; 0x3576 <StackEmpty_i+0x6>
    3576:	00 d0       	rcall	.+0      	; 0x3578 <StackEmpty_i+0x8>
    3578:	cd b7       	in	r28, 0x3d	; 61
    357a:	de b7       	in	r29, 0x3e	; 62
    357c:	9a 83       	std	Y+2, r25	; 0x02
    357e:	89 83       	std	Y+1, r24	; 0x01
    return !ps->size;
    3580:	e9 81       	ldd	r30, Y+1	; 0x01
    3582:	fa 81       	ldd	r31, Y+2	; 0x02
    3584:	82 81       	ldd	r24, Z+2	; 0x02
    3586:	93 81       	ldd	r25, Z+3	; 0x03
    3588:	1c 82       	std	Y+4, r1	; 0x04
    358a:	1b 82       	std	Y+3, r1	; 0x03
    358c:	00 97       	sbiw	r24, 0x00	; 0
    358e:	21 f4       	brne	.+8      	; 0x3598 <StackEmpty_i+0x28>
    3590:	81 e0       	ldi	r24, 0x01	; 1
    3592:	90 e0       	ldi	r25, 0x00	; 0
    3594:	9c 83       	std	Y+4, r25	; 0x04
    3596:	8b 83       	std	Y+3, r24	; 0x03
    3598:	8b 81       	ldd	r24, Y+3	; 0x03
    359a:	9c 81       	ldd	r25, Y+4	; 0x04
}
    359c:	0f 90       	pop	r0
    359e:	0f 90       	pop	r0
    35a0:	0f 90       	pop	r0
    35a2:	0f 90       	pop	r0
    35a4:	cf 91       	pop	r28
    35a6:	df 91       	pop	r29
    35a8:	08 95       	ret

000035aa <clear_i>:

void clear_i(Stack_i *ps)
{
    35aa:	df 93       	push	r29
    35ac:	cf 93       	push	r28
    35ae:	00 d0       	rcall	.+0      	; 0x35b0 <clear_i+0x6>
    35b0:	00 d0       	rcall	.+0      	; 0x35b2 <clear_i+0x8>
    35b2:	cd b7       	in	r28, 0x3d	; 61
    35b4:	de b7       	in	r29, 0x3e	; 62
    35b6:	9c 83       	std	Y+4, r25	; 0x04
    35b8:	8b 83       	std	Y+3, r24	; 0x03
    StackNode_i *pn = ps->top;
    35ba:	eb 81       	ldd	r30, Y+3	; 0x03
    35bc:	fc 81       	ldd	r31, Y+4	; 0x04
    35be:	80 81       	ld	r24, Z
    35c0:	91 81       	ldd	r25, Z+1	; 0x01
    35c2:	9a 83       	std	Y+2, r25	; 0x02
    35c4:	89 83       	std	Y+1, r24	; 0x01
    35c6:	15 c0       	rjmp	.+42     	; 0x35f2 <clear_i+0x48>
    while(pn)
    {
        ps->top = ps->top->next;
    35c8:	eb 81       	ldd	r30, Y+3	; 0x03
    35ca:	fc 81       	ldd	r31, Y+4	; 0x04
    35cc:	01 90       	ld	r0, Z+
    35ce:	f0 81       	ld	r31, Z
    35d0:	e0 2d       	mov	r30, r0
    35d2:	82 81       	ldd	r24, Z+2	; 0x02
    35d4:	93 81       	ldd	r25, Z+3	; 0x03
    35d6:	eb 81       	ldd	r30, Y+3	; 0x03
    35d8:	fc 81       	ldd	r31, Y+4	; 0x04
    35da:	91 83       	std	Z+1, r25	; 0x01
    35dc:	80 83       	st	Z, r24
        free(pn);
    35de:	89 81       	ldd	r24, Y+1	; 0x01
    35e0:	9a 81       	ldd	r25, Y+2	; 0x02
    35e2:	0e 94 81 1c 	call	0x3902	; 0x3902 <free>
        pn = ps->top;
    35e6:	eb 81       	ldd	r30, Y+3	; 0x03
    35e8:	fc 81       	ldd	r31, Y+4	; 0x04
    35ea:	80 81       	ld	r24, Z
    35ec:	91 81       	ldd	r25, Z+1	; 0x01
    35ee:	9a 83       	std	Y+2, r25	; 0x02
    35f0:	89 83       	std	Y+1, r24	; 0x01
}

void clear_i(Stack_i *ps)
{
    StackNode_i *pn = ps->top;
    while(pn)
    35f2:	89 81       	ldd	r24, Y+1	; 0x01
    35f4:	9a 81       	ldd	r25, Y+2	; 0x02
    35f6:	00 97       	sbiw	r24, 0x00	; 0
    35f8:	39 f7       	brne	.-50     	; 0x35c8 <clear_i+0x1e>
    {
        ps->top = ps->top->next;
        free(pn);
        pn = ps->top;
    }
    ps->size = 0;
    35fa:	eb 81       	ldd	r30, Y+3	; 0x03
    35fc:	fc 81       	ldd	r31, Y+4	; 0x04
    35fe:	13 82       	std	Z+3, r1	; 0x03
    3600:	12 82       	std	Z+2, r1	; 0x02
}
    3602:	0f 90       	pop	r0
    3604:	0f 90       	pop	r0
    3606:	0f 90       	pop	r0
    3608:	0f 90       	pop	r0
    360a:	cf 91       	pop	r28
    360c:	df 91       	pop	r29
    360e:	08 95       	ret

00003610 <gettop_i>:

type_i gettop_i(Stack_i *ps)
{
    3610:	df 93       	push	r29
    3612:	cf 93       	push	r28
    3614:	00 d0       	rcall	.+0      	; 0x3616 <gettop_i+0x6>
    3616:	cd b7       	in	r28, 0x3d	; 61
    3618:	de b7       	in	r29, 0x3e	; 62
    361a:	9a 83       	std	Y+2, r25	; 0x02
    361c:	89 83       	std	Y+1, r24	; 0x01
    return ps->top->data;
    361e:	e9 81       	ldd	r30, Y+1	; 0x01
    3620:	fa 81       	ldd	r31, Y+2	; 0x02
    3622:	01 90       	ld	r0, Z+
    3624:	f0 81       	ld	r31, Z
    3626:	e0 2d       	mov	r30, r0
    3628:	80 81       	ld	r24, Z
    362a:	91 81       	ldd	r25, Z+1	; 0x01
}
    362c:	0f 90       	pop	r0
    362e:	0f 90       	pop	r0
    3630:	cf 91       	pop	r28
    3632:	df 91       	pop	r29
    3634:	08 95       	ret

00003636 <getsize_i>:

int getsize_i(Stack_i *ps)
{
    3636:	df 93       	push	r29
    3638:	cf 93       	push	r28
    363a:	00 d0       	rcall	.+0      	; 0x363c <getsize_i+0x6>
    363c:	cd b7       	in	r28, 0x3d	; 61
    363e:	de b7       	in	r29, 0x3e	; 62
    3640:	9a 83       	std	Y+2, r25	; 0x02
    3642:	89 83       	std	Y+1, r24	; 0x01
    return ps->size;
    3644:	e9 81       	ldd	r30, Y+1	; 0x01
    3646:	fa 81       	ldd	r31, Y+2	; 0x02
    3648:	82 81       	ldd	r24, Z+2	; 0x02
    364a:	93 81       	ldd	r25, Z+3	; 0x03
}
    364c:	0f 90       	pop	r0
    364e:	0f 90       	pop	r0
    3650:	cf 91       	pop	r28
    3652:	df 91       	pop	r29
    3654:	08 95       	ret

00003656 <display_i>:

void display_i(type_i element)
{
    3656:	df 93       	push	r29
    3658:	cf 93       	push	r28
    365a:	00 d0       	rcall	.+0      	; 0x365c <display_i+0x6>
    365c:	cd b7       	in	r28, 0x3d	; 61
    365e:	de b7       	in	r29, 0x3e	; 62
    3660:	9a 83       	std	Y+2, r25	; 0x02
    3662:	89 83       	std	Y+1, r24	; 0x01
    printf("item : %d\n", element);
    3664:	00 d0       	rcall	.+0      	; 0x3666 <display_i+0x10>
    3666:	00 d0       	rcall	.+0      	; 0x3668 <display_i+0x12>
    3668:	ed b7       	in	r30, 0x3d	; 61
    366a:	fe b7       	in	r31, 0x3e	; 62
    366c:	31 96       	adiw	r30, 0x01	; 1
    366e:	89 e7       	ldi	r24, 0x79	; 121
    3670:	90 e0       	ldi	r25, 0x00	; 0
    3672:	91 83       	std	Z+1, r25	; 0x01
    3674:	80 83       	st	Z, r24
    3676:	89 81       	ldd	r24, Y+1	; 0x01
    3678:	9a 81       	ldd	r25, Y+2	; 0x02
    367a:	93 83       	std	Z+3, r25	; 0x03
    367c:	82 83       	std	Z+2, r24	; 0x02
    367e:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <printf>
    3682:	0f 90       	pop	r0
    3684:	0f 90       	pop	r0
    3686:	0f 90       	pop	r0
    3688:	0f 90       	pop	r0
}
    368a:	0f 90       	pop	r0
    368c:	0f 90       	pop	r0
    368e:	cf 91       	pop	r28
    3690:	df 91       	pop	r29
    3692:	08 95       	ret

00003694 <Traverse_i>:

void Traverse_i(Stack_i *ps, void(*pf)(type))
{
    3694:	df 93       	push	r29
    3696:	cf 93       	push	r28
    3698:	00 d0       	rcall	.+0      	; 0x369a <Traverse_i+0x6>
    369a:	00 d0       	rcall	.+0      	; 0x369c <Traverse_i+0x8>
    369c:	00 d0       	rcall	.+0      	; 0x369e <Traverse_i+0xa>
    369e:	cd b7       	in	r28, 0x3d	; 61
    36a0:	de b7       	in	r29, 0x3e	; 62
    36a2:	9c 83       	std	Y+4, r25	; 0x04
    36a4:	8b 83       	std	Y+3, r24	; 0x03
    36a6:	7e 83       	std	Y+6, r23	; 0x06
    36a8:	6d 83       	std	Y+5, r22	; 0x05
    StackNode_i *pn = ps->top;
    36aa:	eb 81       	ldd	r30, Y+3	; 0x03
    36ac:	fc 81       	ldd	r31, Y+4	; 0x04
    36ae:	80 81       	ld	r24, Z
    36b0:	91 81       	ldd	r25, Z+1	; 0x01
    36b2:	9a 83       	std	Y+2, r25	; 0x02
    36b4:	89 83       	std	Y+1, r24	; 0x01
    36b6:	0d c0       	rjmp	.+26     	; 0x36d2 <Traverse_i+0x3e>
    while(pn)
    {
        (*pf)(pn->data);
    36b8:	e9 81       	ldd	r30, Y+1	; 0x01
    36ba:	fa 81       	ldd	r31, Y+2	; 0x02
    36bc:	80 81       	ld	r24, Z
    36be:	91 81       	ldd	r25, Z+1	; 0x01
    36c0:	ed 81       	ldd	r30, Y+5	; 0x05
    36c2:	fe 81       	ldd	r31, Y+6	; 0x06
    36c4:	09 95       	icall
        pn = pn->next;
    36c6:	e9 81       	ldd	r30, Y+1	; 0x01
    36c8:	fa 81       	ldd	r31, Y+2	; 0x02
    36ca:	82 81       	ldd	r24, Z+2	; 0x02
    36cc:	93 81       	ldd	r25, Z+3	; 0x03
    36ce:	9a 83       	std	Y+2, r25	; 0x02
    36d0:	89 83       	std	Y+1, r24	; 0x01
}

void Traverse_i(Stack_i *ps, void(*pf)(type))
{
    StackNode_i *pn = ps->top;
    while(pn)
    36d2:	89 81       	ldd	r24, Y+1	; 0x01
    36d4:	9a 81       	ldd	r25, Y+2	; 0x02
    36d6:	00 97       	sbiw	r24, 0x00	; 0
    36d8:	79 f7       	brne	.-34     	; 0x36b8 <Traverse_i+0x24>
    {
        (*pf)(pn->data);
        pn = pn->next;
    }
}
    36da:	26 96       	adiw	r28, 0x06	; 6
    36dc:	0f b6       	in	r0, 0x3f	; 63
    36de:	f8 94       	cli
    36e0:	de bf       	out	0x3e, r29	; 62
    36e2:	0f be       	out	0x3f, r0	; 63
    36e4:	cd bf       	out	0x3d, r28	; 61
    36e6:	cf 91       	pop	r28
    36e8:	df 91       	pop	r29
    36ea:	08 95       	ret

000036ec <__divmodhi4>:
    36ec:	97 fb       	bst	r25, 7
    36ee:	09 2e       	mov	r0, r25
    36f0:	07 26       	eor	r0, r23
    36f2:	0a d0       	rcall	.+20     	; 0x3708 <__divmodhi4_neg1>
    36f4:	77 fd       	sbrc	r23, 7
    36f6:	04 d0       	rcall	.+8      	; 0x3700 <__divmodhi4_neg2>
    36f8:	0c d0       	rcall	.+24     	; 0x3712 <__udivmodhi4>
    36fa:	06 d0       	rcall	.+12     	; 0x3708 <__divmodhi4_neg1>
    36fc:	00 20       	and	r0, r0
    36fe:	1a f4       	brpl	.+6      	; 0x3706 <__divmodhi4_exit>

00003700 <__divmodhi4_neg2>:
    3700:	70 95       	com	r23
    3702:	61 95       	neg	r22
    3704:	7f 4f       	sbci	r23, 0xFF	; 255

00003706 <__divmodhi4_exit>:
    3706:	08 95       	ret

00003708 <__divmodhi4_neg1>:
    3708:	f6 f7       	brtc	.-4      	; 0x3706 <__divmodhi4_exit>
    370a:	90 95       	com	r25
    370c:	81 95       	neg	r24
    370e:	9f 4f       	sbci	r25, 0xFF	; 255
    3710:	08 95       	ret

00003712 <__udivmodhi4>:
    3712:	aa 1b       	sub	r26, r26
    3714:	bb 1b       	sub	r27, r27
    3716:	51 e1       	ldi	r21, 0x11	; 17
    3718:	07 c0       	rjmp	.+14     	; 0x3728 <__udivmodhi4_ep>

0000371a <__udivmodhi4_loop>:
    371a:	aa 1f       	adc	r26, r26
    371c:	bb 1f       	adc	r27, r27
    371e:	a6 17       	cp	r26, r22
    3720:	b7 07       	cpc	r27, r23
    3722:	10 f0       	brcs	.+4      	; 0x3728 <__udivmodhi4_ep>
    3724:	a6 1b       	sub	r26, r22
    3726:	b7 0b       	sbc	r27, r23

00003728 <__udivmodhi4_ep>:
    3728:	88 1f       	adc	r24, r24
    372a:	99 1f       	adc	r25, r25
    372c:	5a 95       	dec	r21
    372e:	a9 f7       	brne	.-22     	; 0x371a <__udivmodhi4_loop>
    3730:	80 95       	com	r24
    3732:	90 95       	com	r25
    3734:	bc 01       	movw	r22, r24
    3736:	cd 01       	movw	r24, r26
    3738:	08 95       	ret

0000373a <__prologue_saves__>:
    373a:	2f 92       	push	r2
    373c:	3f 92       	push	r3
    373e:	4f 92       	push	r4
    3740:	5f 92       	push	r5
    3742:	6f 92       	push	r6
    3744:	7f 92       	push	r7
    3746:	8f 92       	push	r8
    3748:	9f 92       	push	r9
    374a:	af 92       	push	r10
    374c:	bf 92       	push	r11
    374e:	cf 92       	push	r12
    3750:	df 92       	push	r13
    3752:	ef 92       	push	r14
    3754:	ff 92       	push	r15
    3756:	0f 93       	push	r16
    3758:	1f 93       	push	r17
    375a:	cf 93       	push	r28
    375c:	df 93       	push	r29
    375e:	cd b7       	in	r28, 0x3d	; 61
    3760:	de b7       	in	r29, 0x3e	; 62
    3762:	ca 1b       	sub	r28, r26
    3764:	db 0b       	sbc	r29, r27
    3766:	0f b6       	in	r0, 0x3f	; 63
    3768:	f8 94       	cli
    376a:	de bf       	out	0x3e, r29	; 62
    376c:	0f be       	out	0x3f, r0	; 63
    376e:	cd bf       	out	0x3d, r28	; 61
    3770:	09 94       	ijmp

00003772 <__epilogue_restores__>:
    3772:	2a 88       	ldd	r2, Y+18	; 0x12
    3774:	39 88       	ldd	r3, Y+17	; 0x11
    3776:	48 88       	ldd	r4, Y+16	; 0x10
    3778:	5f 84       	ldd	r5, Y+15	; 0x0f
    377a:	6e 84       	ldd	r6, Y+14	; 0x0e
    377c:	7d 84       	ldd	r7, Y+13	; 0x0d
    377e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3780:	9b 84       	ldd	r9, Y+11	; 0x0b
    3782:	aa 84       	ldd	r10, Y+10	; 0x0a
    3784:	b9 84       	ldd	r11, Y+9	; 0x09
    3786:	c8 84       	ldd	r12, Y+8	; 0x08
    3788:	df 80       	ldd	r13, Y+7	; 0x07
    378a:	ee 80       	ldd	r14, Y+6	; 0x06
    378c:	fd 80       	ldd	r15, Y+5	; 0x05
    378e:	0c 81       	ldd	r16, Y+4	; 0x04
    3790:	1b 81       	ldd	r17, Y+3	; 0x03
    3792:	aa 81       	ldd	r26, Y+2	; 0x02
    3794:	b9 81       	ldd	r27, Y+1	; 0x01
    3796:	ce 0f       	add	r28, r30
    3798:	d1 1d       	adc	r29, r1
    379a:	0f b6       	in	r0, 0x3f	; 63
    379c:	f8 94       	cli
    379e:	de bf       	out	0x3e, r29	; 62
    37a0:	0f be       	out	0x3f, r0	; 63
    37a2:	cd bf       	out	0x3d, r28	; 61
    37a4:	ed 01       	movw	r28, r26
    37a6:	08 95       	ret

000037a8 <malloc>:
    37a8:	cf 93       	push	r28
    37aa:	df 93       	push	r29
    37ac:	bc 01       	movw	r22, r24
    37ae:	82 30       	cpi	r24, 0x02	; 2
    37b0:	91 05       	cpc	r25, r1
    37b2:	10 f4       	brcc	.+4      	; 0x37b8 <malloc+0x10>
    37b4:	62 e0       	ldi	r22, 0x02	; 2
    37b6:	70 e0       	ldi	r23, 0x00	; 0
    37b8:	a0 91 28 02 	lds	r26, 0x0228
    37bc:	b0 91 29 02 	lds	r27, 0x0229
    37c0:	ed 01       	movw	r28, r26
    37c2:	e0 e0       	ldi	r30, 0x00	; 0
    37c4:	f0 e0       	ldi	r31, 0x00	; 0
    37c6:	40 e0       	ldi	r20, 0x00	; 0
    37c8:	50 e0       	ldi	r21, 0x00	; 0
    37ca:	21 c0       	rjmp	.+66     	; 0x380e <malloc+0x66>
    37cc:	88 81       	ld	r24, Y
    37ce:	99 81       	ldd	r25, Y+1	; 0x01
    37d0:	86 17       	cp	r24, r22
    37d2:	97 07       	cpc	r25, r23
    37d4:	69 f4       	brne	.+26     	; 0x37f0 <malloc+0x48>
    37d6:	8a 81       	ldd	r24, Y+2	; 0x02
    37d8:	9b 81       	ldd	r25, Y+3	; 0x03
    37da:	30 97       	sbiw	r30, 0x00	; 0
    37dc:	19 f0       	breq	.+6      	; 0x37e4 <malloc+0x3c>
    37de:	93 83       	std	Z+3, r25	; 0x03
    37e0:	82 83       	std	Z+2, r24	; 0x02
    37e2:	04 c0       	rjmp	.+8      	; 0x37ec <malloc+0x44>
    37e4:	90 93 29 02 	sts	0x0229, r25
    37e8:	80 93 28 02 	sts	0x0228, r24
    37ec:	fe 01       	movw	r30, r28
    37ee:	34 c0       	rjmp	.+104    	; 0x3858 <malloc+0xb0>
    37f0:	68 17       	cp	r22, r24
    37f2:	79 07       	cpc	r23, r25
    37f4:	38 f4       	brcc	.+14     	; 0x3804 <malloc+0x5c>
    37f6:	41 15       	cp	r20, r1
    37f8:	51 05       	cpc	r21, r1
    37fa:	19 f0       	breq	.+6      	; 0x3802 <malloc+0x5a>
    37fc:	84 17       	cp	r24, r20
    37fe:	95 07       	cpc	r25, r21
    3800:	08 f4       	brcc	.+2      	; 0x3804 <malloc+0x5c>
    3802:	ac 01       	movw	r20, r24
    3804:	fe 01       	movw	r30, r28
    3806:	8a 81       	ldd	r24, Y+2	; 0x02
    3808:	9b 81       	ldd	r25, Y+3	; 0x03
    380a:	9c 01       	movw	r18, r24
    380c:	e9 01       	movw	r28, r18
    380e:	20 97       	sbiw	r28, 0x00	; 0
    3810:	e9 f6       	brne	.-70     	; 0x37cc <malloc+0x24>
    3812:	41 15       	cp	r20, r1
    3814:	51 05       	cpc	r21, r1
    3816:	a9 f1       	breq	.+106    	; 0x3882 <malloc+0xda>
    3818:	ca 01       	movw	r24, r20
    381a:	86 1b       	sub	r24, r22
    381c:	97 0b       	sbc	r25, r23
    381e:	04 97       	sbiw	r24, 0x04	; 4
    3820:	08 f4       	brcc	.+2      	; 0x3824 <malloc+0x7c>
    3822:	ba 01       	movw	r22, r20
    3824:	e0 e0       	ldi	r30, 0x00	; 0
    3826:	f0 e0       	ldi	r31, 0x00	; 0
    3828:	2a c0       	rjmp	.+84     	; 0x387e <malloc+0xd6>
    382a:	8d 91       	ld	r24, X+
    382c:	9c 91       	ld	r25, X
    382e:	11 97       	sbiw	r26, 0x01	; 1
    3830:	84 17       	cp	r24, r20
    3832:	95 07       	cpc	r25, r21
    3834:	f9 f4       	brne	.+62     	; 0x3874 <malloc+0xcc>
    3836:	64 17       	cp	r22, r20
    3838:	75 07       	cpc	r23, r21
    383a:	81 f4       	brne	.+32     	; 0x385c <malloc+0xb4>
    383c:	12 96       	adiw	r26, 0x02	; 2
    383e:	8d 91       	ld	r24, X+
    3840:	9c 91       	ld	r25, X
    3842:	13 97       	sbiw	r26, 0x03	; 3
    3844:	30 97       	sbiw	r30, 0x00	; 0
    3846:	19 f0       	breq	.+6      	; 0x384e <malloc+0xa6>
    3848:	93 83       	std	Z+3, r25	; 0x03
    384a:	82 83       	std	Z+2, r24	; 0x02
    384c:	04 c0       	rjmp	.+8      	; 0x3856 <malloc+0xae>
    384e:	90 93 29 02 	sts	0x0229, r25
    3852:	80 93 28 02 	sts	0x0228, r24
    3856:	fd 01       	movw	r30, r26
    3858:	32 96       	adiw	r30, 0x02	; 2
    385a:	4f c0       	rjmp	.+158    	; 0x38fa <malloc+0x152>
    385c:	ca 01       	movw	r24, r20
    385e:	86 1b       	sub	r24, r22
    3860:	97 0b       	sbc	r25, r23
    3862:	fd 01       	movw	r30, r26
    3864:	e8 0f       	add	r30, r24
    3866:	f9 1f       	adc	r31, r25
    3868:	61 93       	st	Z+, r22
    386a:	71 93       	st	Z+, r23
    386c:	02 97       	sbiw	r24, 0x02	; 2
    386e:	8d 93       	st	X+, r24
    3870:	9c 93       	st	X, r25
    3872:	43 c0       	rjmp	.+134    	; 0x38fa <malloc+0x152>
    3874:	fd 01       	movw	r30, r26
    3876:	82 81       	ldd	r24, Z+2	; 0x02
    3878:	93 81       	ldd	r25, Z+3	; 0x03
    387a:	9c 01       	movw	r18, r24
    387c:	d9 01       	movw	r26, r18
    387e:	10 97       	sbiw	r26, 0x00	; 0
    3880:	a1 f6       	brne	.-88     	; 0x382a <malloc+0x82>
    3882:	80 91 26 02 	lds	r24, 0x0226
    3886:	90 91 27 02 	lds	r25, 0x0227
    388a:	89 2b       	or	r24, r25
    388c:	41 f4       	brne	.+16     	; 0x389e <malloc+0xf6>
    388e:	80 91 8e 01 	lds	r24, 0x018E
    3892:	90 91 8f 01 	lds	r25, 0x018F
    3896:	90 93 27 02 	sts	0x0227, r25
    389a:	80 93 26 02 	sts	0x0226, r24
    389e:	40 91 90 01 	lds	r20, 0x0190
    38a2:	50 91 91 01 	lds	r21, 0x0191
    38a6:	41 15       	cp	r20, r1
    38a8:	51 05       	cpc	r21, r1
    38aa:	41 f4       	brne	.+16     	; 0x38bc <malloc+0x114>
    38ac:	4d b7       	in	r20, 0x3d	; 61
    38ae:	5e b7       	in	r21, 0x3e	; 62
    38b0:	80 91 8c 01 	lds	r24, 0x018C
    38b4:	90 91 8d 01 	lds	r25, 0x018D
    38b8:	48 1b       	sub	r20, r24
    38ba:	59 0b       	sbc	r21, r25
    38bc:	20 91 26 02 	lds	r18, 0x0226
    38c0:	30 91 27 02 	lds	r19, 0x0227
    38c4:	24 17       	cp	r18, r20
    38c6:	35 07       	cpc	r19, r21
    38c8:	b0 f4       	brcc	.+44     	; 0x38f6 <malloc+0x14e>
    38ca:	ca 01       	movw	r24, r20
    38cc:	82 1b       	sub	r24, r18
    38ce:	93 0b       	sbc	r25, r19
    38d0:	86 17       	cp	r24, r22
    38d2:	97 07       	cpc	r25, r23
    38d4:	80 f0       	brcs	.+32     	; 0x38f6 <malloc+0x14e>
    38d6:	ab 01       	movw	r20, r22
    38d8:	4e 5f       	subi	r20, 0xFE	; 254
    38da:	5f 4f       	sbci	r21, 0xFF	; 255
    38dc:	84 17       	cp	r24, r20
    38de:	95 07       	cpc	r25, r21
    38e0:	50 f0       	brcs	.+20     	; 0x38f6 <malloc+0x14e>
    38e2:	42 0f       	add	r20, r18
    38e4:	53 1f       	adc	r21, r19
    38e6:	50 93 27 02 	sts	0x0227, r21
    38ea:	40 93 26 02 	sts	0x0226, r20
    38ee:	f9 01       	movw	r30, r18
    38f0:	61 93       	st	Z+, r22
    38f2:	71 93       	st	Z+, r23
    38f4:	02 c0       	rjmp	.+4      	; 0x38fa <malloc+0x152>
    38f6:	e0 e0       	ldi	r30, 0x00	; 0
    38f8:	f0 e0       	ldi	r31, 0x00	; 0
    38fa:	cf 01       	movw	r24, r30
    38fc:	df 91       	pop	r29
    38fe:	cf 91       	pop	r28
    3900:	08 95       	ret

00003902 <free>:
    3902:	cf 93       	push	r28
    3904:	df 93       	push	r29
    3906:	00 97       	sbiw	r24, 0x00	; 0
    3908:	09 f4       	brne	.+2      	; 0x390c <free+0xa>
    390a:	50 c0       	rjmp	.+160    	; 0x39ac <free+0xaa>
    390c:	ec 01       	movw	r28, r24
    390e:	22 97       	sbiw	r28, 0x02	; 2
    3910:	1b 82       	std	Y+3, r1	; 0x03
    3912:	1a 82       	std	Y+2, r1	; 0x02
    3914:	a0 91 28 02 	lds	r26, 0x0228
    3918:	b0 91 29 02 	lds	r27, 0x0229
    391c:	10 97       	sbiw	r26, 0x00	; 0
    391e:	09 f1       	breq	.+66     	; 0x3962 <free+0x60>
    3920:	40 e0       	ldi	r20, 0x00	; 0
    3922:	50 e0       	ldi	r21, 0x00	; 0
    3924:	ac 17       	cp	r26, r28
    3926:	bd 07       	cpc	r27, r29
    3928:	08 f1       	brcs	.+66     	; 0x396c <free+0x6a>
    392a:	bb 83       	std	Y+3, r27	; 0x03
    392c:	aa 83       	std	Y+2, r26	; 0x02
    392e:	fe 01       	movw	r30, r28
    3930:	21 91       	ld	r18, Z+
    3932:	31 91       	ld	r19, Z+
    3934:	e2 0f       	add	r30, r18
    3936:	f3 1f       	adc	r31, r19
    3938:	ae 17       	cp	r26, r30
    393a:	bf 07       	cpc	r27, r31
    393c:	79 f4       	brne	.+30     	; 0x395c <free+0x5a>
    393e:	8d 91       	ld	r24, X+
    3940:	9c 91       	ld	r25, X
    3942:	11 97       	sbiw	r26, 0x01	; 1
    3944:	28 0f       	add	r18, r24
    3946:	39 1f       	adc	r19, r25
    3948:	2e 5f       	subi	r18, 0xFE	; 254
    394a:	3f 4f       	sbci	r19, 0xFF	; 255
    394c:	39 83       	std	Y+1, r19	; 0x01
    394e:	28 83       	st	Y, r18
    3950:	12 96       	adiw	r26, 0x02	; 2
    3952:	8d 91       	ld	r24, X+
    3954:	9c 91       	ld	r25, X
    3956:	13 97       	sbiw	r26, 0x03	; 3
    3958:	9b 83       	std	Y+3, r25	; 0x03
    395a:	8a 83       	std	Y+2, r24	; 0x02
    395c:	41 15       	cp	r20, r1
    395e:	51 05       	cpc	r21, r1
    3960:	71 f4       	brne	.+28     	; 0x397e <free+0x7c>
    3962:	d0 93 29 02 	sts	0x0229, r29
    3966:	c0 93 28 02 	sts	0x0228, r28
    396a:	20 c0       	rjmp	.+64     	; 0x39ac <free+0xaa>
    396c:	12 96       	adiw	r26, 0x02	; 2
    396e:	8d 91       	ld	r24, X+
    3970:	9c 91       	ld	r25, X
    3972:	13 97       	sbiw	r26, 0x03	; 3
    3974:	ad 01       	movw	r20, r26
    3976:	00 97       	sbiw	r24, 0x00	; 0
    3978:	11 f0       	breq	.+4      	; 0x397e <free+0x7c>
    397a:	dc 01       	movw	r26, r24
    397c:	d3 cf       	rjmp	.-90     	; 0x3924 <free+0x22>
    397e:	fa 01       	movw	r30, r20
    3980:	d3 83       	std	Z+3, r29	; 0x03
    3982:	c2 83       	std	Z+2, r28	; 0x02
    3984:	21 91       	ld	r18, Z+
    3986:	31 91       	ld	r19, Z+
    3988:	e2 0f       	add	r30, r18
    398a:	f3 1f       	adc	r31, r19
    398c:	ce 17       	cp	r28, r30
    398e:	df 07       	cpc	r29, r31
    3990:	69 f4       	brne	.+26     	; 0x39ac <free+0xaa>
    3992:	88 81       	ld	r24, Y
    3994:	99 81       	ldd	r25, Y+1	; 0x01
    3996:	28 0f       	add	r18, r24
    3998:	39 1f       	adc	r19, r25
    399a:	2e 5f       	subi	r18, 0xFE	; 254
    399c:	3f 4f       	sbci	r19, 0xFF	; 255
    399e:	fa 01       	movw	r30, r20
    39a0:	31 83       	std	Z+1, r19	; 0x01
    39a2:	20 83       	st	Z, r18
    39a4:	8a 81       	ldd	r24, Y+2	; 0x02
    39a6:	9b 81       	ldd	r25, Y+3	; 0x03
    39a8:	93 83       	std	Z+3, r25	; 0x03
    39aa:	82 83       	std	Z+2, r24	; 0x02
    39ac:	df 91       	pop	r29
    39ae:	cf 91       	pop	r28
    39b0:	08 95       	ret

000039b2 <isupper>:
    39b2:	85 fd       	sbrc	r24, 5
    39b4:	f9 c1       	rjmp	.+1010   	; 0x3da8 <__ctype_isfalse>

000039b6 <isalpha>:
    39b6:	80 62       	ori	r24, 0x20	; 32

000039b8 <islower>:
    39b8:	91 11       	cpse	r25, r1
    39ba:	f6 c1       	rjmp	.+1004   	; 0x3da8 <__ctype_isfalse>
    39bc:	81 56       	subi	r24, 0x61	; 97
    39be:	8a 51       	subi	r24, 0x1A	; 26
    39c0:	e0 f7       	brcc	.-8      	; 0x39ba <islower+0x2>
    39c2:	08 95       	ret

000039c4 <printf>:
    39c4:	a0 e0       	ldi	r26, 0x00	; 0
    39c6:	b0 e0       	ldi	r27, 0x00	; 0
    39c8:	e8 ee       	ldi	r30, 0xE8	; 232
    39ca:	fc e1       	ldi	r31, 0x1C	; 28
    39cc:	0c 94 ad 1b 	jmp	0x375a	; 0x375a <__prologue_saves__+0x20>
    39d0:	fe 01       	movw	r30, r28
    39d2:	35 96       	adiw	r30, 0x05	; 5
    39d4:	61 91       	ld	r22, Z+
    39d6:	71 91       	ld	r23, Z+
    39d8:	80 91 2c 02 	lds	r24, 0x022C
    39dc:	90 91 2d 02 	lds	r25, 0x022D
    39e0:	af 01       	movw	r20, r30
    39e2:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <vfprintf>
    39e6:	20 96       	adiw	r28, 0x00	; 0
    39e8:	e2 e0       	ldi	r30, 0x02	; 2
    39ea:	0c 94 c9 1b 	jmp	0x3792	; 0x3792 <__epilogue_restores__+0x20>

000039ee <vfprintf>:
    39ee:	ab e0       	ldi	r26, 0x0B	; 11
    39f0:	b0 e0       	ldi	r27, 0x00	; 0
    39f2:	ed ef       	ldi	r30, 0xFD	; 253
    39f4:	fc e1       	ldi	r31, 0x1C	; 28
    39f6:	0c 94 9d 1b 	jmp	0x373a	; 0x373a <__prologue_saves__>
    39fa:	3c 01       	movw	r6, r24
    39fc:	2b 01       	movw	r4, r22
    39fe:	5a 01       	movw	r10, r20
    3a00:	fc 01       	movw	r30, r24
    3a02:	17 82       	std	Z+7, r1	; 0x07
    3a04:	16 82       	std	Z+6, r1	; 0x06
    3a06:	83 81       	ldd	r24, Z+3	; 0x03
    3a08:	81 fd       	sbrc	r24, 1
    3a0a:	03 c0       	rjmp	.+6      	; 0x3a12 <vfprintf+0x24>
    3a0c:	6f ef       	ldi	r22, 0xFF	; 255
    3a0e:	7f ef       	ldi	r23, 0xFF	; 255
    3a10:	c6 c1       	rjmp	.+908    	; 0x3d9e <vfprintf+0x3b0>
    3a12:	9a e0       	ldi	r25, 0x0A	; 10
    3a14:	89 2e       	mov	r8, r25
    3a16:	1e 01       	movw	r2, r28
    3a18:	08 94       	sec
    3a1a:	21 1c       	adc	r2, r1
    3a1c:	31 1c       	adc	r3, r1
    3a1e:	f3 01       	movw	r30, r6
    3a20:	23 81       	ldd	r18, Z+3	; 0x03
    3a22:	f2 01       	movw	r30, r4
    3a24:	23 fd       	sbrc	r18, 3
    3a26:	85 91       	lpm	r24, Z+
    3a28:	23 ff       	sbrs	r18, 3
    3a2a:	81 91       	ld	r24, Z+
    3a2c:	2f 01       	movw	r4, r30
    3a2e:	88 23       	and	r24, r24
    3a30:	09 f4       	brne	.+2      	; 0x3a34 <vfprintf+0x46>
    3a32:	b2 c1       	rjmp	.+868    	; 0x3d98 <vfprintf+0x3aa>
    3a34:	85 32       	cpi	r24, 0x25	; 37
    3a36:	39 f4       	brne	.+14     	; 0x3a46 <vfprintf+0x58>
    3a38:	23 fd       	sbrc	r18, 3
    3a3a:	85 91       	lpm	r24, Z+
    3a3c:	23 ff       	sbrs	r18, 3
    3a3e:	81 91       	ld	r24, Z+
    3a40:	2f 01       	movw	r4, r30
    3a42:	85 32       	cpi	r24, 0x25	; 37
    3a44:	29 f4       	brne	.+10     	; 0x3a50 <vfprintf+0x62>
    3a46:	90 e0       	ldi	r25, 0x00	; 0
    3a48:	b3 01       	movw	r22, r6
    3a4a:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <fputc>
    3a4e:	e7 cf       	rjmp	.-50     	; 0x3a1e <vfprintf+0x30>
    3a50:	98 2f       	mov	r25, r24
    3a52:	ff 24       	eor	r15, r15
    3a54:	ee 24       	eor	r14, r14
    3a56:	99 24       	eor	r9, r9
    3a58:	ff e1       	ldi	r31, 0x1F	; 31
    3a5a:	ff 15       	cp	r31, r15
    3a5c:	d0 f0       	brcs	.+52     	; 0x3a92 <vfprintf+0xa4>
    3a5e:	9b 32       	cpi	r25, 0x2B	; 43
    3a60:	69 f0       	breq	.+26     	; 0x3a7c <vfprintf+0x8e>
    3a62:	9c 32       	cpi	r25, 0x2C	; 44
    3a64:	28 f4       	brcc	.+10     	; 0x3a70 <vfprintf+0x82>
    3a66:	90 32       	cpi	r25, 0x20	; 32
    3a68:	59 f0       	breq	.+22     	; 0x3a80 <vfprintf+0x92>
    3a6a:	93 32       	cpi	r25, 0x23	; 35
    3a6c:	91 f4       	brne	.+36     	; 0x3a92 <vfprintf+0xa4>
    3a6e:	0e c0       	rjmp	.+28     	; 0x3a8c <vfprintf+0x9e>
    3a70:	9d 32       	cpi	r25, 0x2D	; 45
    3a72:	49 f0       	breq	.+18     	; 0x3a86 <vfprintf+0x98>
    3a74:	90 33       	cpi	r25, 0x30	; 48
    3a76:	69 f4       	brne	.+26     	; 0x3a92 <vfprintf+0xa4>
    3a78:	41 e0       	ldi	r20, 0x01	; 1
    3a7a:	24 c0       	rjmp	.+72     	; 0x3ac4 <vfprintf+0xd6>
    3a7c:	52 e0       	ldi	r21, 0x02	; 2
    3a7e:	f5 2a       	or	r15, r21
    3a80:	84 e0       	ldi	r24, 0x04	; 4
    3a82:	f8 2a       	or	r15, r24
    3a84:	28 c0       	rjmp	.+80     	; 0x3ad6 <vfprintf+0xe8>
    3a86:	98 e0       	ldi	r25, 0x08	; 8
    3a88:	f9 2a       	or	r15, r25
    3a8a:	25 c0       	rjmp	.+74     	; 0x3ad6 <vfprintf+0xe8>
    3a8c:	e0 e1       	ldi	r30, 0x10	; 16
    3a8e:	fe 2a       	or	r15, r30
    3a90:	22 c0       	rjmp	.+68     	; 0x3ad6 <vfprintf+0xe8>
    3a92:	f7 fc       	sbrc	r15, 7
    3a94:	29 c0       	rjmp	.+82     	; 0x3ae8 <vfprintf+0xfa>
    3a96:	89 2f       	mov	r24, r25
    3a98:	80 53       	subi	r24, 0x30	; 48
    3a9a:	8a 30       	cpi	r24, 0x0A	; 10
    3a9c:	70 f4       	brcc	.+28     	; 0x3aba <vfprintf+0xcc>
    3a9e:	f6 fe       	sbrs	r15, 6
    3aa0:	05 c0       	rjmp	.+10     	; 0x3aac <vfprintf+0xbe>
    3aa2:	98 9c       	mul	r9, r8
    3aa4:	90 2c       	mov	r9, r0
    3aa6:	11 24       	eor	r1, r1
    3aa8:	98 0e       	add	r9, r24
    3aaa:	15 c0       	rjmp	.+42     	; 0x3ad6 <vfprintf+0xe8>
    3aac:	e8 9c       	mul	r14, r8
    3aae:	e0 2c       	mov	r14, r0
    3ab0:	11 24       	eor	r1, r1
    3ab2:	e8 0e       	add	r14, r24
    3ab4:	f0 e2       	ldi	r31, 0x20	; 32
    3ab6:	ff 2a       	or	r15, r31
    3ab8:	0e c0       	rjmp	.+28     	; 0x3ad6 <vfprintf+0xe8>
    3aba:	9e 32       	cpi	r25, 0x2E	; 46
    3abc:	29 f4       	brne	.+10     	; 0x3ac8 <vfprintf+0xda>
    3abe:	f6 fc       	sbrc	r15, 6
    3ac0:	6b c1       	rjmp	.+726    	; 0x3d98 <vfprintf+0x3aa>
    3ac2:	40 e4       	ldi	r20, 0x40	; 64
    3ac4:	f4 2a       	or	r15, r20
    3ac6:	07 c0       	rjmp	.+14     	; 0x3ad6 <vfprintf+0xe8>
    3ac8:	9c 36       	cpi	r25, 0x6C	; 108
    3aca:	19 f4       	brne	.+6      	; 0x3ad2 <vfprintf+0xe4>
    3acc:	50 e8       	ldi	r21, 0x80	; 128
    3ace:	f5 2a       	or	r15, r21
    3ad0:	02 c0       	rjmp	.+4      	; 0x3ad6 <vfprintf+0xe8>
    3ad2:	98 36       	cpi	r25, 0x68	; 104
    3ad4:	49 f4       	brne	.+18     	; 0x3ae8 <vfprintf+0xfa>
    3ad6:	f2 01       	movw	r30, r4
    3ad8:	23 fd       	sbrc	r18, 3
    3ada:	95 91       	lpm	r25, Z+
    3adc:	23 ff       	sbrs	r18, 3
    3ade:	91 91       	ld	r25, Z+
    3ae0:	2f 01       	movw	r4, r30
    3ae2:	99 23       	and	r25, r25
    3ae4:	09 f0       	breq	.+2      	; 0x3ae8 <vfprintf+0xfa>
    3ae6:	b8 cf       	rjmp	.-144    	; 0x3a58 <vfprintf+0x6a>
    3ae8:	89 2f       	mov	r24, r25
    3aea:	85 54       	subi	r24, 0x45	; 69
    3aec:	83 30       	cpi	r24, 0x03	; 3
    3aee:	18 f0       	brcs	.+6      	; 0x3af6 <vfprintf+0x108>
    3af0:	80 52       	subi	r24, 0x20	; 32
    3af2:	83 30       	cpi	r24, 0x03	; 3
    3af4:	38 f4       	brcc	.+14     	; 0x3b04 <vfprintf+0x116>
    3af6:	44 e0       	ldi	r20, 0x04	; 4
    3af8:	50 e0       	ldi	r21, 0x00	; 0
    3afa:	a4 0e       	add	r10, r20
    3afc:	b5 1e       	adc	r11, r21
    3afe:	5f e3       	ldi	r21, 0x3F	; 63
    3b00:	59 83       	std	Y+1, r21	; 0x01
    3b02:	0f c0       	rjmp	.+30     	; 0x3b22 <vfprintf+0x134>
    3b04:	93 36       	cpi	r25, 0x63	; 99
    3b06:	31 f0       	breq	.+12     	; 0x3b14 <vfprintf+0x126>
    3b08:	93 37       	cpi	r25, 0x73	; 115
    3b0a:	79 f0       	breq	.+30     	; 0x3b2a <vfprintf+0x13c>
    3b0c:	93 35       	cpi	r25, 0x53	; 83
    3b0e:	09 f0       	breq	.+2      	; 0x3b12 <vfprintf+0x124>
    3b10:	56 c0       	rjmp	.+172    	; 0x3bbe <vfprintf+0x1d0>
    3b12:	20 c0       	rjmp	.+64     	; 0x3b54 <vfprintf+0x166>
    3b14:	f5 01       	movw	r30, r10
    3b16:	80 81       	ld	r24, Z
    3b18:	89 83       	std	Y+1, r24	; 0x01
    3b1a:	42 e0       	ldi	r20, 0x02	; 2
    3b1c:	50 e0       	ldi	r21, 0x00	; 0
    3b1e:	a4 0e       	add	r10, r20
    3b20:	b5 1e       	adc	r11, r21
    3b22:	61 01       	movw	r12, r2
    3b24:	01 e0       	ldi	r16, 0x01	; 1
    3b26:	10 e0       	ldi	r17, 0x00	; 0
    3b28:	12 c0       	rjmp	.+36     	; 0x3b4e <vfprintf+0x160>
    3b2a:	f5 01       	movw	r30, r10
    3b2c:	c0 80       	ld	r12, Z
    3b2e:	d1 80       	ldd	r13, Z+1	; 0x01
    3b30:	f6 fc       	sbrc	r15, 6
    3b32:	03 c0       	rjmp	.+6      	; 0x3b3a <vfprintf+0x14c>
    3b34:	6f ef       	ldi	r22, 0xFF	; 255
    3b36:	7f ef       	ldi	r23, 0xFF	; 255
    3b38:	02 c0       	rjmp	.+4      	; 0x3b3e <vfprintf+0x150>
    3b3a:	69 2d       	mov	r22, r9
    3b3c:	70 e0       	ldi	r23, 0x00	; 0
    3b3e:	42 e0       	ldi	r20, 0x02	; 2
    3b40:	50 e0       	ldi	r21, 0x00	; 0
    3b42:	a4 0e       	add	r10, r20
    3b44:	b5 1e       	adc	r11, r21
    3b46:	c6 01       	movw	r24, r12
    3b48:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <strnlen>
    3b4c:	8c 01       	movw	r16, r24
    3b4e:	5f e7       	ldi	r21, 0x7F	; 127
    3b50:	f5 22       	and	r15, r21
    3b52:	14 c0       	rjmp	.+40     	; 0x3b7c <vfprintf+0x18e>
    3b54:	f5 01       	movw	r30, r10
    3b56:	c0 80       	ld	r12, Z
    3b58:	d1 80       	ldd	r13, Z+1	; 0x01
    3b5a:	f6 fc       	sbrc	r15, 6
    3b5c:	03 c0       	rjmp	.+6      	; 0x3b64 <vfprintf+0x176>
    3b5e:	6f ef       	ldi	r22, 0xFF	; 255
    3b60:	7f ef       	ldi	r23, 0xFF	; 255
    3b62:	02 c0       	rjmp	.+4      	; 0x3b68 <vfprintf+0x17a>
    3b64:	69 2d       	mov	r22, r9
    3b66:	70 e0       	ldi	r23, 0x00	; 0
    3b68:	42 e0       	ldi	r20, 0x02	; 2
    3b6a:	50 e0       	ldi	r21, 0x00	; 0
    3b6c:	a4 0e       	add	r10, r20
    3b6e:	b5 1e       	adc	r11, r21
    3b70:	c6 01       	movw	r24, r12
    3b72:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <strnlen_P>
    3b76:	8c 01       	movw	r16, r24
    3b78:	50 e8       	ldi	r21, 0x80	; 128
    3b7a:	f5 2a       	or	r15, r21
    3b7c:	f3 fe       	sbrs	r15, 3
    3b7e:	07 c0       	rjmp	.+14     	; 0x3b8e <vfprintf+0x1a0>
    3b80:	1a c0       	rjmp	.+52     	; 0x3bb6 <vfprintf+0x1c8>
    3b82:	80 e2       	ldi	r24, 0x20	; 32
    3b84:	90 e0       	ldi	r25, 0x00	; 0
    3b86:	b3 01       	movw	r22, r6
    3b88:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <fputc>
    3b8c:	ea 94       	dec	r14
    3b8e:	8e 2d       	mov	r24, r14
    3b90:	90 e0       	ldi	r25, 0x00	; 0
    3b92:	08 17       	cp	r16, r24
    3b94:	19 07       	cpc	r17, r25
    3b96:	a8 f3       	brcs	.-22     	; 0x3b82 <vfprintf+0x194>
    3b98:	0e c0       	rjmp	.+28     	; 0x3bb6 <vfprintf+0x1c8>
    3b9a:	f6 01       	movw	r30, r12
    3b9c:	f7 fc       	sbrc	r15, 7
    3b9e:	85 91       	lpm	r24, Z+
    3ba0:	f7 fe       	sbrs	r15, 7
    3ba2:	81 91       	ld	r24, Z+
    3ba4:	6f 01       	movw	r12, r30
    3ba6:	90 e0       	ldi	r25, 0x00	; 0
    3ba8:	b3 01       	movw	r22, r6
    3baa:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <fputc>
    3bae:	e1 10       	cpse	r14, r1
    3bb0:	ea 94       	dec	r14
    3bb2:	01 50       	subi	r16, 0x01	; 1
    3bb4:	10 40       	sbci	r17, 0x00	; 0
    3bb6:	01 15       	cp	r16, r1
    3bb8:	11 05       	cpc	r17, r1
    3bba:	79 f7       	brne	.-34     	; 0x3b9a <vfprintf+0x1ac>
    3bbc:	ea c0       	rjmp	.+468    	; 0x3d92 <vfprintf+0x3a4>
    3bbe:	94 36       	cpi	r25, 0x64	; 100
    3bc0:	11 f0       	breq	.+4      	; 0x3bc6 <vfprintf+0x1d8>
    3bc2:	99 36       	cpi	r25, 0x69	; 105
    3bc4:	69 f5       	brne	.+90     	; 0x3c20 <vfprintf+0x232>
    3bc6:	f7 fe       	sbrs	r15, 7
    3bc8:	08 c0       	rjmp	.+16     	; 0x3bda <vfprintf+0x1ec>
    3bca:	f5 01       	movw	r30, r10
    3bcc:	20 81       	ld	r18, Z
    3bce:	31 81       	ldd	r19, Z+1	; 0x01
    3bd0:	42 81       	ldd	r20, Z+2	; 0x02
    3bd2:	53 81       	ldd	r21, Z+3	; 0x03
    3bd4:	84 e0       	ldi	r24, 0x04	; 4
    3bd6:	90 e0       	ldi	r25, 0x00	; 0
    3bd8:	0a c0       	rjmp	.+20     	; 0x3bee <vfprintf+0x200>
    3bda:	f5 01       	movw	r30, r10
    3bdc:	80 81       	ld	r24, Z
    3bde:	91 81       	ldd	r25, Z+1	; 0x01
    3be0:	9c 01       	movw	r18, r24
    3be2:	44 27       	eor	r20, r20
    3be4:	37 fd       	sbrc	r19, 7
    3be6:	40 95       	com	r20
    3be8:	54 2f       	mov	r21, r20
    3bea:	82 e0       	ldi	r24, 0x02	; 2
    3bec:	90 e0       	ldi	r25, 0x00	; 0
    3bee:	a8 0e       	add	r10, r24
    3bf0:	b9 1e       	adc	r11, r25
    3bf2:	9f e6       	ldi	r25, 0x6F	; 111
    3bf4:	f9 22       	and	r15, r25
    3bf6:	57 ff       	sbrs	r21, 7
    3bf8:	09 c0       	rjmp	.+18     	; 0x3c0c <vfprintf+0x21e>
    3bfa:	50 95       	com	r21
    3bfc:	40 95       	com	r20
    3bfe:	30 95       	com	r19
    3c00:	21 95       	neg	r18
    3c02:	3f 4f       	sbci	r19, 0xFF	; 255
    3c04:	4f 4f       	sbci	r20, 0xFF	; 255
    3c06:	5f 4f       	sbci	r21, 0xFF	; 255
    3c08:	e0 e8       	ldi	r30, 0x80	; 128
    3c0a:	fe 2a       	or	r15, r30
    3c0c:	ca 01       	movw	r24, r20
    3c0e:	b9 01       	movw	r22, r18
    3c10:	a1 01       	movw	r20, r2
    3c12:	2a e0       	ldi	r18, 0x0A	; 10
    3c14:	30 e0       	ldi	r19, 0x00	; 0
    3c16:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <__ultoa_invert>
    3c1a:	d8 2e       	mov	r13, r24
    3c1c:	d2 18       	sub	r13, r2
    3c1e:	40 c0       	rjmp	.+128    	; 0x3ca0 <vfprintf+0x2b2>
    3c20:	95 37       	cpi	r25, 0x75	; 117
    3c22:	29 f4       	brne	.+10     	; 0x3c2e <vfprintf+0x240>
    3c24:	1f 2d       	mov	r17, r15
    3c26:	1f 7e       	andi	r17, 0xEF	; 239
    3c28:	2a e0       	ldi	r18, 0x0A	; 10
    3c2a:	30 e0       	ldi	r19, 0x00	; 0
    3c2c:	1d c0       	rjmp	.+58     	; 0x3c68 <vfprintf+0x27a>
    3c2e:	1f 2d       	mov	r17, r15
    3c30:	19 7f       	andi	r17, 0xF9	; 249
    3c32:	9f 36       	cpi	r25, 0x6F	; 111
    3c34:	61 f0       	breq	.+24     	; 0x3c4e <vfprintf+0x260>
    3c36:	90 37       	cpi	r25, 0x70	; 112
    3c38:	20 f4       	brcc	.+8      	; 0x3c42 <vfprintf+0x254>
    3c3a:	98 35       	cpi	r25, 0x58	; 88
    3c3c:	09 f0       	breq	.+2      	; 0x3c40 <vfprintf+0x252>
    3c3e:	ac c0       	rjmp	.+344    	; 0x3d98 <vfprintf+0x3aa>
    3c40:	0f c0       	rjmp	.+30     	; 0x3c60 <vfprintf+0x272>
    3c42:	90 37       	cpi	r25, 0x70	; 112
    3c44:	39 f0       	breq	.+14     	; 0x3c54 <vfprintf+0x266>
    3c46:	98 37       	cpi	r25, 0x78	; 120
    3c48:	09 f0       	breq	.+2      	; 0x3c4c <vfprintf+0x25e>
    3c4a:	a6 c0       	rjmp	.+332    	; 0x3d98 <vfprintf+0x3aa>
    3c4c:	04 c0       	rjmp	.+8      	; 0x3c56 <vfprintf+0x268>
    3c4e:	28 e0       	ldi	r18, 0x08	; 8
    3c50:	30 e0       	ldi	r19, 0x00	; 0
    3c52:	0a c0       	rjmp	.+20     	; 0x3c68 <vfprintf+0x27a>
    3c54:	10 61       	ori	r17, 0x10	; 16
    3c56:	14 fd       	sbrc	r17, 4
    3c58:	14 60       	ori	r17, 0x04	; 4
    3c5a:	20 e1       	ldi	r18, 0x10	; 16
    3c5c:	30 e0       	ldi	r19, 0x00	; 0
    3c5e:	04 c0       	rjmp	.+8      	; 0x3c68 <vfprintf+0x27a>
    3c60:	14 fd       	sbrc	r17, 4
    3c62:	16 60       	ori	r17, 0x06	; 6
    3c64:	20 e1       	ldi	r18, 0x10	; 16
    3c66:	32 e0       	ldi	r19, 0x02	; 2
    3c68:	17 ff       	sbrs	r17, 7
    3c6a:	08 c0       	rjmp	.+16     	; 0x3c7c <vfprintf+0x28e>
    3c6c:	f5 01       	movw	r30, r10
    3c6e:	60 81       	ld	r22, Z
    3c70:	71 81       	ldd	r23, Z+1	; 0x01
    3c72:	82 81       	ldd	r24, Z+2	; 0x02
    3c74:	93 81       	ldd	r25, Z+3	; 0x03
    3c76:	44 e0       	ldi	r20, 0x04	; 4
    3c78:	50 e0       	ldi	r21, 0x00	; 0
    3c7a:	08 c0       	rjmp	.+16     	; 0x3c8c <vfprintf+0x29e>
    3c7c:	f5 01       	movw	r30, r10
    3c7e:	80 81       	ld	r24, Z
    3c80:	91 81       	ldd	r25, Z+1	; 0x01
    3c82:	bc 01       	movw	r22, r24
    3c84:	80 e0       	ldi	r24, 0x00	; 0
    3c86:	90 e0       	ldi	r25, 0x00	; 0
    3c88:	42 e0       	ldi	r20, 0x02	; 2
    3c8a:	50 e0       	ldi	r21, 0x00	; 0
    3c8c:	a4 0e       	add	r10, r20
    3c8e:	b5 1e       	adc	r11, r21
    3c90:	a1 01       	movw	r20, r2
    3c92:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <__ultoa_invert>
    3c96:	d8 2e       	mov	r13, r24
    3c98:	d2 18       	sub	r13, r2
    3c9a:	8f e7       	ldi	r24, 0x7F	; 127
    3c9c:	f8 2e       	mov	r15, r24
    3c9e:	f1 22       	and	r15, r17
    3ca0:	f6 fe       	sbrs	r15, 6
    3ca2:	0b c0       	rjmp	.+22     	; 0x3cba <vfprintf+0x2cc>
    3ca4:	5e ef       	ldi	r21, 0xFE	; 254
    3ca6:	f5 22       	and	r15, r21
    3ca8:	d9 14       	cp	r13, r9
    3caa:	38 f4       	brcc	.+14     	; 0x3cba <vfprintf+0x2cc>
    3cac:	f4 fe       	sbrs	r15, 4
    3cae:	07 c0       	rjmp	.+14     	; 0x3cbe <vfprintf+0x2d0>
    3cb0:	f2 fc       	sbrc	r15, 2
    3cb2:	05 c0       	rjmp	.+10     	; 0x3cbe <vfprintf+0x2d0>
    3cb4:	8f ee       	ldi	r24, 0xEF	; 239
    3cb6:	f8 22       	and	r15, r24
    3cb8:	02 c0       	rjmp	.+4      	; 0x3cbe <vfprintf+0x2d0>
    3cba:	1d 2d       	mov	r17, r13
    3cbc:	01 c0       	rjmp	.+2      	; 0x3cc0 <vfprintf+0x2d2>
    3cbe:	19 2d       	mov	r17, r9
    3cc0:	f4 fe       	sbrs	r15, 4
    3cc2:	0d c0       	rjmp	.+26     	; 0x3cde <vfprintf+0x2f0>
    3cc4:	fe 01       	movw	r30, r28
    3cc6:	ed 0d       	add	r30, r13
    3cc8:	f1 1d       	adc	r31, r1
    3cca:	80 81       	ld	r24, Z
    3ccc:	80 33       	cpi	r24, 0x30	; 48
    3cce:	19 f4       	brne	.+6      	; 0x3cd6 <vfprintf+0x2e8>
    3cd0:	99 ee       	ldi	r25, 0xE9	; 233
    3cd2:	f9 22       	and	r15, r25
    3cd4:	08 c0       	rjmp	.+16     	; 0x3ce6 <vfprintf+0x2f8>
    3cd6:	1f 5f       	subi	r17, 0xFF	; 255
    3cd8:	f2 fe       	sbrs	r15, 2
    3cda:	05 c0       	rjmp	.+10     	; 0x3ce6 <vfprintf+0x2f8>
    3cdc:	03 c0       	rjmp	.+6      	; 0x3ce4 <vfprintf+0x2f6>
    3cde:	8f 2d       	mov	r24, r15
    3ce0:	86 78       	andi	r24, 0x86	; 134
    3ce2:	09 f0       	breq	.+2      	; 0x3ce6 <vfprintf+0x2f8>
    3ce4:	1f 5f       	subi	r17, 0xFF	; 255
    3ce6:	0f 2d       	mov	r16, r15
    3ce8:	f3 fc       	sbrc	r15, 3
    3cea:	14 c0       	rjmp	.+40     	; 0x3d14 <vfprintf+0x326>
    3cec:	f0 fe       	sbrs	r15, 0
    3cee:	0f c0       	rjmp	.+30     	; 0x3d0e <vfprintf+0x320>
    3cf0:	1e 15       	cp	r17, r14
    3cf2:	10 f0       	brcs	.+4      	; 0x3cf8 <vfprintf+0x30a>
    3cf4:	9d 2c       	mov	r9, r13
    3cf6:	0b c0       	rjmp	.+22     	; 0x3d0e <vfprintf+0x320>
    3cf8:	9d 2c       	mov	r9, r13
    3cfa:	9e 0c       	add	r9, r14
    3cfc:	91 1a       	sub	r9, r17
    3cfe:	1e 2d       	mov	r17, r14
    3d00:	06 c0       	rjmp	.+12     	; 0x3d0e <vfprintf+0x320>
    3d02:	80 e2       	ldi	r24, 0x20	; 32
    3d04:	90 e0       	ldi	r25, 0x00	; 0
    3d06:	b3 01       	movw	r22, r6
    3d08:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <fputc>
    3d0c:	1f 5f       	subi	r17, 0xFF	; 255
    3d0e:	1e 15       	cp	r17, r14
    3d10:	c0 f3       	brcs	.-16     	; 0x3d02 <vfprintf+0x314>
    3d12:	04 c0       	rjmp	.+8      	; 0x3d1c <vfprintf+0x32e>
    3d14:	1e 15       	cp	r17, r14
    3d16:	10 f4       	brcc	.+4      	; 0x3d1c <vfprintf+0x32e>
    3d18:	e1 1a       	sub	r14, r17
    3d1a:	01 c0       	rjmp	.+2      	; 0x3d1e <vfprintf+0x330>
    3d1c:	ee 24       	eor	r14, r14
    3d1e:	04 ff       	sbrs	r16, 4
    3d20:	0f c0       	rjmp	.+30     	; 0x3d40 <vfprintf+0x352>
    3d22:	80 e3       	ldi	r24, 0x30	; 48
    3d24:	90 e0       	ldi	r25, 0x00	; 0
    3d26:	b3 01       	movw	r22, r6
    3d28:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <fputc>
    3d2c:	02 ff       	sbrs	r16, 2
    3d2e:	1d c0       	rjmp	.+58     	; 0x3d6a <vfprintf+0x37c>
    3d30:	01 fd       	sbrc	r16, 1
    3d32:	03 c0       	rjmp	.+6      	; 0x3d3a <vfprintf+0x34c>
    3d34:	88 e7       	ldi	r24, 0x78	; 120
    3d36:	90 e0       	ldi	r25, 0x00	; 0
    3d38:	0e c0       	rjmp	.+28     	; 0x3d56 <vfprintf+0x368>
    3d3a:	88 e5       	ldi	r24, 0x58	; 88
    3d3c:	90 e0       	ldi	r25, 0x00	; 0
    3d3e:	0b c0       	rjmp	.+22     	; 0x3d56 <vfprintf+0x368>
    3d40:	80 2f       	mov	r24, r16
    3d42:	86 78       	andi	r24, 0x86	; 134
    3d44:	91 f0       	breq	.+36     	; 0x3d6a <vfprintf+0x37c>
    3d46:	01 ff       	sbrs	r16, 1
    3d48:	02 c0       	rjmp	.+4      	; 0x3d4e <vfprintf+0x360>
    3d4a:	8b e2       	ldi	r24, 0x2B	; 43
    3d4c:	01 c0       	rjmp	.+2      	; 0x3d50 <vfprintf+0x362>
    3d4e:	80 e2       	ldi	r24, 0x20	; 32
    3d50:	f7 fc       	sbrc	r15, 7
    3d52:	8d e2       	ldi	r24, 0x2D	; 45
    3d54:	90 e0       	ldi	r25, 0x00	; 0
    3d56:	b3 01       	movw	r22, r6
    3d58:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <fputc>
    3d5c:	06 c0       	rjmp	.+12     	; 0x3d6a <vfprintf+0x37c>
    3d5e:	80 e3       	ldi	r24, 0x30	; 48
    3d60:	90 e0       	ldi	r25, 0x00	; 0
    3d62:	b3 01       	movw	r22, r6
    3d64:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <fputc>
    3d68:	9a 94       	dec	r9
    3d6a:	d9 14       	cp	r13, r9
    3d6c:	c0 f3       	brcs	.-16     	; 0x3d5e <vfprintf+0x370>
    3d6e:	da 94       	dec	r13
    3d70:	f1 01       	movw	r30, r2
    3d72:	ed 0d       	add	r30, r13
    3d74:	f1 1d       	adc	r31, r1
    3d76:	80 81       	ld	r24, Z
    3d78:	90 e0       	ldi	r25, 0x00	; 0
    3d7a:	b3 01       	movw	r22, r6
    3d7c:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <fputc>
    3d80:	dd 20       	and	r13, r13
    3d82:	a9 f7       	brne	.-22     	; 0x3d6e <vfprintf+0x380>
    3d84:	06 c0       	rjmp	.+12     	; 0x3d92 <vfprintf+0x3a4>
    3d86:	80 e2       	ldi	r24, 0x20	; 32
    3d88:	90 e0       	ldi	r25, 0x00	; 0
    3d8a:	b3 01       	movw	r22, r6
    3d8c:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <fputc>
    3d90:	ea 94       	dec	r14
    3d92:	ee 20       	and	r14, r14
    3d94:	c1 f7       	brne	.-16     	; 0x3d86 <vfprintf+0x398>
    3d96:	43 ce       	rjmp	.-890    	; 0x3a1e <vfprintf+0x30>
    3d98:	f3 01       	movw	r30, r6
    3d9a:	66 81       	ldd	r22, Z+6	; 0x06
    3d9c:	77 81       	ldd	r23, Z+7	; 0x07
    3d9e:	cb 01       	movw	r24, r22
    3da0:	2b 96       	adiw	r28, 0x0b	; 11
    3da2:	e2 e1       	ldi	r30, 0x12	; 18
    3da4:	0c 94 b9 1b 	jmp	0x3772	; 0x3772 <__epilogue_restores__>

00003da8 <__ctype_isfalse>:
    3da8:	99 27       	eor	r25, r25
    3daa:	88 27       	eor	r24, r24

00003dac <__ctype_istrue>:
    3dac:	08 95       	ret

00003dae <strnlen_P>:
    3dae:	fc 01       	movw	r30, r24
    3db0:	05 90       	lpm	r0, Z+
    3db2:	61 50       	subi	r22, 0x01	; 1
    3db4:	70 40       	sbci	r23, 0x00	; 0
    3db6:	01 10       	cpse	r0, r1
    3db8:	d8 f7       	brcc	.-10     	; 0x3db0 <strnlen_P+0x2>
    3dba:	80 95       	com	r24
    3dbc:	90 95       	com	r25
    3dbe:	8e 0f       	add	r24, r30
    3dc0:	9f 1f       	adc	r25, r31
    3dc2:	08 95       	ret

00003dc4 <strnlen>:
    3dc4:	fc 01       	movw	r30, r24
    3dc6:	61 50       	subi	r22, 0x01	; 1
    3dc8:	70 40       	sbci	r23, 0x00	; 0
    3dca:	01 90       	ld	r0, Z+
    3dcc:	01 10       	cpse	r0, r1
    3dce:	d8 f7       	brcc	.-10     	; 0x3dc6 <strnlen+0x2>
    3dd0:	80 95       	com	r24
    3dd2:	90 95       	com	r25
    3dd4:	8e 0f       	add	r24, r30
    3dd6:	9f 1f       	adc	r25, r31
    3dd8:	08 95       	ret

00003dda <fputc>:
    3dda:	0f 93       	push	r16
    3ddc:	1f 93       	push	r17
    3dde:	cf 93       	push	r28
    3de0:	df 93       	push	r29
    3de2:	8c 01       	movw	r16, r24
    3de4:	eb 01       	movw	r28, r22
    3de6:	8b 81       	ldd	r24, Y+3	; 0x03
    3de8:	81 ff       	sbrs	r24, 1
    3dea:	1b c0       	rjmp	.+54     	; 0x3e22 <fputc+0x48>
    3dec:	82 ff       	sbrs	r24, 2
    3dee:	0d c0       	rjmp	.+26     	; 0x3e0a <fputc+0x30>
    3df0:	2e 81       	ldd	r18, Y+6	; 0x06
    3df2:	3f 81       	ldd	r19, Y+7	; 0x07
    3df4:	8c 81       	ldd	r24, Y+4	; 0x04
    3df6:	9d 81       	ldd	r25, Y+5	; 0x05
    3df8:	28 17       	cp	r18, r24
    3dfa:	39 07       	cpc	r19, r25
    3dfc:	64 f4       	brge	.+24     	; 0x3e16 <fputc+0x3c>
    3dfe:	e8 81       	ld	r30, Y
    3e00:	f9 81       	ldd	r31, Y+1	; 0x01
    3e02:	01 93       	st	Z+, r16
    3e04:	f9 83       	std	Y+1, r31	; 0x01
    3e06:	e8 83       	st	Y, r30
    3e08:	06 c0       	rjmp	.+12     	; 0x3e16 <fputc+0x3c>
    3e0a:	e8 85       	ldd	r30, Y+8	; 0x08
    3e0c:	f9 85       	ldd	r31, Y+9	; 0x09
    3e0e:	80 2f       	mov	r24, r16
    3e10:	09 95       	icall
    3e12:	89 2b       	or	r24, r25
    3e14:	31 f4       	brne	.+12     	; 0x3e22 <fputc+0x48>
    3e16:	8e 81       	ldd	r24, Y+6	; 0x06
    3e18:	9f 81       	ldd	r25, Y+7	; 0x07
    3e1a:	01 96       	adiw	r24, 0x01	; 1
    3e1c:	9f 83       	std	Y+7, r25	; 0x07
    3e1e:	8e 83       	std	Y+6, r24	; 0x06
    3e20:	02 c0       	rjmp	.+4      	; 0x3e26 <fputc+0x4c>
    3e22:	0f ef       	ldi	r16, 0xFF	; 255
    3e24:	1f ef       	ldi	r17, 0xFF	; 255
    3e26:	c8 01       	movw	r24, r16
    3e28:	df 91       	pop	r29
    3e2a:	cf 91       	pop	r28
    3e2c:	1f 91       	pop	r17
    3e2e:	0f 91       	pop	r16
    3e30:	08 95       	ret

00003e32 <__ultoa_invert>:
    3e32:	fa 01       	movw	r30, r20
    3e34:	aa 27       	eor	r26, r26
    3e36:	28 30       	cpi	r18, 0x08	; 8
    3e38:	51 f1       	breq	.+84     	; 0x3e8e <__ultoa_invert+0x5c>
    3e3a:	20 31       	cpi	r18, 0x10	; 16
    3e3c:	81 f1       	breq	.+96     	; 0x3e9e <__ultoa_invert+0x6c>
    3e3e:	e8 94       	clt
    3e40:	6f 93       	push	r22
    3e42:	6e 7f       	andi	r22, 0xFE	; 254
    3e44:	6e 5f       	subi	r22, 0xFE	; 254
    3e46:	7f 4f       	sbci	r23, 0xFF	; 255
    3e48:	8f 4f       	sbci	r24, 0xFF	; 255
    3e4a:	9f 4f       	sbci	r25, 0xFF	; 255
    3e4c:	af 4f       	sbci	r26, 0xFF	; 255
    3e4e:	b1 e0       	ldi	r27, 0x01	; 1
    3e50:	3e d0       	rcall	.+124    	; 0x3ece <__ultoa_invert+0x9c>
    3e52:	b4 e0       	ldi	r27, 0x04	; 4
    3e54:	3c d0       	rcall	.+120    	; 0x3ece <__ultoa_invert+0x9c>
    3e56:	67 0f       	add	r22, r23
    3e58:	78 1f       	adc	r23, r24
    3e5a:	89 1f       	adc	r24, r25
    3e5c:	9a 1f       	adc	r25, r26
    3e5e:	a1 1d       	adc	r26, r1
    3e60:	68 0f       	add	r22, r24
    3e62:	79 1f       	adc	r23, r25
    3e64:	8a 1f       	adc	r24, r26
    3e66:	91 1d       	adc	r25, r1
    3e68:	a1 1d       	adc	r26, r1
    3e6a:	6a 0f       	add	r22, r26
    3e6c:	71 1d       	adc	r23, r1
    3e6e:	81 1d       	adc	r24, r1
    3e70:	91 1d       	adc	r25, r1
    3e72:	a1 1d       	adc	r26, r1
    3e74:	20 d0       	rcall	.+64     	; 0x3eb6 <__ultoa_invert+0x84>
    3e76:	09 f4       	brne	.+2      	; 0x3e7a <__ultoa_invert+0x48>
    3e78:	68 94       	set
    3e7a:	3f 91       	pop	r19
    3e7c:	2a e0       	ldi	r18, 0x0A	; 10
    3e7e:	26 9f       	mul	r18, r22
    3e80:	11 24       	eor	r1, r1
    3e82:	30 19       	sub	r19, r0
    3e84:	30 5d       	subi	r19, 0xD0	; 208
    3e86:	31 93       	st	Z+, r19
    3e88:	de f6       	brtc	.-74     	; 0x3e40 <__ultoa_invert+0xe>
    3e8a:	cf 01       	movw	r24, r30
    3e8c:	08 95       	ret
    3e8e:	46 2f       	mov	r20, r22
    3e90:	47 70       	andi	r20, 0x07	; 7
    3e92:	40 5d       	subi	r20, 0xD0	; 208
    3e94:	41 93       	st	Z+, r20
    3e96:	b3 e0       	ldi	r27, 0x03	; 3
    3e98:	0f d0       	rcall	.+30     	; 0x3eb8 <__ultoa_invert+0x86>
    3e9a:	c9 f7       	brne	.-14     	; 0x3e8e <__ultoa_invert+0x5c>
    3e9c:	f6 cf       	rjmp	.-20     	; 0x3e8a <__ultoa_invert+0x58>
    3e9e:	46 2f       	mov	r20, r22
    3ea0:	4f 70       	andi	r20, 0x0F	; 15
    3ea2:	40 5d       	subi	r20, 0xD0	; 208
    3ea4:	4a 33       	cpi	r20, 0x3A	; 58
    3ea6:	18 f0       	brcs	.+6      	; 0x3eae <__ultoa_invert+0x7c>
    3ea8:	49 5d       	subi	r20, 0xD9	; 217
    3eaa:	31 fd       	sbrc	r19, 1
    3eac:	40 52       	subi	r20, 0x20	; 32
    3eae:	41 93       	st	Z+, r20
    3eb0:	02 d0       	rcall	.+4      	; 0x3eb6 <__ultoa_invert+0x84>
    3eb2:	a9 f7       	brne	.-22     	; 0x3e9e <__ultoa_invert+0x6c>
    3eb4:	ea cf       	rjmp	.-44     	; 0x3e8a <__ultoa_invert+0x58>
    3eb6:	b4 e0       	ldi	r27, 0x04	; 4
    3eb8:	a6 95       	lsr	r26
    3eba:	97 95       	ror	r25
    3ebc:	87 95       	ror	r24
    3ebe:	77 95       	ror	r23
    3ec0:	67 95       	ror	r22
    3ec2:	ba 95       	dec	r27
    3ec4:	c9 f7       	brne	.-14     	; 0x3eb8 <__ultoa_invert+0x86>
    3ec6:	00 97       	sbiw	r24, 0x00	; 0
    3ec8:	61 05       	cpc	r22, r1
    3eca:	71 05       	cpc	r23, r1
    3ecc:	08 95       	ret
    3ece:	9b 01       	movw	r18, r22
    3ed0:	ac 01       	movw	r20, r24
    3ed2:	0a 2e       	mov	r0, r26
    3ed4:	06 94       	lsr	r0
    3ed6:	57 95       	ror	r21
    3ed8:	47 95       	ror	r20
    3eda:	37 95       	ror	r19
    3edc:	27 95       	ror	r18
    3ede:	ba 95       	dec	r27
    3ee0:	c9 f7       	brne	.-14     	; 0x3ed4 <__ultoa_invert+0xa2>
    3ee2:	62 0f       	add	r22, r18
    3ee4:	73 1f       	adc	r23, r19
    3ee6:	84 1f       	adc	r24, r20
    3ee8:	95 1f       	adc	r25, r21
    3eea:	a0 1d       	adc	r26, r0
    3eec:	08 95       	ret

00003eee <_exit>:
    3eee:	f8 94       	cli

00003ef0 <__stop_program>:
    3ef0:	ff cf       	rjmp	.-2      	; 0x3ef0 <__stop_program>
